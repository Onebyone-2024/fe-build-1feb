{"version":3,"sources":["Component/Modal/PopUpSavedCsv/index.jsx","Page/StockEntry/StockTransfer/Upload/Review.jsx","Page/StockEntry/StockTransfer/Upload/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/BootstrapTable/index.jsx"],"names":["PopUpSavedCsv","_ref","isSaved","setIsSaved","confirmation","submit","statusDisplay","title","cancelButtonTitle","actionButtonTitle","cancelButtonClass","actionButtonClass","actionButtonEvent","msg1","msg2","setShow","onCloseFunction","saved","success","headerIcon","textColor","button","failed","data","focus","document","getElementById","React","createElement","CRow","className","CCol","CModal","show","onClose","size","style","minHeight","bodyOpenClassName","closeOnBackdrop","onClick","CModalBody","concat","backgroundColor","Array","isArray","map","datax","index","message","CModalFooter","CButton","withRouter","props","dispatch","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","csvData","selectorCsvField","csvField","selectorWarehouseArea","warehouseAreaCsv","selectorStatus","status","warehousesData","warehouseData","isShowModal","setIsShowModal","useState","isHiddenRows","setIsHiddenRows","isShowErrorOnly","setIsShowErrorOnly","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","setCheckingCsv","submitStatus","setSubmitStatus","setTitle","setMsg1","setMsg2","setCancelButtonTitle","setActionButtonTitle","isSubmitText","setIsSubmitText","setCancelButtonClass","setActionButtonClass","colourTitle","setColourTitle","useEffect","_ref4","undefined","stats","dataField","indexField","toUpperCase","checking_error","history","push","setCsvDataTmp","param","_ref3","type","STOK_TAKE_UPLOAD_JSON","setCsvData","TableEditable","globalData","columns","tableClass","hiddenRows","warehouseArea","transaction","lineHeight","length","goBack","class","colorText","refreshOnCancel","ModalsCaptcha","async","_ref5","console","log","submitText","next","e","isCaptcha","setIsValidated","setIsType","isType","isValidated","key","includes","type_","parseInt","value","setSelectionRange","split","stat","ModalsConfirmation","_module$jobPost","_module$jobPost2","_module$jobPost3","moduleEntry","setConfirmation","save","isSuccess","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","name","window","onkeydown","keyCode","module","areaDestinationName","jobPost","warehouseDestinationName","areaName","skuListUpdate","skuListUpdateCheck","newModule","list","poList","po","itemList","item","_item$wasteType","_item$wasteType2","_item$wasteType3","_item$wasteType4","_item$wasteType5","_item$wasteType6","qty","grade","_qty","isInteger","parseFloat","_sku","skuName","wasteType","label","_toWaste","_uom","unitOfMeassures","uom","newSku","sku","wqty","swqty","isExist","findIndex","_item$wasteType7","_item$wasteType8","i","s","forEach","CModalHeader","CModalTitle","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","_ref2","text","characters","charactersLength","text_split","r","charAt","Math","floor","random","setIsCaptcha","isCaptchaText","setIsCaptchaText","autocomplete","onKeyUp","id","textTransform","maxLength","placeholder","Component","constructor","_this","super","this","changeOutboundReason","row","setTimeout","elem","classList","add","innerHTML","changeWarehouseUuid","column","columnName","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","obj","indexOf","clear","validatePOSKU","idColumn","url","elemspan","axios","method","then","response","_response$data","wmsPoSkuCode","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","expiryDate","inboundDate","supplierName","supplierUuid","photos","remove","error","validatePOSKUStockTransfer","newValue","payloadPO","poSkuCode","skuNumber","skuUuid","warehouseSource","areaSource","_response$data2","_data$2","_data$3","_data$4","_data$5","_data$6","_data$7","_data$8","_data$9","_data$10","_data$11","_data$","isValid","errorMessage","_response$data3","_response$data4","_response$data5","skuDescription","tmpKey","keyy","setState","validateOutbountReason","tmp_data","validateOutbountType","validateSKUNumber","rowData","arguments","newSkuData","skuList","_response$data6","photo","imageMd","newGradeUom","validateStatus","validateResult","rowCount","triggerRender","bind","render","outboundType","editable","_warehousesData$data","d","code","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","done","keyStatus","keyReason","reason","arr_grade","checkType","isNaN","regex_date","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","CCard","BootstrapTable","keyField","sort","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered","TableResult"],"mappings":"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","file":"static/js/52.3f97c201.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CRow,\n} from \"@coreui/react\";\nimport \"Component/Modal/PopUp/index.scss\";\n\nconst PopUpSavedCsv = ({\n  isSaved,\n  setIsSaved,\n  confirmation,\n  submit,\n  statusDisplay = false,\n  title = \"\",\n  cancelButtonTitle = \"Cancel\",\n  actionButtonTitle = \"Submit\",\n  cancelButtonClass = \"bg-background\",\n  actionButtonClass = \"bg-background\",\n  actionButtonEvent = null,\n  msg1 = null,\n  msg2 = null,\n  setShow,\n  onCloseFunction,\n}) => {\n  const saved = {\n    success: {\n      headerIcon: \"em em-tada\",\n      textColor: \"green\",\n      button: \"bg-green\",\n    },\n    failed: {\n      headerIcon: \"em em-anguished\",\n      textColor: \"red\",\n      button: \"bg-red\",\n    },\n  };\n  const data = isSaved == \"success\" ? saved.success : saved.failed;\n\n  const focus = document.getElementById(\"btn_is_saved\");\n  if (focus) focus.focus();\n  return (\n    <CRow className={statusDisplay ? null : \"d-none\"}>\n      <CCol>\n        <CModal\n          show={statusDisplay}\n          onClose={() => {\n            onCloseFunction();\n          }}\n          size=\"lg\"\n          style={{ minHeight: \"280px\" }}\n          bodyOpenClassName=\"p-3\"\n          closeOnBackdrop={false}\n        >\n          <div className=\"d-flex flex-row-reverse\">\n            <i\n              className=\"pr-3 pt-3 iconU-modalClose\"\n              onClick={() => {\n                onCloseFunction();\n              }}\n            ></i>\n          </div>\n          <CModalBody className=\"px-5 mt-3 py-0\">\n            <label className={`${data.textColor} LatoBold mr-2 h5 mb-3`}>\n              {title}\n            </label>{\" \"}\n            <span>\n              <i className={`${data.headerIcon}`}></i>\n            </span>\n            <div className=\"mr-1 h5 mb-3\">{`${msg1}`}</div>\n            <div\n              style={{ backgroundColor: \"#F5F7FA\" }}\n              className=\"w-100 border rounded px-3 pt-4 pb-3 mb-4\"\n            >\n              {!Array.isArray(msg2) ? (\n                <div className={`h5 font-weight-bold`}>{msg2}</div>\n              ) : (\n                msg2.map((datax, index) => {\n                  return <div className={datax.className}> {datax.message} </div>;\n                })\n              )}\n            </div>\n          </CModalBody>\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            {cancelButtonTitle ? (\n              <CButton\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\n                onClick={() => {\n                  onCloseFunction();\n                }}\n              >\n                {cancelButtonTitle}\n              </CButton>\n            ) : null}\n            {actionButtonTitle ? (\n              <CButton\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\n                onClick={() => {\n                  actionButtonEvent();\n                }}\n              >\n                {actionButtonTitle}\n              </CButton>\n            ) : null}{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default PopUpSavedCsv;\n","import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { TableEditable } from \"Component/BootstrapTable\";\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\nimport \"../index.scss\";\nimport {\n  showErrorsOnly,\n  deleteErrorsField,\n  setCsvData,\n  submit,\n  checking_error,\n} from \"./services.js\";\nimport PopUpSavedCsv from \"Component/Modal/PopUpSavedCsv\";\n\nconst Upload = (props) => {\n  const dispatch = useDispatch();\n\n  //selector\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const selectorCsvData = useSelector((state) => state.csvData);\n  const selectorCsvField = useSelector((state) => state.csvField);\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\n  const selectorStatus = useSelector((state) => state.status); //wh\n  const warehousesData = useSelector((state) => state.warehouseData);\n\n  //state\n  const [isShowModal, setIsShowModal] = React.useState(false);\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\n  const [isValidate, setIsValidate] = React.useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\n  const [submitStatus, setSubmitStatus] = React.useState(false);\n\n  const [title, setTitle] = React.useState(null);\n  const [msg1, setMsg1] = React.useState(null);\n  const [msg2, setMsg2] = React.useState(null);\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\n  const [cancelButtonClass, setCancelButtonClass] = React.useState(null);\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\n  const [colourTitle, setColourTitle] = React.useState(null);\n\n  useEffect(() => {\n    checking_error({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      setIsValidate,\n      setCheckingCsv,\n    });\n  }, [checkingCsv]);\n\n  // useEffect(() => {\n  //   if (submitStatus === true) {\n  //     props.history.push(\"/inventory-entry/stock-transfer/CSV-upload/result\");\n  //   }\n  // }, [submitStatus]);\n\n  useEffect(() => {\n    if (submitStatus == \"success\") {\n      setTitle(\"Success!\");\n      setMsg1(selectorCsvFileName + \" upload successfull.\");\n      setCancelButtonTitle(\"Cancel\");\n      setActionButtonTitle(\"Select Again\");\n      setActionButtonClass(\"bg-green background\");\n      setColourTitle(\"green\");\n      setModalShow(true);\n    } else if (submitStatus == \"API\") {\n      setTitle(\"Failed!\");\n      setMsg1(selectorCsvFileName + \" failed to upload.\");\n      setCancelButtonTitle(\"Cancel\");\n      setActionButtonTitle(\"Retry\");\n      setActionButtonClass(\"bg-red background\");\n      setColourTitle(\"red\");\n      setModalShow(true);\n    } else if (submitStatus == \"noData\") {\n      setTitle(\"Failed!\");\n      setMsg1(selectorCsvFileName + \" failed to upload.\");\n      setCancelButtonTitle(\"Check\"); \n      setCancelButtonClass(\"bg-red background\");\n      setActionButtonClass(\"d-none\");\n      setColourTitle(\"red\");\n      setModalShow(true);\n    }\n  }, [submitStatus]);\n\n  if (selectorCsvData === undefined || selectorCsvData === null) {\n    props.history.push(\"/inventory-entry/stock-transfer/CSV-upload\");\n    return 0;\n  }\n\n  const setCsvDataTmp = (param) => {\n    setCsvData({ param, dispatch, setCheckingCsv });\n    // showErrorsOnly({\n    //   csvData: selectorCsvData,\n    //   csvField: selectorCsvField,\n    //   isShowErrorOnly: false, \n    //   setIsShowErrorOnly,\n    //   setIsHiddenRows,\n    //   setCheckingCsv,\n    // });\n  };\n\n  return (\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\n      <TableEditable\n        globalData={selectorCsvData} //Required\n        columns={selectorCsvField} //Required\n        tableClass=\"reviewTable\"\n        hiddenRows={isHiddenRows}\n        warehouseArea={selectorWarehouseArea}\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\n        setIsValidate={(param) => setIsValidate(param)}\n        dispatch={dispatch}\n        setCheckingCsv={setCheckingCsv}\n        warehousesData={warehousesData}\n        transaction=\"stockTransfer\"\n      />\n\n      <div className=\"row pt-3\">\n        <div className=\"col-4\">\n          \n        </div>\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\n          Review your imported file: {selectorCsvFileName} (\n          {selectorCsvData.length || 0} Lines)\n        </div>\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\n            onClick={() => props.history.goBack()}\n          >\n            Discard\n          </button>\n\n          <button\n            type=\"button\"\n            class={\n              \"btn px-5 mr-3 text-white no-shadow float-right bg-green\"\n            }\n            onClick={() => setIsShowModal(!isShowModal)}\n          >\n            Submit\n          </button>\n        </div>\n      </div>\n\n      <PopUpSavedCsv\n        isSaved={submitStatus}\n        status={selectorStatus}\n        onCloseFunction={() => {\n          setModalShow(false);\n          setSubmitStatus(false);  \n          if(submitStatus=='success'){  \n            props.history.push(\"/inventory-entry/stock-transfer\")\n          }else if(submitStatus=='noData'){\n            props.history.push(\"/inventory-entry/stock-transfer/CSV-upload/result\");\n          }\n        }}\n        statusDisplay={modalShow}\n        title={title}\n        cancelButtonTitle={cancelButtonTitle}\n        actionButtonTitle={actionButtonTitle}\n        colorText={colourTitle}\n        refreshOnCancel={false}\n        msg1={msg1}\n        msg2={msg2}\n        cancelButtonClass={cancelButtonClass}\n        actionButtonClass={actionButtonClass + \" ml-0\"}\n        actionButtonEvent={() =>\n          {\n            if(submitStatus=='success'){  \n              props.history.push(\"/inventory-entry/stock-transfer/CSV-upload\")\n            } else if(submitStatus=='API'){\n              props.history.push(\"/inventory-entry/stock-transfer/CSV-upload\");\n            }\n        }\n         \n        }\n      /> \n      <ModalsCaptcha\n        submit={() =>\n          submit({\n            dispatch,\n            csvData: selectorCsvData,\n            csvField: selectorCsvField,\n            setIsShowModal,\n            setIsSubmitText,\n            setSubmitStatus,\n            setMsg1,\n            setMsg2,\n          })\n        }\n        submitText={isSubmitText}\n        show={isShowModal}\n        setIsShowModal={setIsShowModal}\n      />\n    </div>\n  );\n};\n\nexport default withRouter(Upload);\n","//other\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\nimport { submitCsvStockTransfer } from \"apiServices\";\nimport moment from \"moment\";\nimport React from \"react\";\n\nexport const showErrorsOnly = ({\n  csvData,\n  csvField,\n  isShowErrorOnly,\n  setIsShowErrorOnly,\n  setIsHiddenRows,\n  setCheckingCsv,\n}) => {\n  // ;\n  let tmp_arr_false = [];\n  let tmp_arr_true = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    let i = index + 1;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n\n    if (stat === false) {\n      if (!tmp_arr_false.includes(i)) {\n        tmp_arr_false.push(i);\n      }\n    } else {\n      if (!tmp_arr_true.includes(i)) {\n        tmp_arr_true.push(i);\n      }\n    }\n  });\n\n  //return array\n  let ret = [];\n  if (isShowErrorOnly === true) {\n    //true = delete all row\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\n    if (ret.length == csvData.length) {\n      return 0;\n    }\n  } else {\n    ret = [];\n  }\n  setIsHiddenRows(ret);\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\n  setCheckingCsv(true);\n};\n\nexport const deleteErrorsField = ({\n  csvData,\n  csvField,\n  dispatch,\n  setCheckingCsv,\n}) => {\n  let new_arr = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n    if (stat === true) {\n      new_arr.push(data);\n    }\n  });\n\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\n  setCheckingCsv(true);\n};\n\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\n  setCheckingCsv(true);\n};\n\nexport const checking_error = ({\n  csvData,\n  csvField,\n  setIsValidate,\n  setCheckingCsv,\n}) => {\n  if (csvData === undefined) {\n    return 0;\n  }\n  let stats = true;\n  csvData.map((data, index) => {\n    csvField.map((dataField, indexField) => {\n      let status = data[dataField.dataField + \"Status\"];\n\n      //jika outbound type = lainya, maka harus isi outbound reason\n      if (dataField.dataField == \"outboundType\") {\n        let type = data[dataField.dataField].toUpperCase();\n        if (type == \"LAINNYA\") {\n          if (data[\"outboundReason\"] == \"\") {\n            status = false;\n          }\n        }\n      }\n\n      if (status === false) {\n        // console.log(data, dataField.dataField, data[dataField.dataField + 'Status']);\n        stats = false;\n      }\n    });\n  });\n  if (stats === false) {\n    setIsValidate(false);\n  } else {\n    setIsValidate(true);\n  }\n  setCheckingCsv(false);\n};\n\nconst setHeader = (csvData) => {\n  //get time - created at\n  let time = new Date().getTime();\n  let d = new Date(time);\n  let n = d.getMilliseconds();\n  let list_area = [];\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseUuid || \"\";\n  let warehouse_destination = csvData[0].warehouseDestinationUuid || \"\";\n\n  csvData.map((data, index) => {\n    //in outbound csv upload only check area source\n    if (!list_area.includes(data.areaSource)) {\n      return_data.push({\n        id: index,\n        warehouseSource: warehouse_source,\n        warehouseDestination: warehouse_destination,\n        areaSource: data.areaSource,\n        areaDestination: data.areaSource,\n        list: [],\n        createdAt: n,\n      });\n      list_area.push(data.areaSource);\n    }\n  });\n  return return_data;\n};\n\nconst getSKU = (csvData) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseUuid || \"\";\n  let warehouse_destination = csvData[0].warehouseDestinationUuid || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.skuUuid == data.skuUuid &&\n        header.warehouseSource == data.warehouseSource &&\n        header.warehouseDestination == data.warehouseDestinationUuid &&\n        header.areaSource == data.areaSource\n      ) {\n        available = true;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        warehouseSource: warehouse_source,\n        warehouseDestination: warehouse_destination,\n        areaSource: data.areaSource,\n        skuUuid: data.skuUuid,\n        skuNumber: data.skuNumber,\n        unitOfMeassures: data.uom,\n        photo: data.photos,\n        poList: [],\n      });\n    }\n  });\n  return return_data;\n};\n\nconst checkGrade = (value) => {\n  if (!value) {\n    return;\n  }\n\n  if (value.toUpperCase() == \"SEMI WASTE\") {\n    return \"semi_waste\";\n  } else if (value.toUpperCase() == \"WASTE\") {\n    return \"waste\";\n  } else {\n    return value;\n  }\n};\n\nconst groupingPO = (csvData, skuList) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseUuid || \"\";\n  let warehouse_destination = csvData[0].warehouseDestinationUuid || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    let header_index = \"\";\n    console.log(data);\n\n    //cheking grade\n    let newGrade = checkGrade(data.newGradeUuid);\n    if (!newGrade) {\n      newGrade = data.skuUuid;\n    }\n    //end checking grade\n\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.areaSource == data.areaSource &&\n        header.warehouseSource == data.warehouseSource &&\n        header.warehouseDestination == data.warehouseDestination &&\n        header.skuUuid == data.skuUuid &&\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\n        header.ripenessLevel == data.ripenessLevel &&\n        header.expiryDateCol == data.expiryDateCol\n      ) {\n        available = true;\n        header_index = idx;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        skuUuid: data.skuUuid || \"\",\n        areaSource: data.areaSource || \"\",\n        warehouseSource: warehouse_source || \"\",\n        warehouseDestination: warehouse_destination || \"\",\n        expiryDateText: data.expiryDateCol || \"\",\n        expiryDate:\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n        inboundDate: data.inboundDate || \"\",\n        supplierId: data.supplierUuid || \"\",\n        supplierName: data.supplierName || \"\",\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\n        codeGrade: data.skuUuid || \"\",\n        ripenessLevel: data.ripenessLevel || 0,\n        skuNumber: data.skuNumber || \"\",\n        areaName: data.areaName || \"\",\n        warehouseCode: data.warehouseCode || \"\",\n        itemList: [],\n      });\n      header_index = return_data.length - 1;\n    }\n    return_data[header_index].itemList.push({\n      qty: data.qty || 0,\n      areaSource: data.areaSource,\n      skuNumber: data.skuNumber,\n      ripeness: {\n        label: data.ripenessLevel || \"\",\n        value: data.ripenessLevel || 0,\n      },\n      expiryDate:\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n      expiryDateText: data.expiryDateCol,\n      grade: { label: data.newGrade, value: newGrade || data.skuUuid },\n      codeOutbound: {\n        label: data.outboundTypeCode || \"\",\n        value: data.outboundTypeCode || \"\",\n      },\n      note: data.reason || \"\",\n      areaName: data.areaName || \"\",\n      pack: data.inputPack || 0,\n      unitOfMeassures: data.uom || \"\",\n      warehouseCodeSource: data.warehouse || \"\",\n      warehouseCodeDestination: data.warehouseDestination || \"\",\n    });\n  });\n  return return_data;\n};\n\nconst setJobPost = (header, skuList, poGroup) => {\n  //insert PO to SKUList\n  skuList.map((skuListData, skuListIdx) => {\n    poGroup.map((poGroup, poGroupIndex) => {\n      if (\n        poGroup &&\n        poGroup.areaSource == skuListData.areaSource &&\n        poGroup.warehouseSource == skuListData.warehouseSource &&\n        poGroup.warehouseDestination == skuListData.warehouseDestination &&\n        poGroup.skuUuid == skuListData.skuUuid\n      ) {\n        skuList[skuListIdx][\"poList\"].push(poGroup);\n      }\n    });\n  });\n\n  //insert sku to Header\n  header.map((headerData, headerIdx) => {\n    skuList.map((skuListData, skuListDataIdx) => {\n      if (\n        poGroup &&\n        headerData.areaSource == skuListData.areaSource &&\n        headerData.warehouseSource == skuListData.warehouseSource &&\n        headerData.warehouseDestination == skuListData.warehouseDestination\n      ) {\n        header[headerIdx][\"list\"].push(skuListData);\n      }\n    });\n  });\n\n  return header;\n};\n\nconst setResult = (result) => {\n  let arrayResult = [];\n  let i = 1;\n  result.list.map((dataHeader, indexHeader) => {\n    dataHeader.poList.map((poHeader, indexPo) => {\n      poHeader.itemList.map((data, index) => { \n        let isStatus = \"Failed\";\n        if (data.isSuccess) {\n          isStatus = \"Success\";\n        }\n        arrayResult.push({\n          id: i,\n          uploadStatus: isStatus || \"\",\n          uploadStatusReason: data.message,\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\n          skuNumber: data.skuNumber || \"\",\n          ripenessLevel: data.ripeness?.label || \"\",\n          qty: data.qty || 0,\n          reason: data.note || \"\",\n          grade: poHeader.codeGrade || \"\",\n          areaName: data.areaName || \"\",\n          warehouse: data.warehouseCodeSource || \"\",\n          areaNameDestination: data.areaNameDestination || \"\",\n          warehouseDestination: data.warehouseCodeDestination || \"\",\n          expiryDateCol: data.expiryDateText || \"\",\n        });\n        i++;\n      });\n    });\n  });\n  return arrayResult;\n};\n\nexport const submit = async ({\n  csvData,\n  dispatch,\n  csvField,\n  setIsSubmitText,\n  setSubmitStatus,\n  setIsShowModal,\n  setMsg2,\n}) => {\n  console.log(csvData);\n  setIsSubmitText(\"Loading...\");\n\n  //set header\n  // let header = await setHeader(csvData);\n  // let warehouseNameFrom = csvData[0][\"warehouseName\"] || \"Warehouse\";\n  // let areaNameFrom = csvData[0][\"areaName\"] || \"Area\";\n  // let warehouseNameTo =\n  //   csvData[0][\"warehouseDestinationName\"] || \"Warehouse Destination\";\n\n  //get list sku\n  //let skuList = await getSKU(csvData);\n\n  //grouping PO\n  //let poGroup = await groupingPO(csvData, skuList);\n\n  //set JobPost\n  //let jobPost = await setJobPost(header, skuList, poGroup);\n\n  //submit\n  // let execute = await submitCsvStockTransfer({\n  //   dataCsv: jobPost,\n  //   setSubmitStatus,\n  //   dispatch,\n  //   transaction: \"stock-transfer\",\n  // });\n  setIsShowModal(false);\n  setIsSubmitText(\"Submit\");\n  setSubmitStatus(\"success\");\n\n  // if (execute?.isSuccess === true) {\n  //   setMsg2([\n  //     {\n  //       className: `h5 font-weight-bold`,\n  //       message: `PO Number: ${execute?.data?.poNumber}`,\n  //     },\n  //     {\n  //       className: `h5 green mt-4`,\n  //       message: `${warehouseNameFrom} (${areaNameFrom}) to ${warehouseNameTo} - ${\n  //         skuList?.length || 0\n  //       } SKU(s).`,\n  //     },\n  //   ]);\n    \n  // } else if (execute?.isSuccess === false && execute?.jobPost) {\n  //   //Data tidak ditemukan\n  //   setMsg2([\n  //     {\n  //       className: `h5 font-weight-bold`,\n  //       message: `Failed to proceed because we can't match some of data.`,\n  //     },\n  //     {\n  //       className: `h5 green mt-3`,\n  //       message: `Try to fix the error part and try again.`,\n  //     },\n  //   ]);\n  //   setSubmitStatus(\"noData\");\n\n  //   //set result\n  //   let result = await setResult(execute?.jobPost || []);\n  //   await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\n\n  //   //renew schema for result\n  //   let newSchema = [];\n  //   newSchema.push({\n  //     dataField: \"uploadStatus\",\n  //     text: \"Upload Status\",\n  //     type: \"string\",\n  //     sort: true,\n  //   });\n  //   csvField.map((data, index) => {\n  //     newSchema.push(data);\n  //   });\n  //   await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\n  // } else {\n  //   //API ERROR\n  //   setTimeout(() => {\n  //     console.log(execute)\n  //   }, 3000);\n\n  //   setMsg2((execute?.status ? `${execute?.status}  - ` : '')+ \"Failed to proceed.\");\n  //   setSubmitStatus(\"API\");\n  // }\n};\n","import { isInteger } from \"formik\";\n\nexport const next = ({\n  e,\n  state,\n  isCaptcha,\n  setIsValidated,\n  setIsType,\n  isType,\n  isValidated,\n  submit\n}) => {\n  const key = e.key; // const {key} = event; ES6+\n  let type = [...isType];\n\n  //if press enter\n  if (key === \"Enter\"){\n    if(isValidated){\n      submit();\n    }else{\n      return;\n    }\n  }\n\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\",\"Delete\"];\n  if (arr_tmp.includes(key)) {\n    return 0;\n  } else if (key === \"Backspace\") {\n    let type_ = [...isType];\n    let state_ = type_[state];\n    if (state_ == \"\" && state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\n      type_[state - 1] = \"\";\n      type[state - 1] = \"\";\n    } \n  } else if (key === \"ArrowLeft\") {\n    if (state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) - 1))\n        .setSelectionRange(-1, -1);\n\n      return 0;\n    }\n  } else if (key === \"ArrowRight\") {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) + 1))\n        .setSelectionRange(-1, -1);\n      return 0;\n    }\n  } else {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n    }\n  }\n\n  if (key === \"Backspace\") {\n    type[state] = \"\";\n  } else {\n    type[state] = key.toUpperCase();\n  }\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\n  let allowedChar = char.split(\"\");\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\n    setIsType(type);\n  } else {\n    return 0;\n  }\n\n  let stat = true;\n  isCaptcha.map((data, index) => {\n    // if (index == 0) {\n    //   return;\n    // }\n    if (!(type[index + 1] == isCaptcha[index])) {\n      stat = false;\n    } \n  });\n  setIsValidated(stat);\n};\n\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\n  if (module?.length) {\n    let newModule = [];\n    module.map((list) => {\n      list.poList.map((po) => {\n        po.itemList.map((item) => {\n          const { qty, grade } = item;\n          const _qty = isInteger(qty)\n            ? parseInt(qty)\n            : !qty\n              ? 0\n              : parseFloat(qty);\n          const _sku = noSkuChecking\n            ? list.skuName\n            : moduleName === \"waste\"\n              ? item.wasteType?.label\n                ? item.wasteType?.label\n                : list.skuName\n              : grade?.label;\n          const _toWaste =\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\" ||\n                item.wasteType?.label === \"Waste\"\n                ? true\n                : false\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\n                ? true\n                : false;\n          const _uom = noSkuChecking\n            ? list.unitOfMeassures\n            : grade?.uom === \"gram\"\n              ? \"kg\"\n              : grade?.uom;\n          let newSku = {\n            sku: _sku,\n            qty: _qty,\n            uom: _uom,\n            wqty: 0,\n            swqty: 0,\n          };\n          if (_toWaste) {\n            newSku.qty = 0;\n            newSku.sku = list.skuName;\n          }\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Waste\"\n              : grade?.label === \"Waste\"\n          )\n            newSku.wqty = _qty;\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\"\n              : grade?.label === \"Semi Waste\"\n          )\n            newSku.swqty = _qty;\n          const isExist = newModule.findIndex(\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\n          );\n\n          if (moduleName !== \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (grade?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\n            }\n          }\n\n          if (moduleName === \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (item.wasteType?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (item.wasteType?.label === \"Waste\")\n                newModule[isExist].wqty += _qty;\n            }\n          }\n        });\n      });\n    });\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\n    const i = newModule.findIndex((s) => s.sku === skuName);\n    newModule.forEach((sku) => {\n      if (i !== -1) {\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\n      }\n    });\n    return newModule;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { useSelector } from \"react-redux\";\nimport { next, skuListUpdateCheck } from \"./services.js\";\nimport { totalQty } from \"Page/StockEntry/GeneralServices/moduleServices\";\n\nconst ModalsConfirmation = ({\n  moduleEntry,\n  confirmation,\n  setConfirmation,\n  save,\n  submit,\n  isSuccess,\n  isLoading,\n  moveAll,\n  setAction,\n  moduleName,\n  noSkuChecking,\n  singleViewData,\n}) => {\n  const dimention = document.documentElement.clientHeight;\n  const height = dimention - 300;\n\n  let buttonName = \"Submit\";\n\n  if (confirmation.name === \"save\") buttonName = \"Save\";\n  useEffect(() => {\n    if (isSuccess) setConfirmation({ show: false, name: null });\n  }, [isSuccess]);\n  window.onkeydown = (e) =>\n    e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null;\n\n  useEffect(() => {\n    setAction(confirmation.name);\n  }, [confirmation]);\n\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry;\n\n  const areaDestinationName = module?.jobPost?.areaDestinationName;\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName;\n  const areaName = module?.jobPost?.areaName;\n\n  const skuListUpdate = skuListUpdateCheck(\n    module?.jobPost.list,\n    noSkuChecking,\n    moduleName\n  );\n  return (\n    <CRow\n      className={\"modalConfirmation \" + (confirmation.show ? null : \"d-none\")}\n    >\n      <CCol>\n        <CModal show={confirmation.show} closeOnBackdrop={false}>\n          <CModalHeader className=\"px-4 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">\n              Confirmation{\" \"}\n              <span>\n                <i className=\"em em-pray\"></i>\n              </span>\n            </CModalTitle>\n            <label\n              tabIndex=\"0\"\n              onKeyDown={(e) =>\n                e.keyCode === 13\n                  ? setConfirmation({ show: false, name: null })\n                  : false\n              }\n              onClick={() => setConfirmation({ show: false, name: null })}\n              className=\"sku-item iconU-modalClose\"\n            />\n          </CModalHeader>\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\n            <p className=\"text mb-2\">\n              <span>{`Are you sure want to ${\n                areaName == \"Waste\" ? \"update\" : \"send\"\n              } this Item `}</span>\n              <span\n                className={` ${areaDestinationName ? null : \"d-none\"}`}\n              >{` from`}</span>\n              <span\n                className={`green ${areaDestinationName ? null : \"d-none\"}`}\n              >{` ${areaName} `}</span>\n              <span>\n                {moduleName == \"outbound\"\n                  ? \"from\"\n                  : moduleName === \"repack\"\n                  ? \"\"\n                  : \"to\"}{\" \"}\n              </span>\n              <span\n                className={`green ${moduleName !== \"repack\" ? null : \"d-none\"}`}\n              >{` ${\n                moduleName === \"stockTransfer\"\n                  ? warehouseDestinationName\n                  : areaDestinationName\n                  ? areaDestinationName\n                  : areaName\n              } `}</span>\n            </p>\n            <p className=\"text\">\n              Please double check this list, this record will store to database.\n            </p>\n            <div\n              style={{\n                minHeight: height,\n                maxHeight: height,\n                overflow: \"auto\",\n                border: \"1px solid var(--lineGrey)\",\n              }}\n            >\n              <table>\n                <thead>\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Weight\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Semi Waste\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Waste\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {skuListUpdate?.map((data) => (\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                      <td style={{ maxWidth: \"160px\" }}>{data.sku}</td>\n                      <td\n                        className=\"text-right py-3\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        {`${totalQty(data?.qty)}`}\n                      </td>\n                      <td\n                        className=\"text-right text-nowrap\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        <span className=\"text-nowrap\">{`${totalQty(\n                          data?.swqty\n                        )} `}</span>\n                      </td>\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\n                        {`${totalQty(data?.wqty)}`}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? setConfirmation({ show: false, name: null })\n                    : false\n                }\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\n                onClick={() => setConfirmation({ show: false, name: null })}\n              >\n                Cancel\n              </CButton>\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? isLoading\n                      ? null\n                      : confirmation.name === \"save\"\n                      ? save()\n                      : submit()\n                    : false\n                }\n                className={`${\n                  isLoading ? \"bg-softGreen text\" : \"bg-green text-white\"\n                } no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\n                onClick={() =>\n                  isLoading\n                    ? null\n                    : confirmation.name === \"save\"\n                    ? save()\n                    : submit()\n                }\n              >\n                {isLoading ? \"Processing...\" : buttonName}\n              </CButton>{\" \"}\n            </div>\n          </CModalBody>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst ModalsCaptcha = ({\n  show = false,\n  setIsShowModal,\n  submit,\n  submitText = \"Submit\",\n}) => {\n  //random text\n  var text = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var charactersLength = characters.length;\n  var text_split = [];\n  for (var i = 0; i < 3; i++) {\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\n    text += r;\n    text_split.push(r);\n  }\n\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\n  const [isValidated, setIsValidated] = React.useState(false);\n  const [isType, setIsType] = React.useState([]);\n\n  //reset if visible = false\n  useEffect(() => {\n    if (show === true) {\n      document.getElementById(\"t1\").value = \"\";\n      document.getElementById(\"t2\").value = \"\";\n      document.getElementById(\"t3\").value = \"\";\n    }\n  }, [show]);\n\n  return (\n    <CRow className={show ? null : \"d-none\"}>\n      <CCol>\n        <CModal\n          show={show}\n          onClose={() => {\n            setIsShowModal(false);\n          }}\n          size=\"lg\"\n          style={{ height: \"400px\" }}\n        >\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\n              {selectorCsvFileName}?\n            </p>\n            <p className=\"text\">\n              Once uploaded this record will store to databases.\n            </p>\n            <p className=\"text mb-2\">\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\n            </p>\n\n            <div className=\"captcha-box\">\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 1,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t1\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[0]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 2,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t2\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input ml-0 mr-0\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[1]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 3,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t3\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[2]}\n              />\n            </div>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            <CButton\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\n              onClick={() => {\n                setIsShowModal(false);\n              }}\n            >\n              Cancel\n            </CButton>\n            <CButton\n              className={\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\n              }\n              onClick={() => {\n                submit();\n                setIsValidated(false);\n              }}\n            >\n              {submitText}\n            </CButton>{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport { ModalsConfirmation, ModalsCaptcha };\n","import React from \"react\";\nimport { CCard } from \"@coreui/react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"./bootstrapTable-style.scss\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport axios from \"axios\";\n\n//cell editable\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\n\nclass TableEditable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validateStatus: false,\n      validateResult: \"Please Wait...\",\n      globalData: this.props.globalData,\n      rowCount: 0,\n      keyy: 0,\n      triggerRender: 0\n    };  \n    this.validatePOSKUStockTransfer = this.validatePOSKUStockTransfer.bind(this);\n    this.validateSKUNumber = this.validateSKUNumber.bind(this);\n    \n  } \n  changeOutboundReason = (row) => {\n    setTimeout(() => {\n      let elem = document.getElementById(`row${row}-outboundReason`);\n      elem.classList.add(\"red\", \"tooltip-custom\");\n      elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\n    }, 300);\n  }\n\n  changeWarehouseUuid = (\n    value,\n    column,\n    columnName,\n    row,\n    warehouseCodeList,\n    warehouseUuidList,\n    warehouseNameList\n  ) => {\n    const { setCsvDataTmp, globalData } = this.props;\n    let tmpdata = globalData;\n    var index = tmpdata.findIndex((obj) => obj.id == row);\n    let i = warehouseCodeList.indexOf(value);\n    tmpdata[index][column] = warehouseUuidList[i];\n    tmpdata[index][columnName] = warehouseNameList[i];\n\n    console.clear() \n    setTimeout(async () => {\n      setCsvDataTmp(tmpdata);\n    }, 400);\n  };\n\n  validatePOSKU = async (id, row, idColumn) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;\n    if(transaction==\"additional_inbound\"){\n      return;\n    }\n\n    let tmpdata = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/stocktake/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        elem.classList.add(\"red\");\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          var index = tmpdata.findIndex((obj) => obj.id == row);\n          if (data[0] && data[0].isExist === true) {\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\n            tmpdata[index].wmsPoSkuCodeStatus = true;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = data[0].expiryDate;\n            tmpdata[index].inboundDate = data[0].inboundDate;\n            tmpdata[index].supplierName = data[0].supplierName;\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\n            tmpdata[index].uom = data[0].uom;\n            tmpdata[index].photos = data[0].photos;\n            elem.classList.remove(\"red\");\n            elem.classList.add(\"hiddenTooltip\");\n          } else {\n            tmpdata[index].wmsPoSkuCodeStatus = false;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = \"\";\n            tmpdata[index].inboundDate = \"\";\n            tmpdata[index].supplierName = \"\";\n            tmpdata[index].supplierUuid = \"\";\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\n          }\n          setCsvDataTmp(tmpdata);\n        });\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validatePOSKUStockTransfer = async (newValue, row, idColumn, key) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;  \n    let tmpdata = globalData;\n    \n    var index = tmpdata.findIndex((obj) => obj.id == row.id); \n    // console.log(tmpdata)\n    // console.log(row.id, row)\n    // console.log(index)\n\n    try {\n      const url = \"/stocktransfer/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      let payloadPO = [{\n        \"id\": row.id,\n        \"poSkuCode\": key==\"wmsPoSkuCode\" ? newValue : (row.poSkuCode?row.poSkuCode:\"\"),\n        \"skuNumber\": key==\"skuNumber\"? newValue?.skuNumber: row.skuNumber,\n        \"skuUuid\": key==\"skuNumber\"? newValue?.skuUuid:row.skuUuid,\n        \"warehouseSource\": row.warehouseSource,\n        \"areaSource\": row.areaSource,\n        \"weight\": key==\"qty\"?newValue:row.qty\n      }]; \n\n      setTimeout(async () => {\n        //setvalidate false\n        setIsValidate(false);\n\n        //elemen column\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        // elem.classList.remove(\"hiddenTooltip\");\n        // elem.classList.add(\"red\");  \n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: payloadPO },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          if (data[0]) {\n            if(data[0].isExist === true && data[0].isValid === true){\n              tmpdata[index]['rowStatus'] = true;\n              tmpdata[index]['rowReason'] = \"\";\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }else{\n              tmpdata[index]['rowStatus'] = false;\n              tmpdata[index]['rowReason'] = data[0]?.errorMessage;\n            }\n            tmpdata[index]['wmsPoSkuCode'] = data[0]?.wmsPoSkuCode ;\n            tmpdata[index]['wmsPoSkuCodeStatus'] = data[0]?.isExist && data[0]?.isValid;\n            tmpdata[index]['wmsPoSkuCodeReason'] = data[0]?.errorMessage;\n            tmpdata[index]['expiryDate'] = data[0]?.expiryDate;\n            tmpdata[index]['inboundDate'] = data[0]?.inboundDate;\n            tmpdata[index]['supplierName'] = data[0]?.supplierName;\n            tmpdata[index]['supplierUuid'] = data[0]?.supplierUuid;\n            tmpdata[index]['uom'] = data[0]?.uom;\n            tmpdata[index]['photos'] = data[0]?.photos;\n          } else {\n            tmpdata[index]['wmsPoSkuCodeStatus'] = false;\n            tmpdata[index]['wmsPoSkuCodeReason'] = response?.data?.message;\n            tmpdata[index]['expiryDate'] = \"\";\n            tmpdata[index]['inboundDate'] = \"\";\n            tmpdata[index]['supplierName'] = \"\";\n            tmpdata[index]['supplierUuid'] = \"\";\n            tmpdata[index]['rowStatus'] = false;\n            tmpdata[index]['rowReason'] = response?.data?.message;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = response?.data?.message;\n          } \n\n          if(key==\"skuNumber\"){ \n            tmpdata[index][\"skuNumber\"] = newValue.skuNumber;\n            tmpdata[index][\"skuNumberReason\"] = newValue.skuDescription;\n            tmpdata[index][\"skuNumberStatus\"] = true;\n            tmpdata[index][\"skuUuid\"] = newValue.skuUuid;\n          }\n          setCsvDataTmp(tmpdata); \n        }); \n        let tmpKey = this.state.keyy + 1; \n        this.setState({keyy: tmpKey}); \n      }, 500);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validateOutbountReason = (value, row, idColumn) => {\n    const { globalData } = this.props;\n    let tmp_data = globalData;\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\n      this.changeOutboundReason(row)\n    }\n  };\n\n  validateOutbountType = (value, row, idColumn) => {\n    const { globalData, setIsValidate } = this.props;\n    let tmp_data = globalData;\n    setIsValidate(false);\n    if (value.toUpperCase() !== \"LAINNYA\") {\n      setIsValidate(true);\n      return 0;\n    }\n\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (datax[\"outboundReason\"] == \"\") {\n      this.changeOutboundReason(row);\n    }\n  };\n\n  validateSKUNumber = async (id, row, idColumn, key, rowData = null) => {\n    const { globalData, setCsvDataTmp, setIsValidate,transaction } = this.props;\n    let tmp_data = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/oss/skuByNumbers\";\n      let elem = null;\n      let elemspan = null;\n      \n      // for validating stock transfer\n      let stats = false;\n      let newSkuData = {} \n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { skuList: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          let isSuccess = response.data.isSuccess;\n          var index = tmp_data.findIndex((obj) => obj.id == row);\n          if (isSuccess === true && data.length > 0) {\n            stats = true;\n            tmp_data[index][key] = data[0].skuNumber;\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\n            tmp_data[index][key + \"Status\"] = true;\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\n            newSkuData = {\n              skuUuid: data[0].id,\n              skuNumber: data[0].skuNumber,\n              skuDescription: data[0].skuDescription,\n              photo: data[0].photo\n            }\n\n            //custom\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = data[0].id;\n              tmp_data[index].photo = data[0].imageMd;\n            }\n\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = data[0].uom;\n            }\n            \n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = data[0].uom;\n            }\n\n            \n            if(transaction!==\"stockTransfer\"){\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }\n\n          } else {\n            stats = false;\n            tmp_data[index][key] = id;\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\n            tmp_data[index][key + \"Status\"] = false;\n            tmp_data[index][key + \"Uuid\"] = null;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"SKU Number Not Found\";\n\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = \"\";\n              tmp_data[index].photo = \"\";\n            }\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = null;\n            }\n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = \"\";\n            }\n          } \n        });\n\n        if(transaction==\"stockTransfer\" && stats === true){ \n          this.validatePOSKUStockTransfer(newSkuData, rowData, idColumn, 'skuNumber')\n        }else{\n          setCsvDataTmp(tmp_data);\n        }\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  render() {\n    const {\n      columns,\n      hiddenRows,\n      tableClass,\n      warehouseArea,\n      outboundType,\n      setCheckingCsv, \n      editable = true,\n      warehousesData = [],\n      transaction,\n      globalData\n    } = this.props;\n    let { validateStatus,  keyy } = this.state;\n    \n    //wh\n    let warehouseCodeList = [];\n    let warehouseUuidList = [];\n    let warehouseNameList = [];\n    if (warehousesData) {\n      let tmp = warehousesData?.data?.map((d) => {\n        warehouseCodeList.push(d.code);\n        warehouseUuidList.push(d.id);\n        warehouseNameList.push(d.name);\n      });\n    }\n\n    //wh area\n    let wh_area_label =\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\n    let wh_outboundtype_label = !outboundType\n      ? []\n      : outboundType.map((data) => data.label.toUpperCase());\n    let wh_outboundtype_value = !outboundType\n      ? []\n      : outboundType.map((data) => data.value);\n    const newFormat = columns.map((data, index) => {\n      data.validator = (newValue, row, column, done) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let reason = null;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n\n        let stockTransferColumnCheck = ['wmsPoSkuCode', 'qty']\n        if (stockTransferColumnCheck.includes(key) && transaction==\"stockTransfer\") {\n          this.validatePOSKUStockTransfer(newValue, row, idColumn, key);\n          stat = true;\n        }else if(key == \"wmsPoSkuCode\" ){\n          this.validatePOSKU(newValue, row.id, idColumn, key);\n          stat = true; \n        }\n\n        if (key == \"skuNumber\") {\n          this.validateSKUNumber(newValue, row.id, idColumn, key, row);\n          stat = true;\n        }\n\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type not found\";\n            checkType = false;\n            stat = false;\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        } else if (key == \"newGrade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            //if not waste or semi waste\n            if (parseInt(newValue)) {\n              //if number\n              stat = true;\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\n            } else if (newValue == \"\") {\n              row[\"newGradeUuid\"] = null;\n              row[\"newGradeUom\"] = null;\n              stat = true;\n            } else {\n              //if not number => undefined\n              reason = \"Grade Undefined\";\n              checkType = false;\n              stat = false;\n            }\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        }\n\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Outbound Type Not Found`;\n          } else {\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\n            stat = true;\n            this.validateOutbountType(newValue, row.id, idColumn);\n          }\n        }\n\n        if (key == \"outboundReason\") {\n          this.validateOutbountReason(newValue, row.id, idColumn);\n        }\n\n        if (key == \"warehouse\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseUuid\",\n              \"warehouseName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          }\n        }\n        if (key == \"warehouseDestination\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseDestinationUuid\",\n              \"warehouseDestinationName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          } \n        }\n\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Warehouse Area Not Found`;\n          } else {\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\n            if (key == \"areaNameDestination\") {\n              row[\"areaDestination\"] = wh_area_value[i];\n            } else {\n              row[\"areaSource\"] = wh_area_value[i];\n            }\n            stat = true;\n          }\n        }\n\n        if (key == \"newPack\") {\n          let checkTypenewPack = isNaN(newValue) ? false : true;\n          if (!checkTypenewPack) {\n            stat = false;\n            reason = `Pack Should be a number`;\n          } else {\n            stat = true;\n          }\n        } \n        \n\n        let checkType = null;\n        if (data.type == \"number\") {\n          checkType = isNaN(newValue) ? false : true;\n        } else {\n          checkType = true;\n        }\n        if (checkType === false) {\n          reason = `${data.text} Should be a ${data.type}`;\n        } \n\n        \n        if (key == \"wmsPoSkuCode\" && transaction == \"stockTransfer\") {\n          if(isNaN(newValue)){\n            checkType = false;\n            reason = `${data.text} Should be a number`;\n            stat = false;\n          } \n        } \n\n        //some field can null\n        let canNull = [\n          \"grade\",\n          \"outboundReason\",\n          \"ripenessLevel\",\n          \"newRipeness\",\n          \"reason\",\n          \"expiryDate\"\n        ]; \n\n        if (canNull.includes(key) && newValue === \"\") {\n          reason = \"\";\n          checkType = true;\n          stat = true;\n        } else if (key == \"grade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type Not Found\";\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //check ripenesslevel\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\n          let allowedRipenessLevel = [0, 1, 2, 3];\n          if (\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\n            newValue == \"\"\n          ) {\n            checkType = true;\n            stat = true;\n            reason = \"\";\n            if (newValue == \"\") {\n              newValue = \"\";\n            }\n          } else {\n            checkType = false;\n            stat = false;\n            reason = \"Undefined Ripeness Level\";\n          }\n        }\n\n        //check date\n        if (data.type == \"date_indo\") {\n          //checking date\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\n          if (newValue.match(regex_date)) {\n            checkType = true;\n            stat = true;\n          } else if (newValue == \"\") {\n            checkType = true;\n            stat = true;\n          } else {\n            reason = `Date format must be 'dd-mm-yyyy'`;\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //set notif\n        row[keyReason] = reason;\n        if (stat && checkType) {\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\n          if (!specialKey.includes(key)) {\n            //some key have their own checking, so if not in array do checking error\n            row[keyStatus] = true;\n            setCheckingCsv();\n          }\n        } \n         \n        return {\n          valid: stat && checkType ? true : false,\n          message: reason,\n        };\n      };\n\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n        let txt = row[keyReason];\n        \n        // if status column = false\n        // that mean there's error or not valid data in some column\n        if (row[keyStatus] === false) {\n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {txt}\n              </span>\n            </div>\n          );\n        }\n\n        // if global row status = false\n        // that mean there's wmsposkucode validation error, and makes 1 line become red colour\n        // for now is only for stock transfer  \n        if ( transaction==\"stockTransfer\" &&  row['rowStatus'] === false) { \n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {row['rowReason']}\n              </span>\n            </div>\n          );\n        }\n\n        \n        // if status column = true\n        // No problem \n        return (\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\n            {cell}\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\n              {txt}\n            </span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n    console.clear();  \n    console.log(globalData)\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={globalData}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          cellEdit={\n            editable === true\n              ? cellEditFactory({\n                  mode: \"click\",\n                  blurToSave: true,\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\n                })\n              : null\n          }\n          bordered={false}\n          hiddenRows={hiddenRows}\n          key={keyy}\n        />\n      </CCard>\n    );\n  }\n}\n\nclass TableResult extends React.Component {\n  render() {\n    const { columns, tableClass, data } = this.props;\n\n    const newFormat = columns.map((data, index) => {\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\n          return (\n            <div className=\"tooltip-custom red\">\n              {cell}\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\n            </div>\n          );\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\n          return (\n            <div className=\"green\">\n              {cell}\n              <span></span>\n            </div>\n          );\n        }\n\n        return (\n          <div>\n            {cell}\n            <span></span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={data}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          bordered={false}\n        />\n      </CCard>\n    );\n  }\n}\n\nexport { TableResult, TableEditable };\n"],"sourceRoot":""}