{"version":3,"sources":["Page/StockEntry/StockTake/Upload/Review.jsx","Page/StockEntry/StockTake/Upload/services.js","Component/Modal/PopUp/index.jsx","Component/Modal/PopUp/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/BootstrapTable/index.jsx"],"names":["withRouter","props","dispatch","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","csvData","selectorCsvField","csvField","selectorWarehouseArea","warehouseAreaCsv","selectorStatus","status","isShowModal","setIsShowModal","React","useState","isHiddenRows","setIsHiddenRows","isShowErrorOnly","setIsShowErrorOnly","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","setCheckingCsv","submitStatus","setSubmitStatus","isSubmitText","setIsSubmitText","title","setTitle","msg1","setMsg1","msg2","setMsg2","cancelButtonTitle","setCancelButtonTitle","actionButtonTitle","setActionButtonTitle","actionButtonClass","setActionButtonClass","colourTitle","setColourTitle","useEffect","_ref4","undefined","stats","map","data","index","dataField","indexField","checking_error","message","history","push","setCsvDataTmp","param","_ref3","type","STOK_TAKE_UPLOAD_JSON","setCsvData","console","log","createElement","className","TableEditable","globalData","columns","tableClass","hiddenRows","warehouseArea","style","lineHeight","length","onClick","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","cancelButtonClass","actionButtonEvent","ModalsCaptcha","submit","async","_ref5","clear","text","sort","submitText","show","_ref","refresh","icon","setIsSuccess","code","setShow","window","onkeydown","e","keyCode","CRow","concat","CCol","CModal","closeOnBackdrop","onClose","success","name","STATUS","size","minHeight","bodyOpenClassName","CModalHeader","CModalTitle","CModalBody","CModalFooter","CButton","_ref2","location","reload","refreshPage","parentOncCloseFunction","next","isCaptcha","setIsValidated","setIsType","isType","isValidated","key","includes","type_","document","getElementById","parseInt","focus","value","setSelectionRange","toUpperCase","split","stat","ModalsConfirmation","_module$jobPost","_module$jobPost2","_module$jobPost3","moduleEntry","confirmation","setConfirmation","save","isSuccess","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","module","areaDestinationName","jobPost","warehouseDestinationName","areaName","skuListUpdate","skuListUpdateCheck","newModule","list","poList","po","itemList","item","_item$wasteType","_item$wasteType2","_item$wasteType3","_item$wasteType4","_item$wasteType5","_item$wasteType6","qty","grade","_qty","isInteger","parseFloat","_sku","skuName","wasteType","label","_toWaste","_uom","unitOfMeassures","uom","newSku","sku","wqty","swqty","isExist","findIndex","_item$wasteType7","_item$wasteType8","i","s","forEach","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","characters","charactersLength","text_split","r","charAt","Math","floor","random","setIsCaptcha","isCaptchaText","setIsCaptchaText","autocomplete","onKeyUp","id","textTransform","maxLength","placeholder","Component","constructor","_this","super","this","changeOutboundReason","row","setTimeout","elem","classList","add","innerHTML","changeWarehouseUuid","column","columnName","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","obj","indexOf","validatePOSKU","idColumn","transaction","url","elemspan","axios","method","then","response","_response$data","wmsPoSkuCode","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","expiryDate","inboundDate","supplierName","supplierUuid","photos","remove","error","validatePOSKUStockTransfer","newValue","payloadPO","poSkuCode","skuNumber","skuUuid","warehouseSource","areaSource","_response$data2","_data$2","_data$3","_data$4","_data$5","_data$6","_data$7","_data$8","_data$9","_data$10","_data$11","_data$","isValid","errorMessage","_response$data3","_response$data4","_response$data5","skuDescription","tmpKey","keyy","setState","validateOutbountReason","tmp_data","datax","validateOutbountType","validateSKUNumber","rowData","arguments","newSkuData","skuList","_response$data6","photo","imageMd","newGradeUom","validateStatus","validateResult","rowCount","triggerRender","bind","render","outboundType","editable","warehousesData","_warehousesData$data","d","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","done","keyStatus","keyReason","reason","arr_grade","checkType","isNaN","regex_date","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","CCard","BootstrapTable","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered","TableResult"],"mappings":"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","file":"static/js/50.83219894.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { TableEditable } from \"Component/BootstrapTable\";\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\nimport \"../index.scss\";\nimport {\n  showErrorsOnly,\n  deleteErrorsField,\n  setCsvData,\n  submit,\n  checking_error\n} from \"./services.js\";\nimport PopUp from \"Component/Modal/PopUp\";\n\nconst Upload = (props) => {\n  const dispatch = useDispatch();\n\n  //selector\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const selectorCsvData = useSelector((state) => state.csvData);\n  const selectorCsvField = useSelector((state) => state.csvField);\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\n  const selectorStatus = useSelector((state) => state.status);\n\n  //state\n  const [isShowModal, setIsShowModal] = React.useState(false);\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\n  const [isValidate, setIsValidate] = React.useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\n  const [submitStatus, setSubmitStatus] = React.useState(false);\n\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\n  const [title, setTitle] = React.useState(null);\n  const [msg1, setMsg1] = React.useState(null);\n  const [msg2, setMsg2] = React.useState(null);\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\n  const [colourTitle, setColourTitle] = React.useState(null);\n\n  // console.log(selectorWarehouseArea);\n  // console.log(selectorCsvField);\n  // console.log(selectorCsvData);\n\n  useEffect(() => {\n    checking_error({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      setIsValidate,\n      setCheckingCsv\n    });\n  }, [checkingCsv]);\n\n  useEffect(() => { }, [selectorCsvData]);\n\n  useEffect(() => {\n    if (submitStatus === 'success') {\n      setActionButtonTitle('Done');\n      setCancelButtonTitle('');\n      setMsg1(selectorCsvFileName + ' upload successfull. ');\n      setMsg2('Would you import another file?');\n      setTitle('Success');\n      setActionButtonClass('bg-green background ml-0');\n      setColourTitle('green');\n      setModalShow(true);\n    } else if (submitStatus === 'failed') {\n      setActionButtonTitle('Retry');\n      setCancelButtonTitle('Cancel');\n      setMsg1(selectorStatus?.message);\n      setMsg2('do you want to retry?');\n      setTitle('Failed!');\n      setActionButtonClass('bg-red background ml-0');\n      setColourTitle('red');\n      setModalShow(true);\n    }\n  }, [submitStatus]);\n\n  useEffect(() => {\n    if (submitStatus === true) {\n      props.history.push(\"/inventory-entry/stock-take/CSV-upload/result\");\n    }\n  }, [submitStatus]);\n\n  if (selectorCsvData === undefined || selectorCsvData === null) {\n    props.history.push(\"/inventory-entry/stock-take/CSV-upload\");\n    return 0;\n  }\n\n  const setCsvDataTmp = (param) => {\n    setCsvData({ param, dispatch, setCheckingCsv });\n  };\n\n  console.log(selectorCsvData)\n\n  return (\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\n      <TableEditable\n        globalData={selectorCsvData} //Required\n        columns={selectorCsvField} //Required\n        tableClass=\"reviewTable\"\n        hiddenRows={isHiddenRows}\n        warehouseArea={selectorWarehouseArea}\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\n        setIsValidate={(param) => setIsValidate(param)}\n        dispatch={dispatch}\n        setCheckingCsv={setCheckingCsv}\n      />\n\n      <div className=\"row pt-3\">\n        <div className=\"col-4\">\n          \n        </div>\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\n          Review your imported file: {selectorCsvFileName} (\n          {selectorCsvData.length || 0} Lines)\n        </div>\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\n            onClick={() => props.history.goBack()}\n          >\n            Discard\n          </button>\n\n          <button\n            type=\"button\"\n            class={\n              \"btn px-5 mr-3 text-white no-shadow float-right bg-green\"\n            }\n            onClick={() => setIsShowModal(!isShowModal)}\n          >\n            Submit\n          </button>\n        </div>\n      </div>\n\n      <PopUp\n        status={selectorStatus}\n        onCloseFunction={() => {\n          setModalShow(false);\n          setSubmitStatus(false)\n        }}\n        statusDisplay={modalShow}\n        title={title}\n        cancelButtonTitle={cancelButtonTitle}\n        actionButtonTitle={actionButtonTitle}\n        colorText={colourTitle}\n        refreshOnCancel={false}\n        msg1={msg1}\n        msg2={msg2}\n        cancelButtonClass={null}\n        actionButtonClass={actionButtonClass + \" ml-0\"}\n        actionButtonEvent={() => props.history.push(\"/inventory-entry/stock-take/CSV-upload\")}\n      />\n      <ModalsCaptcha\n        submit={() =>\n          submit({\n            dispatch,\n            csvData: selectorCsvData,\n            setIsShowModal,\n            setIsSubmitText,\n            setSubmitStatus,\n            csvField: selectorCsvField,\n          })\n        }\n        submitText={isSubmitText}\n        show={isShowModal}\n        setIsShowModal={setIsShowModal}\n      />\n    </div>\n  );\n};\n\nexport default withRouter(Upload);\n","//other\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\nimport { submitCsv } from \"apiServices\";\nimport moment from \"moment\";\n\nexport const showErrorsOnly = ({\n  csvData,\n  csvField,\n  isShowErrorOnly,\n  setIsShowErrorOnly,\n  setIsHiddenRows,\n  setCheckingCsv,\n}) => {\n  // ;\n  let tmp_arr_false = [];\n  let tmp_arr_true = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    let i = index + 1;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n\n    if (stat === false) {\n      if (!tmp_arr_false.includes(i)) {\n        tmp_arr_false.push(i);\n      }\n    } else {\n      if (!tmp_arr_true.includes(i)) {\n        tmp_arr_true.push(i);\n      }\n    }\n  });\n\n  //return array\n  let ret = [];\n  if (isShowErrorOnly === true) {\n    //true = delete all row\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\n    if (ret.length == csvData.length) {\n      return 0;\n    }\n  } else {\n    ret = [];\n  }\n  setIsHiddenRows(ret);\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\n  setCheckingCsv(true);\n};\n\nexport const deleteErrorsField = ({\n  csvData,\n  csvField,\n  dispatch,\n  setCheckingCsv,\n}) => {\n  let new_arr = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n    if (stat === true) {\n      new_arr.push(data);\n    }\n  });\n\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\n  setCheckingCsv(true);\n};\n\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\n  setCheckingCsv(true);\n};\n\nexport const checking_error = ({\n  csvData,\n  csvField,\n  setIsValidate,\n  setCheckingCsv,\n}) => {\n  if (csvData === undefined) {\n    return 0;\n  }\n  let stats = true;\n  csvData.map((data, index) => {\n    csvField.map((dataField, indexField) => {\n      let status = data[dataField.dataField + \"Status\"];\n      if (status === false) {\n        stats = false;\n      }\n    });\n  });\n  if (stats === false) {\n    setIsValidate(false);\n  } else {\n    setIsValidate(true);\n  }\n  setCheckingCsv(false);\n};\n\nconst setHeader = (csvData) => {\n  //get time - created at\n  let time = new Date().getTime();\n  let d = new Date(time);\n  let n = d.getMilliseconds();\n  let list_area = [];\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    //in outbound csv upload only check area source\n    if (!list_area.includes(data.areaSource)) {\n      return_data.push({\n        id: index,\n        warehouseSource: warehouse_source,\n        warehouseDestination: warehouse_source,\n        areaSource: data.areaSource,\n        areaDestination: data.areaSource,\n        list: [],\n        createdAt: n,\n      });\n      list_area.push(data.areaSource);\n    }\n  });\n  return return_data;\n};\n\nconst getSKU = (csvData) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.skuUuid == data.skuUuid &&\n        header.warehouseSource == data.warehouseSource &&\n        header.areaSource == data.areaSource\n      ) {\n        available = true;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        warehouseSource: warehouse_source,\n        areaSource: data.areaSource,\n        skuUuid: data.skuUuid,\n        skuNumber: data.skuNumber,\n        unitOfMeassures: data.uom,\n        photo: data.photos,\n        poList: [],\n      });\n    }\n  });\n  return return_data;\n};\n\nconst checkGrade = (value) => {\n  if (!value) {\n    return;\n  }\n  if (value.toUpperCase() == \"SEMI WASTE\") {\n    return \"semi_waste\";\n  } else if (value.toUpperCase() == \"WASTE\") {\n    return \"waste\";\n  } else {\n    return null;\n  }\n};\n\nconst groupingPO = (csvData, skuList) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    let header_index = \"\";\n\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.areaSource == data.areaSource &&\n        header.warehouseSource == data.warehouseSource &&\n        header.skuUuid == data.skuUuid &&\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\n        header.expiryDate == data.expiryDate\n      ) {\n        available = true;\n        header_index = idx;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        skuUuid: data.skuUuid || \"\",\n        areaSource: data.areaSource || \"\",\n        warehouseSource: warehouse_source || \"\",\n        inboundDate: data.inboundDate || \"\",\n        supplierId: data.supplierUuid || \"\",\n        supplierName: data.supplierName || \"\",\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\n        expiryDate:\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n        codeGrade: data.skuUuid || \"\",\n        itemList: [],\n      });\n      header_index = return_data.length - 1;\n    }\n\n    //check ripeness\n    let newRipeness = data.newRipeness;\n    if (data.newRipeness == \"\") {\n      newRipeness = data.ripenessLevel || 0;\n    }\n\n    //check grade\n    let newGrade = checkGrade(data.newGrade);\n    if (newGrade === null) {\n      newGrade = data.newGradeUuid;\n    }\n\n    return_data[header_index].itemList.push({\n      qty: data.qty || 0,\n      areaSource: data.areaSource,\n      expiryDateText: data.expiryDateCol,\n      expiryDate:\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n      skuNumber: data.skuNumber,\n      wmsPoSkuCode: data.wmsPoSkuCode,\n      ripeness: { label: data.newRipeness || \"\", value: newRipeness || 0 },\n      grade: { label: data.newGrade || \"\", value: newGrade || data.skuUuid },\n      areaName: data.areaName || \"\",\n    });\n  });\n  return return_data;\n};\n\nconst setJobPost = (header, skuList, poGroup) => {\n  //insert PO to SKUList\n  skuList.map((skuListData, skuListIdx) => {\n    poGroup.map((poGroup, poGroupIndex) => {\n      if (\n        poGroup &&\n        poGroup.areaSource == skuListData.areaSource &&\n        poGroup.warehouseSource == skuListData.warehouseSource &&\n        poGroup.skuUuid == skuListData.skuUuid\n      ) {\n        skuList[skuListIdx][\"poList\"].push(poGroup);\n      }\n    });\n  });\n\n  //insert sku to Header\n  header.map((headerData, headerIdx) => {\n    skuList.map((skuListData, skuListDataIdx) => {\n      if (\n        poGroup &&\n        headerData.areaSource == skuListData.areaSource &&\n        headerData.warehouseSource == skuListData.warehouseSource\n      ) {\n        header[headerIdx][\"list\"].push(skuListData);\n      }\n    });\n  });\n\n  return header;\n};\n\nconst setResult = (result) => {\n  let arrayResult = [];\n  let i = 1;\n  result.data.list.map((dataHeader, indexHeader) => {\n    dataHeader.poList.map((poHeader, indexPo) => {\n      let poSkuCode = poHeader.wmsPoSkuCode;\n      let grade = poHeader.codeGrade;\n      poHeader.itemList.map((data, index) => {\n        let isStatus = \"Failed\";\n        if (data.isSuccess) {\n          isStatus = \"Success\";\n        }\n        arrayResult.push({\n          id: i,\n          uploadStatus: isStatus || \"\",\n          uploadStatusReason: data.message,\n          wmsPoSkuCode: poSkuCode || \"\",\n          skuNumber: data.skuNumber || \"\",\n          expiryDateCol: data.expiryDateText || \"\",\n          qty: data.qty || 0,\n          grade: grade || \"\",\n          newGrade: data.grade.label || \"\",\n          areaName: data.areaName || \"\",\n          newRipeness: data.ripeness.label || \"\",\n        });\n        i++;\n      });\n    });\n  });\n  return arrayResult;\n};\n\nexport const submit = async ({\n  csvData,\n  csvField,\n  dispatch,\n  selectorStatus,\n  setIsShowModal,\n  setIsSubmitText,\n  setSubmitStatus,\n}) => {\n  setIsSubmitText(\"Loading...\");\n  console.clear();\n\n  //set header\n  //let header = await setHeader(csvData);\n\n  //get list sku\n  //let skuList = await getSKU(csvData);\n\n  //grouping PO\n  //let poGroup = await groupingPO(csvData, skuList);\n\n  //set JobPost\n  //let jobPost = await setJobPost(header, skuList, poGroup);\n\n  //submit\n  // let execute = await submitCsv({\n  //   dataCsv: jobPost,\n  //   setSubmitStatus,\n  //   dispatch,\n  //   transaction: \"stockTake\",\n  // });\n  // if (execute == \"error\") {\n  //   return 0;\n  // }\n\n  //set result\n // let result = await setResult(execute);\n  //await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\n\n  //renew schema for result\n  let newSchema = [];\n  newSchema.push({\n    dataField: \"uploadStatus\",\n    text: \"Upload Status\",\n    type: \"string\",\n    sort: true,\n  });\n  // csvField.map((data, index) => {\n  //   newSchema.push(data);\n  // });\n  // await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\n\n  setIsShowModal(false);\n  setIsSubmitText(\"Submit\");\n  setSubmitStatus(\"success\");\n};\n\nexport const submit_old = async ({\n  csvData,\n  csvField,\n  dispatch,\n  setIsShowModal,\n  setIsSubmitText,\n  setSubmitStatus,\n}) => {\n  setIsSubmitText(\"Loading...\");\n  let jobHeader = [];\n\n  //0 get time\n  let time = new Date().getTime();\n  let d = new Date(time);\n  let n = d.getMilliseconds();\n\n  //1. set header\n  jobHeader = [\n    {\n      jobPost: {\n        id: 0,\n        warehouseSource: csvData[0].warehouseSource || \"\",\n        warehouseDestination: csvData[0].warehouseSource || \"\",\n        areaSource: csvData[0].areaSource || \"\",\n        areaDestination: csvData[0].areaSource || \"\",\n        list: null,\n      },\n    },\n  ];\n\n  //2. get sku\n  let sku_uuid_array = [];\n\n  let sku_data = [];\n  csvData.map((data, index) => {\n    if (!sku_uuid_array.includes(data.skuUuid)) {\n      sku_uuid_array.push(data.skuUuid);\n      sku_data.push({\n        skuNumber: data.skuNumber,\n        skuUuid: data.skuUuid,\n        uom: data.uom,\n        photo: data.photo,\n      });\n    }\n  });\n\n  //3. get PO per sku\n  let po_array = [];\n  sku_data.forEach((data_sku, index_sku) => {\n    if (data_sku === null || data_sku === undefined || data_sku === \"\") {\n      return false;\n    }\n\n    let tmp_po = {};\n    tmp_po.skuUuid = data_sku.skuUuid;\n    tmp_po.skuNumber = data_sku.skuNumber;\n    tmp_po.unitOfMeassures = data_sku.uom;\n    tmp_po.photo = data_sku.photo;\n    tmp_po.poList = [];\n    csvData.map((data, index) => {\n      if (data.skuNumber !== data_sku.skuNumber) {\n        return false;\n      }\n\n      let tmp_po_array = {};\n      tmp_po_array.wmsPoSkuCode = data.wmsPoSkuCode || \"\";\n      tmp_po_array.supplierUuid = data.supplierUuid || \"\";\n      tmp_po_array.supplierName = data.supplierName || \"\";\n      tmp_po_array.inboundDate = data.inboundDate || 0;\n      tmp_po_array.expiryDate = data.expiryDateCol || 0;\n      tmp_po_array.skuUuid = data.skuUuid;\n\n      //grade\n      tmp_po_array.gradeLabel = data.newGrade;\n      if (data.newGrade.toUpperCase() == \"WASTE\") {\n        tmp_po_array.grade = \"waste\";\n        tmp_po_array.newUom = data_sku.uom;\n      } else if (data.newGrade.toUpperCase() == \"SEMI WASTE\") {\n        tmp_po_array.grade = \"semi_waste\";\n        tmp_po_array.newUom = data_sku.uom;\n      } else {\n        tmp_po_array.grade = data.newGradeUuid || data_sku.skuUuid; //if grade null then grade =s kuUuid\n        tmp_po_array.newUom = data.newGradeUom || data_sku.uom; //if grade null then grade =s kuUuid\n      }\n\n      tmp_po_array.qty = data.qty || 0;\n      tmp_po_array.ripeness = data.ripenessLevel || 0;\n      tmp_po_array.newRipeness = data.newRipeness || \"\";\n      tmp_po_array.areaName = data.areaName || \"\";\n      tmp_po_array.skuNumber = data.skuNumber || \"\";\n      tmp_po_array.warehouseCode = data.warehouseCode || \"\";\n      tmp_po_array.expiryDate = data.expiryDateCol || \"\";\n      tmp_po.poList.push(tmp_po_array);\n    });\n    po_array.push(tmp_po);\n  });\n\n  //merapikan  po_array\n  let po_array_fix = [];\n  po_array.forEach((data, index) => {\n    let tmp = {};\n    let po_list = [];\n    let header_po = [];\n    data.poList.map((data_po, index_po) => {\n      let newRipeness = \"\";\n\n      //check if header already set or not\n      let header_available = false;\n      let header_index = null;\n      header_po.forEach((header, idx) => {\n        if (\n          header &&\n          header.ripenessLevel == data_po.ripeness &&\n          header.wmsPoSkuCode == data_po.wmsPoSkuCode &&\n          header.expiryDate == data_po.expiryDate\n        ) {\n          header_available = true;\n          header_index = idx;\n        }\n      });\n\n      //if header not available then set\n      if (header_available === false) {\n        header_po.push({\n          ripenessLevel: data_po.ripeness,\n          wmsPoSkuCode: data_po.wmsPoSkuCode,\n          expiryDate: data_po.expiryDate,\n        });\n        header_index = header_po.length - 1;\n\n        let tmp_po_array = {};\n        tmp_po_array.wmsPoSkuCode = data_po.wmsPoSkuCode || \"\";\n        tmp_po_array.supplierId = data_po.supplierUuid || \"\";\n        tmp_po_array.supplierName = data_po.supplierName || \"\";\n        tmp_po_array.codeGrade = data_po.skuUuid || \"\";\n        tmp_po_array.ripenessLevel = data_po.ripeness || 0;\n\n        //date\n        tmp_po_array.inboundDate = data_po.inboundDate || 0;\n        tmp_po_array.expiryDate =\n          moment(data_po.expiryDate, \"DD-MM-YYYY\").toDate().getTime() +\n            25200000 || \"\";\n        tmp_po_array.itemList = [];\n        po_list.push(tmp_po_array);\n      }\n      //end check header\n\n      //new sku ripeness\n      //if new ripeness == null then new ripeness=ripenessLevel\n      if (data_po.newRipeness == \"\") {\n        newRipeness = data_po.ripeness;\n      } else {\n        newRipeness = data_po.newRipeness;\n      }\n\n      let tmp_itemlist = {};\n      tmp_itemlist.grade = { label: data_po.gradeLabel, value: data_po.grade };\n      tmp_itemlist.ripeness = {\n        label: data_po.newRipeness,\n        value: newRipeness,\n      };\n      tmp_itemlist.qty = data_po.qty || 0;\n      tmp_itemlist.pack = data_po.pack || 0;\n      tmp_itemlist.uom = data_po.newUom || \"\";\n      tmp_itemlist.areaName = data_po.areaName || \"\";\n      tmp_itemlist.skuNumber = data_po.skuNumber || \"\";\n      tmp_itemlist.warehouseCode = data_po.warehouseCode || \"\";\n      tmp_itemlist.expiryDate = data_po.expiryDate || \"\";\n      po_list[header_index].itemList.push(tmp_itemlist);\n    });\n    tmp.skuUuid = data.skuUuid;\n    tmp.skuNumber = data.skuNumber;\n    tmp.unitOfMeassures = data.unitOfMeassures;\n    tmp.photo = data.photo;\n    tmp.poList = po_list;\n    po_array_fix.push(tmp);\n  });\n  //final\n  jobHeader[0].jobPost.list = po_array_fix;\n  let ret = await submitCsv({\n    dataCsv: jobHeader,\n    setSubmitStatus,\n    dispatch,\n    transaction: \"stockTake\",\n  });\n  setIsShowModal(false);\n  setIsSubmitText(\"Submit\");\n  if (ret == \"error\") {\n    return 0;\n  }\n\n  //set dispatch result\n  let arrayResult = [];\n  let i = 1;\n  await ret.jobPost.list.map((dataHeader, indexHeader) => {\n    dataHeader.poList.map((poHeader, indexPo) => {\n      let poSkuCode = poHeader.wmsPoSkuCode;\n      let ripenessLevel = poHeader.ripenessLevel;\n      poHeader.itemList.map((data, index) => {\n        let isStatus = \"Failed\";\n        if (data.isSuccess) {\n          isStatus = \"Success\";\n        }\n\n        arrayResult.push({\n          id: i,\n          warehouse: data.warehouseCode || \"\",\n          areaName: data.areaName || \"\",\n          wmsPoSkuCode: poSkuCode || \"\",\n          newGrade: data.grade.label || \"\",\n          ripeness: ripenessLevel,\n          newRipeness: data.ripeness.label || \"\",\n          skuNumber: data.skuNumber || \"\",\n          expiryDate: data.expiryDate || \"\",\n          uploadStatusReason: data.message,\n          uploadStatusErrorCode: data.errorCode,\n          uploadStatus: isStatus,\n          qty: data.qty,\n        });\n        i++;\n      });\n    });\n  });\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: arrayResult });\n\n  //renew schema\n  let newSchema = [];\n  csvField.map((data, index) => {\n    if (index == 1) {\n      newSchema.push({\n        dataField: \"uploadStatus\",\n        text: \"Upload Status\",\n        type: \"string\",\n        sort: true,\n      });\n    } else {\n      newSchema.push(data);\n    }\n  });\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\n  setSubmitStatus(true);\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { onClose, refreshPage } from \"./services.js\";\nimport { useDispatch } from \"react-redux\";\nimport { STATUS } from \"apiServices/action\";\n\nconst PopUp = ({\n  refresh,\n  status,\n  icon,\n  statusDisplay = false,\n  title = \"\",\n  cancelButtonTitle = \"Cancel\",\n  actionButtonTitle = \"Submit\",\n  cancelButtonClass = \"bg-background\",\n  actionButtonClass = \"bg-background\",\n  actionButtonEvent = null,\n  colorText = \"red\",\n  msg1 = null,\n  msg2 = null,\n  onCloseFunction = null,\n  refreshOnCancel = true,\n  setIsSuccess\n}) => {\n  const dispatch = useDispatch();\n  if (status?.code === 500 ) {\n    icon = \"em-pensive\"\n    title = \"Server Error\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = true;\n  }\n  if (status?.code === 408 ) {\n    icon = \"em-alarm_clock\"\n    title = \"Request Timeout\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = true;\n  }\n  if (status?.code === 400 ) {\n    icon = \"em-alarm_clock\"\n    title = \"Server Error\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = false;\n  }\n  if (status?.code === 404) {\n    title = \"Something wrong with the application\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = false;\n  }\n\n  const [show, setShow] = useState(statusDisplay);\n\n  useEffect(() => {\n    //from outside change\n    setShow(statusDisplay);\n  }, [statusDisplay]);\n\n  useEffect(() => {\n  }, [show]);\n\n  window.onkeydown = e => e.keyCode === 27 ? setShow(false) : null\n  return (\n    <CRow className={`${show ? null : \"d-none\"}`}>\n      <CCol>\n        <CModal\n          show={show}\n          closeOnBackdrop={false}\n          onClose={() => {\n            setShow(false)\n            if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\n            dispatch({ type: STATUS, status: null });\n            if (onCloseFunction) {\n              onCloseFunction()\n            }\n          }}\n          size=\"lg\"\n          style={{ minHeight: \"280px\" }}\n          bodyOpenClassName=\"p-3\"\n        >\n          {/* <div className='d-flex flex-row-reverse'>\n            <i className='pr-2 pt-2 iconU-modalClose' onClick={() => setShow(false)}></i>\n          </div>\n          <CModalHeader className=\"px-5 pt-3 border-none\">\n              <CModalTitle className={`text LatoBold ${colorText}`}>\n                {title}\n              </CModalTitle> */}\n\n          <div className=\"d-flex flex-row-reverse\">\n            <i\n              className=\"pr-3 pt-3 iconU-modalClose\"\n              onClick={() => {\n                setShow(false)\n                if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\n                dispatch({ type: STATUS, status: null });\n                if (onCloseFunction) {\n                  onCloseFunction()\n                }\n              }}\n            ></i>\n          </div>\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className={`text LatoBold ${colorText}`}>\n              {title} <span><i className={`em ${icon}`}></i></span>\n            </CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">{msg1}</p>\n            <p className=\"text\">{msg2}</p>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            {cancelButtonTitle ? (\n              <CButton\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\n                onClick={() => {\n                  if (refreshOnCancel) {\n                    if (typeof (refresh) === 'function') refresh()\n                    else refreshPage({ refresh: true });\n                  } else {\n                    onClose({\n                      setShow,\n                      parentOncCloseFunction: onCloseFunction,\n                    });\n                  }\n                  dispatch({ type: STATUS, status: null });\n                }}\n              >\n                {cancelButtonTitle}\n              </CButton>\n            ) : null}\n            {actionButtonTitle ? (\n              <CButton\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\n                onClick={() => {\n                  if (actionButtonEvent) {\n                    actionButtonEvent();\n                    setShow(false);\n                  } else {\n                    setShow(false)\n                  }\n                }\n                }\n              >\n                {actionButtonTitle}\n              </CButton>\n            ) : null}{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default PopUp;\n","export const onClose = ({ setShow, parentOncCloseFunction }) => {\n  setShow(false);\n  if (parentOncCloseFunction) {\n    parentOncCloseFunction();\n  }\n\n};\n\nexport const refreshPage = ({ refresh = true }) => {\n  if (refresh === true) {\n    window.location.reload(false);\n  }\n};\n","import { isInteger } from \"formik\";\n\nexport const next = ({\n  e,\n  state,\n  isCaptcha,\n  setIsValidated,\n  setIsType,\n  isType,\n  isValidated,\n  submit\n}) => {\n  const key = e.key; // const {key} = event; ES6+\n  let type = [...isType];\n\n  //if press enter\n  if (key === \"Enter\"){\n    if(isValidated){\n      submit();\n    }else{\n      return;\n    }\n  }\n\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\",\"Delete\"];\n  if (arr_tmp.includes(key)) {\n    return 0;\n  } else if (key === \"Backspace\") {\n    let type_ = [...isType];\n    let state_ = type_[state];\n    if (state_ == \"\" && state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\n      type_[state - 1] = \"\";\n      type[state - 1] = \"\";\n    } \n  } else if (key === \"ArrowLeft\") {\n    if (state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) - 1))\n        .setSelectionRange(-1, -1);\n\n      return 0;\n    }\n  } else if (key === \"ArrowRight\") {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) + 1))\n        .setSelectionRange(-1, -1);\n      return 0;\n    }\n  } else {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n    }\n  }\n\n  if (key === \"Backspace\") {\n    type[state] = \"\";\n  } else {\n    type[state] = key.toUpperCase();\n  }\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\n  let allowedChar = char.split(\"\");\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\n    setIsType(type);\n  } else {\n    return 0;\n  }\n\n  let stat = true;\n  isCaptcha.map((data, index) => {\n    // if (index == 0) {\n    //   return;\n    // }\n    if (!(type[index + 1] == isCaptcha[index])) {\n      stat = false;\n    } \n  });\n  setIsValidated(stat);\n};\n\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\n  if (module?.length) {\n    let newModule = [];\n    module.map((list) => {\n      list.poList.map((po) => {\n        po.itemList.map((item) => {\n          const { qty, grade } = item;\n          const _qty = isInteger(qty)\n            ? parseInt(qty)\n            : !qty\n              ? 0\n              : parseFloat(qty);\n          const _sku = noSkuChecking\n            ? list.skuName\n            : moduleName === \"waste\"\n              ? item.wasteType?.label\n                ? item.wasteType?.label\n                : list.skuName\n              : grade?.label;\n          const _toWaste =\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\" ||\n                item.wasteType?.label === \"Waste\"\n                ? true\n                : false\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\n                ? true\n                : false;\n          const _uom = noSkuChecking\n            ? list.unitOfMeassures\n            : grade?.uom === \"gram\"\n              ? \"kg\"\n              : grade?.uom;\n          let newSku = {\n            sku: _sku,\n            qty: _qty,\n            uom: _uom,\n            wqty: 0,\n            swqty: 0,\n          };\n          if (_toWaste) {\n            newSku.qty = 0;\n            newSku.sku = list.skuName;\n          }\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Waste\"\n              : grade?.label === \"Waste\"\n          )\n            newSku.wqty = _qty;\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\"\n              : grade?.label === \"Semi Waste\"\n          )\n            newSku.swqty = _qty;\n          const isExist = newModule.findIndex(\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\n          );\n\n          if (moduleName !== \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (grade?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\n            }\n          }\n\n          if (moduleName === \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (item.wasteType?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (item.wasteType?.label === \"Waste\")\n                newModule[isExist].wqty += _qty;\n            }\n          }\n        });\n      });\n    });\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\n    const i = newModule.findIndex((s) => s.sku === skuName);\n    newModule.forEach((sku) => {\n      if (i !== -1) {\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\n      }\n    });\n    return newModule;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { useSelector } from \"react-redux\";\nimport { next, skuListUpdateCheck } from \"./services.js\";\nimport { totalQty } from \"Page/StockEntry/GeneralServices/moduleServices\";\n\nconst ModalsConfirmation = ({\n  moduleEntry,\n  confirmation,\n  setConfirmation,\n  save,\n  submit,\n  isSuccess,\n  isLoading,\n  moveAll,\n  setAction,\n  moduleName,\n  noSkuChecking,\n  singleViewData,\n}) => {\n  const dimention = document.documentElement.clientHeight;\n  const height = dimention - 300;\n\n  let buttonName = \"Submit\";\n\n  if (confirmation.name === \"save\") buttonName = \"Save\";\n  useEffect(() => {\n    if (isSuccess) setConfirmation({ show: false, name: null });\n  }, [isSuccess]);\n  window.onkeydown = (e) =>\n    e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null;\n\n  useEffect(() => {\n    setAction(confirmation.name);\n  }, [confirmation]);\n\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry;\n\n  const areaDestinationName = module?.jobPost?.areaDestinationName;\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName;\n  const areaName = module?.jobPost?.areaName;\n\n  const skuListUpdate = skuListUpdateCheck(\n    module?.jobPost.list,\n    noSkuChecking,\n    moduleName\n  );\n  return (\n    <CRow\n      className={\"modalConfirmation \" + (confirmation.show ? null : \"d-none\")}\n    >\n      <CCol>\n        <CModal show={confirmation.show} closeOnBackdrop={false}>\n          <CModalHeader className=\"px-4 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">\n              Confirmation{\" \"}\n              <span>\n                <i className=\"em em-pray\"></i>\n              </span>\n            </CModalTitle>\n            <label\n              tabIndex=\"0\"\n              onKeyDown={(e) =>\n                e.keyCode === 13\n                  ? setConfirmation({ show: false, name: null })\n                  : false\n              }\n              onClick={() => setConfirmation({ show: false, name: null })}\n              className=\"sku-item iconU-modalClose\"\n            />\n          </CModalHeader>\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\n            <p className=\"text mb-2\">\n              <span>{`Are you sure want to ${\n                areaName == \"Waste\" ? \"update\" : \"send\"\n              } this Item `}</span>\n              <span\n                className={` ${areaDestinationName ? null : \"d-none\"}`}\n              >{` from`}</span>\n              <span\n                className={`green ${areaDestinationName ? null : \"d-none\"}`}\n              >{` ${areaName} `}</span>\n              <span>\n                {moduleName == \"outbound\"\n                  ? \"from\"\n                  : moduleName === \"repack\"\n                  ? \"\"\n                  : \"to\"}{\" \"}\n              </span>\n              <span\n                className={`green ${moduleName !== \"repack\" ? null : \"d-none\"}`}\n              >{` ${\n                moduleName === \"stockTransfer\"\n                  ? warehouseDestinationName\n                  : areaDestinationName\n                  ? areaDestinationName\n                  : areaName\n              } `}</span>\n            </p>\n            <p className=\"text\">\n              Please double check this list, this record will store to database.\n            </p>\n            <div\n              style={{\n                minHeight: height,\n                maxHeight: height,\n                overflow: \"auto\",\n                border: \"1px solid var(--lineGrey)\",\n              }}\n            >\n              <table>\n                <thead>\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Weight\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Semi Waste\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Waste\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {skuListUpdate?.map((data) => (\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                      <td style={{ maxWidth: \"160px\" }}>{data.sku}</td>\n                      <td\n                        className=\"text-right py-3\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        {`${totalQty(data?.qty)}`}\n                      </td>\n                      <td\n                        className=\"text-right text-nowrap\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        <span className=\"text-nowrap\">{`${totalQty(\n                          data?.swqty\n                        )} `}</span>\n                      </td>\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\n                        {`${totalQty(data?.wqty)}`}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? setConfirmation({ show: false, name: null })\n                    : false\n                }\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\n                onClick={() => setConfirmation({ show: false, name: null })}\n              >\n                Cancel\n              </CButton>\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? isLoading\n                      ? null\n                      : confirmation.name === \"save\"\n                      ? save()\n                      : submit()\n                    : false\n                }\n                className={`${\n                  isLoading ? \"bg-softGreen text\" : \"bg-green text-white\"\n                } no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\n                onClick={() =>\n                  isLoading\n                    ? null\n                    : confirmation.name === \"save\"\n                    ? save()\n                    : submit()\n                }\n              >\n                {isLoading ? \"Processing...\" : buttonName}\n              </CButton>{\" \"}\n            </div>\n          </CModalBody>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst ModalsCaptcha = ({\n  show = false,\n  setIsShowModal,\n  submit,\n  submitText = \"Submit\",\n}) => {\n  //random text\n  var text = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var charactersLength = characters.length;\n  var text_split = [];\n  for (var i = 0; i < 3; i++) {\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\n    text += r;\n    text_split.push(r);\n  }\n\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\n  const [isValidated, setIsValidated] = React.useState(false);\n  const [isType, setIsType] = React.useState([]);\n\n  //reset if visible = false\n  useEffect(() => {\n    if (show === true) {\n      document.getElementById(\"t1\").value = \"\";\n      document.getElementById(\"t2\").value = \"\";\n      document.getElementById(\"t3\").value = \"\";\n    }\n  }, [show]);\n\n  return (\n    <CRow className={show ? null : \"d-none\"}>\n      <CCol>\n        <CModal\n          show={show}\n          onClose={() => {\n            setIsShowModal(false);\n          }}\n          size=\"lg\"\n          style={{ height: \"400px\" }}\n        >\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\n              {selectorCsvFileName}?\n            </p>\n            <p className=\"text\">\n              Once uploaded this record will store to databases.\n            </p>\n            <p className=\"text mb-2\">\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\n            </p>\n\n            <div className=\"captcha-box\">\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 1,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t1\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[0]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 2,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t2\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input ml-0 mr-0\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[1]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 3,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t3\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[2]}\n              />\n            </div>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            <CButton\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\n              onClick={() => {\n                setIsShowModal(false);\n              }}\n            >\n              Cancel\n            </CButton>\n            <CButton\n              className={\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\n              }\n              onClick={() => {\n                submit();\n                setIsValidated(false);\n              }}\n            >\n              {submitText}\n            </CButton>{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport { ModalsConfirmation, ModalsCaptcha };\n","import React from \"react\";\nimport { CCard } from \"@coreui/react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"./bootstrapTable-style.scss\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport axios from \"axios\";\n\n//cell editable\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\n\nclass TableEditable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validateStatus: false,\n      validateResult: \"Please Wait...\",\n      globalData: this.props.globalData,\n      rowCount: 0,\n      keyy: 0,\n      triggerRender: 0\n    };  \n    this.validatePOSKUStockTransfer = this.validatePOSKUStockTransfer.bind(this);\n    this.validateSKUNumber = this.validateSKUNumber.bind(this);\n    \n  } \n  changeOutboundReason = (row) => {\n    setTimeout(() => {\n      let elem = document.getElementById(`row${row}-outboundReason`);\n      elem.classList.add(\"red\", \"tooltip-custom\");\n      elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\n    }, 300);\n  }\n\n  changeWarehouseUuid = (\n    value,\n    column,\n    columnName,\n    row,\n    warehouseCodeList,\n    warehouseUuidList,\n    warehouseNameList\n  ) => {\n    const { setCsvDataTmp, globalData } = this.props;\n    let tmpdata = globalData;\n    var index = tmpdata.findIndex((obj) => obj.id == row);\n    let i = warehouseCodeList.indexOf(value);\n    tmpdata[index][column] = warehouseUuidList[i];\n    tmpdata[index][columnName] = warehouseNameList[i];\n\n    console.clear() \n    setTimeout(async () => {\n      setCsvDataTmp(tmpdata);\n    }, 400);\n  };\n\n  validatePOSKU = async (id, row, idColumn) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;\n    if(transaction==\"additional_inbound\"){\n      return;\n    }\n\n    let tmpdata = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/stocktake/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        elem.classList.add(\"red\");\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          var index = tmpdata.findIndex((obj) => obj.id == row);\n          if (data[0] && data[0].isExist === true) {\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\n            tmpdata[index].wmsPoSkuCodeStatus = true;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = data[0].expiryDate;\n            tmpdata[index].inboundDate = data[0].inboundDate;\n            tmpdata[index].supplierName = data[0].supplierName;\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\n            tmpdata[index].uom = data[0].uom;\n            tmpdata[index].photos = data[0].photos;\n            elem.classList.remove(\"red\");\n            elem.classList.add(\"hiddenTooltip\");\n          } else {\n            tmpdata[index].wmsPoSkuCodeStatus = false;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = \"\";\n            tmpdata[index].inboundDate = \"\";\n            tmpdata[index].supplierName = \"\";\n            tmpdata[index].supplierUuid = \"\";\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\n          }\n          setCsvDataTmp(tmpdata);\n        });\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validatePOSKUStockTransfer = async (newValue, row, idColumn, key) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;  \n    let tmpdata = globalData;\n    \n    var index = tmpdata.findIndex((obj) => obj.id == row.id); \n    // console.log(tmpdata)\n    // console.log(row.id, row)\n    // console.log(index)\n\n    try {\n      const url = \"/stocktransfer/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      let payloadPO = [{\n        \"id\": row.id,\n        \"poSkuCode\": key==\"wmsPoSkuCode\" ? newValue : (row.poSkuCode?row.poSkuCode:\"\"),\n        \"skuNumber\": key==\"skuNumber\"? newValue?.skuNumber: row.skuNumber,\n        \"skuUuid\": key==\"skuNumber\"? newValue?.skuUuid:row.skuUuid,\n        \"warehouseSource\": row.warehouseSource,\n        \"areaSource\": row.areaSource,\n        \"weight\": key==\"qty\"?newValue:row.qty\n      }]; \n\n      setTimeout(async () => {\n        //setvalidate false\n        setIsValidate(false);\n\n        //elemen column\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        // elem.classList.remove(\"hiddenTooltip\");\n        // elem.classList.add(\"red\");  \n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: payloadPO },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          if (data[0]) {\n            if(data[0].isExist === true && data[0].isValid === true){\n              tmpdata[index]['rowStatus'] = true;\n              tmpdata[index]['rowReason'] = \"\";\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }else{\n              tmpdata[index]['rowStatus'] = false;\n              tmpdata[index]['rowReason'] = data[0]?.errorMessage;\n            }\n            tmpdata[index]['wmsPoSkuCode'] = data[0]?.wmsPoSkuCode ;\n            tmpdata[index]['wmsPoSkuCodeStatus'] = data[0]?.isExist && data[0]?.isValid;\n            tmpdata[index]['wmsPoSkuCodeReason'] = data[0]?.errorMessage;\n            tmpdata[index]['expiryDate'] = data[0]?.expiryDate;\n            tmpdata[index]['inboundDate'] = data[0]?.inboundDate;\n            tmpdata[index]['supplierName'] = data[0]?.supplierName;\n            tmpdata[index]['supplierUuid'] = data[0]?.supplierUuid;\n            tmpdata[index]['uom'] = data[0]?.uom;\n            tmpdata[index]['photos'] = data[0]?.photos;\n          } else {\n            tmpdata[index]['wmsPoSkuCodeStatus'] = false;\n            tmpdata[index]['wmsPoSkuCodeReason'] = response?.data?.message;\n            tmpdata[index]['expiryDate'] = \"\";\n            tmpdata[index]['inboundDate'] = \"\";\n            tmpdata[index]['supplierName'] = \"\";\n            tmpdata[index]['supplierUuid'] = \"\";\n            tmpdata[index]['rowStatus'] = false;\n            tmpdata[index]['rowReason'] = response?.data?.message;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = response?.data?.message;\n          } \n\n          if(key==\"skuNumber\"){ \n            tmpdata[index][\"skuNumber\"] = newValue.skuNumber;\n            tmpdata[index][\"skuNumberReason\"] = newValue.skuDescription;\n            tmpdata[index][\"skuNumberStatus\"] = true;\n            tmpdata[index][\"skuUuid\"] = newValue.skuUuid;\n          }\n          setCsvDataTmp(tmpdata); \n        }); \n        let tmpKey = this.state.keyy + 1; \n        this.setState({keyy: tmpKey}); \n      }, 500);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validateOutbountReason = (value, row, idColumn) => {\n    const { globalData } = this.props;\n    let tmp_data = globalData;\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\n      this.changeOutboundReason(row)\n    }\n  };\n\n  validateOutbountType = (value, row, idColumn) => {\n    const { globalData, setIsValidate } = this.props;\n    let tmp_data = globalData;\n    setIsValidate(false);\n    if (value.toUpperCase() !== \"LAINNYA\") {\n      setIsValidate(true);\n      return 0;\n    }\n\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (datax[\"outboundReason\"] == \"\") {\n      this.changeOutboundReason(row);\n    }\n  };\n\n  validateSKUNumber = async (id, row, idColumn, key, rowData = null) => {\n    const { globalData, setCsvDataTmp, setIsValidate,transaction } = this.props;\n    let tmp_data = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/oss/skuByNumbers\";\n      let elem = null;\n      let elemspan = null;\n      \n      // for validating stock transfer\n      let stats = false;\n      let newSkuData = {} \n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { skuList: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          let isSuccess = response.data.isSuccess;\n          var index = tmp_data.findIndex((obj) => obj.id == row);\n          if (isSuccess === true && data.length > 0) {\n            stats = true;\n            tmp_data[index][key] = data[0].skuNumber;\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\n            tmp_data[index][key + \"Status\"] = true;\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\n            newSkuData = {\n              skuUuid: data[0].id,\n              skuNumber: data[0].skuNumber,\n              skuDescription: data[0].skuDescription,\n              photo: data[0].photo\n            }\n\n            //custom\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = data[0].id;\n              tmp_data[index].photo = data[0].imageMd;\n            }\n\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = data[0].uom;\n            }\n            \n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = data[0].uom;\n            }\n\n            \n            if(transaction!==\"stockTransfer\"){\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }\n\n          } else {\n            stats = false;\n            tmp_data[index][key] = id;\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\n            tmp_data[index][key + \"Status\"] = false;\n            tmp_data[index][key + \"Uuid\"] = null;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"SKU Number Not Found\";\n\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = \"\";\n              tmp_data[index].photo = \"\";\n            }\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = null;\n            }\n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = \"\";\n            }\n          } \n        });\n\n        if(transaction==\"stockTransfer\" && stats === true){ \n          this.validatePOSKUStockTransfer(newSkuData, rowData, idColumn, 'skuNumber')\n        }else{\n          setCsvDataTmp(tmp_data);\n        }\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  render() {\n    const {\n      columns,\n      hiddenRows,\n      tableClass,\n      warehouseArea,\n      outboundType,\n      setCheckingCsv, \n      editable = true,\n      warehousesData = [],\n      transaction,\n      globalData\n    } = this.props;\n    let { validateStatus,  keyy } = this.state;\n    \n    //wh\n    let warehouseCodeList = [];\n    let warehouseUuidList = [];\n    let warehouseNameList = [];\n    if (warehousesData) {\n      let tmp = warehousesData?.data?.map((d) => {\n        warehouseCodeList.push(d.code);\n        warehouseUuidList.push(d.id);\n        warehouseNameList.push(d.name);\n      });\n    }\n\n    //wh area\n    let wh_area_label =\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\n    let wh_outboundtype_label = !outboundType\n      ? []\n      : outboundType.map((data) => data.label.toUpperCase());\n    let wh_outboundtype_value = !outboundType\n      ? []\n      : outboundType.map((data) => data.value);\n    const newFormat = columns.map((data, index) => {\n      data.validator = (newValue, row, column, done) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let reason = null;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n\n        let stockTransferColumnCheck = ['wmsPoSkuCode', 'qty']\n        if (stockTransferColumnCheck.includes(key) && transaction==\"stockTransfer\") {\n          this.validatePOSKUStockTransfer(newValue, row, idColumn, key);\n          stat = true;\n        }else if(key == \"wmsPoSkuCode\" ){\n          this.validatePOSKU(newValue, row.id, idColumn, key);\n          stat = true; \n        }\n\n        if (key == \"skuNumber\") {\n          this.validateSKUNumber(newValue, row.id, idColumn, key, row);\n          stat = true;\n        }\n\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type not found\";\n            checkType = false;\n            stat = false;\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        } else if (key == \"newGrade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            //if not waste or semi waste\n            if (parseInt(newValue)) {\n              //if number\n              stat = true;\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\n            } else if (newValue == \"\") {\n              row[\"newGradeUuid\"] = null;\n              row[\"newGradeUom\"] = null;\n              stat = true;\n            } else {\n              //if not number => undefined\n              reason = \"Grade Undefined\";\n              checkType = false;\n              stat = false;\n            }\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        }\n\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Outbound Type Not Found`;\n          } else {\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\n            stat = true;\n            this.validateOutbountType(newValue, row.id, idColumn);\n          }\n        }\n\n        if (key == \"outboundReason\") {\n          this.validateOutbountReason(newValue, row.id, idColumn);\n        }\n\n        if (key == \"warehouse\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseUuid\",\n              \"warehouseName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          }\n        }\n        if (key == \"warehouseDestination\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseDestinationUuid\",\n              \"warehouseDestinationName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          } \n        }\n\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Warehouse Area Not Found`;\n          } else {\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\n            if (key == \"areaNameDestination\") {\n              row[\"areaDestination\"] = wh_area_value[i];\n            } else {\n              row[\"areaSource\"] = wh_area_value[i];\n            }\n            stat = true;\n          }\n        }\n\n        if (key == \"newPack\") {\n          let checkTypenewPack = isNaN(newValue) ? false : true;\n          if (!checkTypenewPack) {\n            stat = false;\n            reason = `Pack Should be a number`;\n          } else {\n            stat = true;\n          }\n        } \n        \n\n        let checkType = null;\n        if (data.type == \"number\") {\n          checkType = isNaN(newValue) ? false : true;\n        } else {\n          checkType = true;\n        }\n        if (checkType === false) {\n          reason = `${data.text} Should be a ${data.type}`;\n        } \n\n        \n        if (key == \"wmsPoSkuCode\" && transaction == \"stockTransfer\") {\n          if(isNaN(newValue)){\n            checkType = false;\n            reason = `${data.text} Should be a number`;\n            stat = false;\n          } \n        } \n\n        //some field can null\n        let canNull = [\n          \"grade\",\n          \"outboundReason\",\n          \"ripenessLevel\",\n          \"newRipeness\",\n          \"reason\",\n          \"expiryDate\"\n        ]; \n\n        if (canNull.includes(key) && newValue === \"\") {\n          reason = \"\";\n          checkType = true;\n          stat = true;\n        } else if (key == \"grade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type Not Found\";\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //check ripenesslevel\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\n          let allowedRipenessLevel = [0, 1, 2, 3];\n          if (\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\n            newValue == \"\"\n          ) {\n            checkType = true;\n            stat = true;\n            reason = \"\";\n            if (newValue == \"\") {\n              newValue = \"\";\n            }\n          } else {\n            checkType = false;\n            stat = false;\n            reason = \"Undefined Ripeness Level\";\n          }\n        }\n\n        //check date\n        if (data.type == \"date_indo\") {\n          //checking date\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\n          if (newValue.match(regex_date)) {\n            checkType = true;\n            stat = true;\n          } else if (newValue == \"\") {\n            checkType = true;\n            stat = true;\n          } else {\n            reason = `Date format must be 'dd-mm-yyyy'`;\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //set notif\n        row[keyReason] = reason;\n        if (stat && checkType) {\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\n          if (!specialKey.includes(key)) {\n            //some key have their own checking, so if not in array do checking error\n            row[keyStatus] = true;\n            setCheckingCsv();\n          }\n        } \n         \n        return {\n          valid: stat && checkType ? true : false,\n          message: reason,\n        };\n      };\n\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n        let txt = row[keyReason];\n        \n        // if status column = false\n        // that mean there's error or not valid data in some column\n        if (row[keyStatus] === false) {\n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {txt}\n              </span>\n            </div>\n          );\n        }\n\n        // if global row status = false\n        // that mean there's wmsposkucode validation error, and makes 1 line become red colour\n        // for now is only for stock transfer  \n        if ( transaction==\"stockTransfer\" &&  row['rowStatus'] === false) { \n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {row['rowReason']}\n              </span>\n            </div>\n          );\n        }\n\n        \n        // if status column = true\n        // No problem \n        return (\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\n            {cell}\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\n              {txt}\n            </span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n    console.clear();  \n    console.log(globalData)\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={globalData}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          cellEdit={\n            editable === true\n              ? cellEditFactory({\n                  mode: \"click\",\n                  blurToSave: true,\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\n                })\n              : null\n          }\n          bordered={false}\n          hiddenRows={hiddenRows}\n          key={keyy}\n        />\n      </CCard>\n    );\n  }\n}\n\nclass TableResult extends React.Component {\n  render() {\n    const { columns, tableClass, data } = this.props;\n\n    const newFormat = columns.map((data, index) => {\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\n          return (\n            <div className=\"tooltip-custom red\">\n              {cell}\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\n            </div>\n          );\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\n          return (\n            <div className=\"green\">\n              {cell}\n              <span></span>\n            </div>\n          );\n        }\n\n        return (\n          <div>\n            {cell}\n            <span></span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={data}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          bordered={false}\n        />\n      </CCard>\n    );\n  }\n}\n\nexport { TableResult, TableEditable };\n"],"sourceRoot":""}