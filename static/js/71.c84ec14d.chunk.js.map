{"version":3,"sources":["Page/StockEntry/Waste/Upload/Result.jsx","Component/BootstrapTable/index.jsx"],"names":["withRouter","props","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvDataResult","csvDataResult","selectorCsvFieldResult","csvFieldResult","useEffect","undefined","history","push","React","createElement","className","TableResult","columns","tableClass","data","type","style","backgroundColor","onClick","lineHeight","length","TableEditable","Component","constructor","_this","super","this","changeOutboundReason","row","setTimeout","elem","document","getElementById","concat","classList","add","innerHTML","changeWarehouseUuid","value","column","columnName","warehouseCodeList","warehouseUuidList","warehouseNameList","setCsvDataTmp","globalData","tmpdata","index","findIndex","obj","id","i","indexOf","console","clear","async","validatePOSKU","idColumn","setIsValidate","transaction","url","elemspan","axios","method","then","response","_response$data","isExist","wmsPoSkuCode","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","expiryDate","inboundDate","supplierName","supplierUuid","uom","photos","remove","error","validatePOSKUStockTransfer","newValue","key","payloadPO","poSkuCode","skuNumber","skuUuid","warehouseSource","areaSource","qty","_response$data2","_data$2","_data$3","_data$4","_data$5","_data$6","_data$7","_data$8","_data$9","_data$10","_data$11","_data$","isValid","errorMessage","_response$data3","_response$data4","_response$data5","message","skuDescription","tmpKey","keyy","setState","validateOutbountReason","tmp_data","datax","toUpperCase","validateOutbountType","validateSKUNumber","rowData","arguments","stats","newSkuData","skuList","_response$data6","isSuccess","photo","imageMd","newGradeUom","validateStatus","validateResult","rowCount","triggerRender","bind","render","hiddenRows","warehouseArea","outboundType","setCheckingCsv","editable","warehousesData","_warehousesData$data","map","d","code","name","wh_area_label","label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","done","dataField","keyStatus","keyReason","stat","reason","includes","arr_grade","checkType","parseInt","isNaN","text","regex_date","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","log","CCard","BootstrapTable","keyField","sort","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered"],"mappings":"4KAAA,2DAoDeA,sBA9CCC,IAGd,MAAMC,EAAsBC,YAAaC,GAAUA,EAAMC,aACnDC,EAAwBH,YAAaC,GAAUA,EAAMG,eACrDC,EAAyBL,YAAaC,GAAUA,EAAMK,gBAK5D,OAHAC,oBAAU,OAAW,CAACJ,SAGQK,IAA1BL,GAAiE,OAA1BA,GACzCL,EAAMW,QAAQC,KAAK,qCACZ,GAIPC,IAAAC,cAAA,OAAKC,UAAU,+CAEbF,IAAAC,cAACE,IAAW,CACVC,QAASV,EACTW,WAAW,cACXC,KAAMd,IAGRQ,IAAAC,cAAA,OAAKC,UAAU,YACbF,IAAAC,cAAA,OAAKC,UAAU,SACbF,IAAAC,cAAA,UACEM,KAAK,SACLL,UAAU,+BACVM,MAAO,CAAEC,gBAAiB,QAC1BC,QAASA,IAAMvB,EAAMW,QAAQC,KAAK,sCACnC,wBAKHC,IAAAC,cAAA,OAAKC,UAAU,QAAQM,MAAO,CAAEG,WAAY,SAAU,8BACxBvB,EAAoB,KAC/CI,EAAsBoB,QAAU,EAAE,gB,iCC5C7C,sKAWA,MAAMC,UAAsBb,IAAMc,UAChCC,YAAY5B,GAAQ,IAAD6B,EACjBC,MAAM9B,GAAM6B,EAAAE,KAAC,KAafC,qBAAwBC,IACtBC,WAAW,KACT,IAAIC,EAAOC,SAASC,eAAe,MAADC,OAAOL,EAAG,oBAC5CE,EAAKI,UAAUC,IAAI,MAAO,kBAC1BL,EAAKM,UAAS,gIACb,MACJ,KAEDC,oBAAsB,CACpBC,EACAC,EACAC,EACAZ,EACAa,EACAC,EACAC,KAEA,MAAM,cAAEC,EAAa,WAAEC,GAAenB,KAAK/B,MAC3C,IAAImD,EAAUD,EACd,IAAIE,EAAQD,EAAQE,UAAWC,GAAQA,EAAIC,IAAMtB,GACjD,IAAIuB,EAAIV,EAAkBW,QAAQd,GAClCQ,EAAQC,GAAOR,GAAUG,EAAkBS,GAC3CL,EAAQC,GAAOP,GAAcG,EAAkBQ,GAE/CE,QAAQC,QACRzB,WAAW0B,UACTX,EAAcE,IACb,MACH,KAEFU,cAAgBD,MAAOL,EAAItB,EAAK6B,KAC9B,MAAM,cAAEb,EAAa,WAAEC,EAAU,cAAEa,EAAa,YAAEC,GAAgBjC,KAAK/B,MACvE,GAAgB,sBAAbgE,EACD,OAGF,IAAIb,EAAUD,EACd,IACEa,GAAc,GACd,MAAME,EAAM,iCACZ,IAAI9B,EAAO,KACP+B,EAAW,KACfhC,WAAW0B,UAGT,GAFAzB,EAAOC,SAASC,eAAe,GAADC,OAAIwB,IAClCI,EAAW9B,SAASC,eAAe,GAADC,OAAIwB,EAAQ,SACjC,OAAT3B,QAA0BzB,IAATyB,EACnB,OAAO,EAET+B,EAASzB,UAAY,aACrBN,EAAKI,UAAUC,IAAI,aACb2B,IAAM,CACVC,OAAQ,OACRH,IAAKA,EACL9C,KAAM,CAAEA,KAAM,CAACoC,MACdc,MAAK,SAAUC,GAAW,IAADC,EAC1B,IAAIpD,EAAe,OAARmD,QAAQ,IAARA,GAAc,QAANC,EAARD,EAAUnD,YAAI,IAAAoD,OAAN,EAARA,EAAgBpD,KAC3B,IAAIiC,EAAQD,EAAQE,UAAWC,GAAQA,EAAIC,IAAMtB,GAC7Cd,EAAK,KAA0B,IAApBA,EAAK,GAAGqD,SACrBrB,EAAQC,GAAOqB,aAAetD,EAAK,GAAGsD,aACtCtB,EAAQC,GAAOsB,oBAAqB,EACpCvB,EAAQC,GAAOuB,mBAAqB,wBACpCxB,EAAQC,GAAOwB,WAAazD,EAAK,GAAGyD,WACpCzB,EAAQC,GAAOyB,YAAc1D,EAAK,GAAG0D,YACrC1B,EAAQC,GAAO0B,aAAe3D,EAAK,GAAG2D,aACtC3B,EAAQC,GAAO2B,aAAe5D,EAAK,GAAG4D,aACtC5B,EAAQC,GAAO4B,IAAM7D,EAAK,GAAG6D,IAC7B7B,EAAQC,GAAO6B,OAAS9D,EAAK,GAAG8D,OAChC9C,EAAKI,UAAU2C,OAAO,OACtB/C,EAAKI,UAAUC,IAAI,mBAEnBW,EAAQC,GAAOsB,oBAAqB,EACpCvB,EAAQC,GAAOuB,mBAAqB,wBACpCxB,EAAQC,GAAOwB,WAAa,GAC5BzB,EAAQC,GAAOyB,YAAc,GAC7B1B,EAAQC,GAAO0B,aAAe,GAC9B3B,EAAQC,GAAO2B,aAAe,GAC9B5C,EAAKI,UAAUC,IAAI,OACnBL,EAAKI,UAAU2C,OAAO,iBACtBhB,EAASzB,UAAY,yBAEvBQ,EAAcE,OAEf,KACH,MAAOgC,GACP,OAAO,IAET,KAEFC,2BAA6BxB,MAAOyB,EAAUpD,EAAK6B,EAAUwB,KAC3D,MAAM,cAAErC,EAAa,WAAEC,EAAU,cAAEa,EAAa,YAAEC,GAAgBjC,KAAK/B,MACvE,IAAImD,EAAUD,EAEd,IAAIE,EAAQD,EAAQE,UAAWC,GAAQA,EAAIC,IAAMtB,EAAIsB,IAKrD,IACE,MAAMU,EAAM,qCACZ,IAAI9B,EAAO,KACP+B,EAAW,KACXqB,EAAY,CAAC,CACf,GAAMtD,EAAIsB,GACV,UAAkB,gBAAL+B,EAAsBD,EAAYpD,EAAIuD,UAAUvD,EAAIuD,UAAU,GAC3E,UAAkB,aAALF,EAA0B,OAARD,QAAQ,IAARA,OAAQ,EAARA,EAAUI,UAAWxD,EAAIwD,UACxD,QAAgB,aAALH,EAA0B,OAARD,QAAQ,IAARA,OAAQ,EAARA,EAAUK,QAAQzD,EAAIyD,QACnD,gBAAmBzD,EAAI0D,gBACvB,WAAc1D,EAAI2D,WAClB,OAAe,OAALN,EAAWD,EAASpD,EAAI4D,MAGpC3D,WAAW0B,UAQT,GANAG,GAAc,GAGd5B,EAAOC,SAASC,eAAe,GAADC,OAAIwB,IAClCI,EAAW9B,SAASC,eAAe,GAADC,OAAIwB,EAAQ,SAEjC,OAAT3B,QAA0BzB,IAATyB,EACnB,OAAO,EAET+B,EAASzB,UAAY,mBAGf0B,IAAM,CACVC,OAAQ,OACRH,IAAKA,EACL9C,KAAM,CAAEA,KAAMoE,KACblB,MAAK,SAAUC,GAAW,IAADwB,EAC1B,IAAI3E,EAAe,OAARmD,QAAQ,IAARA,GAAc,QAANwB,EAARxB,EAAUnD,YAAI,IAAA2E,OAAN,EAARA,EAAgB3E,KAC3B,GAAIA,EAAK,GAAI,CAAC,IAAD4E,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAMNC,EALL,IAAuB,IAApBtF,EAAK,GAAGqD,UAAwC,IAApBrD,EAAK,GAAGuF,QACrCvD,EAAQC,GAAkB,WAAI,EAC9BD,EAAQC,GAAkB,UAAI,GAC9BjB,EAAKI,UAAU2C,OAAO,OACtB/C,EAAKI,UAAUC,IAAI,sBAEnBW,EAAQC,GAAkB,WAAI,EAC9BD,EAAQC,GAAkB,UAAW,QAAVqD,EAAGtF,EAAK,UAAE,IAAAsF,OAAA,EAAPA,EAASE,aAEzCxD,EAAQC,GAAqB,aAAW,QAAV2C,EAAG5E,EAAK,UAAE,IAAA4E,OAAA,EAAPA,EAAStB,aAC1CtB,EAAQC,GAA2B,oBAAW,QAAP4C,EAAA7E,EAAK,UAAE,IAAA6E,OAAA,EAAPA,EAASxB,WAAkB,QAAXyB,EAAI9E,EAAK,UAAE,IAAA8E,OAAA,EAAPA,EAASS,SACpEvD,EAAQC,GAA2B,mBAAW,QAAV8C,EAAG/E,EAAK,UAAE,IAAA+E,OAAA,EAAPA,EAASS,aAChDxD,EAAQC,GAAmB,WAAW,QAAV+C,EAAGhF,EAAK,UAAE,IAAAgF,OAAA,EAAPA,EAASvB,WACxCzB,EAAQC,GAAoB,YAAW,QAAVgD,EAAGjF,EAAK,UAAE,IAAAiF,OAAA,EAAPA,EAASvB,YACzC1B,EAAQC,GAAqB,aAAW,QAAViD,EAAGlF,EAAK,UAAE,IAAAkF,OAAA,EAAPA,EAASvB,aAC1C3B,EAAQC,GAAqB,aAAW,QAAVkD,EAAGnF,EAAK,UAAE,IAAAmF,OAAA,EAAPA,EAASvB,aAC1C5B,EAAQC,GAAY,IAAW,QAAVmD,EAAGpF,EAAK,UAAE,IAAAoF,OAAA,EAAPA,EAASvB,IACjC7B,EAAQC,GAAe,OAAW,QAAVoD,EAAGrF,EAAK,UAAE,IAAAqF,OAAA,EAAPA,EAASvB,WAC/B,CAAC,IAAD2B,EAAAC,EAAAC,EACL3D,EAAQC,GAA2B,oBAAI,EACvCD,EAAQC,GAA2B,mBAAY,OAARkB,QAAQ,IAARA,GAAc,QAANsC,EAARtC,EAAUnD,YAAI,IAAAyF,OAAN,EAARA,EAAgBG,QACvD5D,EAAQC,GAAmB,WAAI,GAC/BD,EAAQC,GAAoB,YAAI,GAChCD,EAAQC,GAAqB,aAAI,GACjCD,EAAQC,GAAqB,aAAI,GACjCD,EAAQC,GAAkB,WAAI,EAC9BD,EAAQC,GAAkB,UAAY,OAARkB,QAAQ,IAARA,GAAc,QAANuC,EAARvC,EAAUnD,YAAI,IAAA0F,OAAN,EAARA,EAAgBE,QAC9C5E,EAAKI,UAAUC,IAAI,OACnBL,EAAKI,UAAU2C,OAAO,iBACtBhB,EAASzB,UAAoB,OAAR6B,QAAQ,IAARA,GAAc,QAANwC,EAARxC,EAAUnD,YAAI,IAAA2F,OAAN,EAARA,EAAgBC,QAG/B,aAALzB,IACDnC,EAAQC,GAAkB,UAAIiC,EAASI,UACvCtC,EAAQC,GAAwB,gBAAIiC,EAAS2B,eAC7C7D,EAAQC,GAAwB,iBAAI,EACpCD,EAAQC,GAAgB,QAAIiC,EAASK,SAEvCzC,EAAcE,MAEhB,IAAI8D,EAASlF,KAAK5B,MAAM+G,KAAO,EAC/BnF,KAAKoF,SAAS,CAACD,KAAMD,KACpB,KACH,MAAO9B,GACP,OAAO,IAET,KAEFiC,uBAAyB,CAACzE,EAAOV,EAAK6B,KACpC,MAAM,WAAEZ,GAAenB,KAAK/B,MAC5B,IAAIqH,EAAWnE,EACf,IAAIE,EAAQiE,EAAShE,UAAWC,GAAQA,EAAIC,IAAMtB,GAClD,IAAIqF,EAAQD,EAASjE,GACR,IAATT,GAAsD,WAAvC2E,EAAoB,aAAEC,eACvCxF,KAAKC,qBAAqBC,IAE5B,KAEFuF,qBAAuB,CAAC7E,EAAOV,EAAK6B,KAClC,MAAM,WAAEZ,EAAU,cAAEa,GAAkBhC,KAAK/B,MAC3C,IAAIqH,EAAWnE,EAEf,GADAa,GAAc,GACc,YAAxBpB,EAAM4E,cAER,OADAxD,GAAc,GACP,EAGT,IAAIX,EAAQiE,EAAShE,UAAWC,GAAQA,EAAIC,IAAMtB,GAEnB,IADnBoF,EAASjE,GACK,gBACxBrB,KAAKC,qBAAqBC,IAE5B,KAEFwF,kBAAoB7D,eAAOL,EAAItB,EAAK6B,EAAUwB,GAAyB,IAApBoC,EAAOC,UAAAlG,OAAA,QAAAf,IAAAiH,UAAA,GAAAA,UAAA,GAAG,KAC3D,MAAM,WAAEzE,EAAU,cAAED,EAAa,cAAEc,EAAa,YAACC,GAAgBnC,EAAK7B,MACtE,IAAIqH,EAAWnE,EACf,IACEa,GAAc,GACd,MAAME,EAAM,oBACZ,IAAI9B,EAAO,KACP+B,EAAW,KAGX0D,GAAQ,EACRC,EAAa,GACjB3F,WAAW0B,UAGT,GAFAzB,EAAOC,SAASC,eAAe,GAADC,OAAIwB,IAClCI,EAAW9B,SAASC,eAAe,GAADC,OAAIwB,EAAQ,SACjC,OAAT3B,QAA0BzB,IAATyB,EACnB,OAAO,EAET+B,EAASzB,UAAY,mBACf0B,IAAM,CACVC,OAAQ,OACRH,IAAKA,EACL9C,KAAM,CAAE2G,QAAS,CAACvE,MACjBc,MAAK,SAAUC,GAAW,IAADyD,EAC1B,IAAI5G,EAAe,OAARmD,QAAQ,IAARA,GAAc,QAANyD,EAARzD,EAAUnD,YAAI,IAAA4G,OAAN,EAARA,EAAgB5G,KACvB6G,EAAY1D,EAASnD,KAAK6G,UAC9B,IAAI5E,EAAQiE,EAAShE,UAAWC,GAAQA,EAAIC,IAAMtB,IAChC,IAAd+F,GAAsB7G,EAAKM,OAAS,GACtCmG,GAAQ,EACRP,EAASjE,GAAOkC,GAAOnE,EAAK,GAAGsE,UAC/B4B,EAASjE,GAAOkC,EAAM,UAAYnE,EAAK,GAAG6F,eAC1CK,EAASjE,GAAOkC,EAAM,WAAY,EAClC+B,EAASjE,GAAOkC,EAAM,QAAUnE,EAAK,GAAGoC,GACxCsE,EAAa,CACXnC,QAASvE,EAAK,GAAGoC,GACjBkC,UAAWtE,EAAK,GAAGsE,UACnBuB,eAAgB7F,EAAK,GAAG6F,eACxBiB,MAAO9G,EAAK,GAAG8G,OAIN,aAAP3C,IACF+B,EAASjE,GAAOsC,QAAUvE,EAAK,GAAGoC,GAClC8D,EAASjE,GAAO6E,MAAQ9G,EAAK,GAAG+G,SAGvB,YAAP5C,IACF+B,EAASjE,GAAO+E,YAAchH,EAAK,GAAG6D,KAGxB,sBAAbhB,IACDqD,EAASjE,GAAO4B,IAAM7D,EAAK,GAAG6D,KAIf,kBAAdhB,IACD7B,EAAKI,UAAU2C,OAAO,OACtB/C,EAAKI,UAAUC,IAAI,oBAIrBoF,GAAQ,EACRP,EAASjE,GAAOkC,GAAO/B,EACvB8D,EAASjE,GAAOkC,EAAM,UAAY,uBAClC+B,EAASjE,GAAOkC,EAAM,WAAY,EAClC+B,EAASjE,GAAOkC,EAAM,QAAU,KAChCnD,EAAKI,UAAUC,IAAI,OACnBL,EAAKI,UAAU2C,OAAO,iBACtBhB,EAASzB,UAAY,uBAEV,aAAP6C,IACF+B,EAASjE,GAAOsC,QAAU,GAC1B2B,EAASjE,GAAO6E,MAAQ,IAEf,YAAP3C,IACF+B,EAASjE,GAAO+E,YAAc,MAEhB,sBAAbnE,IACDqD,EAASjE,GAAO4B,IAAM,QAKZ,iBAAbhB,IAA0C,IAAV4D,EACjC/F,EAAKuD,2BAA2ByC,EAAYH,EAAS5D,EAAU,aAE/Db,EAAcoE,IAEf,KACH,MAAOlC,GACP,OAAO,IApTTpD,KAAK5B,MAAQ,CACXiI,gBAAgB,EAChBC,eAAgB,iBAChBnF,WAAYnB,KAAK/B,MAAMkD,WACvBoF,SAAU,EACVpB,KAAM,EACNqB,cAAe,GAEjBxG,KAAKqD,2BAA6BrD,KAAKqD,2BAA2BoD,KAAKzG,MACvEA,KAAK0F,kBAAoB1F,KAAK0F,kBAAkBe,KAAKzG,MA+SvD0G,SACE,MAAM,QACJxH,EAAO,WACPyH,EAAU,WACVxH,EAAU,cACVyH,EAAa,aACbC,EAAY,eACZC,EAAc,SACdC,GAAW,EAAI,eACfC,EAAiB,GAAE,YACnB/E,EAAW,WACXd,GACEnB,KAAK/B,MACT,IAAI,eAAEoI,EAAc,KAAGlB,GAASnF,KAAK5B,MAGjC2C,EAAoB,GACpBC,EAAoB,GACpBC,EAAoB,GACH,IAADgG,EAAhBD,IACsB,OAAdA,QAAc,IAAdA,GAAoB,QAANC,EAAdD,EAAgB5H,YAAI,IAAA6H,GAApBA,EAAsBC,IAAKC,IACnCpG,EAAkBlC,KAAKsI,EAAEC,MACzBpG,EAAkBnC,KAAKsI,EAAE3F,IACzBP,EAAkBpC,KAAKsI,EAAEE,SAK7B,IAAIC,EACFV,EAAcM,IAAK9H,GAASA,EAAKmI,MAAM/B,gBAAkB,GACvDgC,EAAgBZ,EAAcM,IAAK9H,GAASA,EAAKwB,QAAU,GAC3D6G,EAAyBZ,EAEzBA,EAAaK,IAAK9H,GAASA,EAAKmI,MAAM/B,eADtC,GAEAkC,EAAyBb,EAEzBA,EAAaK,IAAK9H,GAASA,EAAKwB,OADhC,GAEJ,MAAM+G,EAAYzI,EAAQgI,IAAI,CAAC9H,EAAMiC,KACnCjC,EAAKwI,UAAY,CAACtE,EAAUpD,EAAKW,EAAQgH,KACvC,IAAItE,EAAMnE,EAAK0I,UACXC,EAAYxE,EAAM,SAClByE,EAAYzE,EAAM,SAClB0E,GAAO,EACPC,EAAS,KACTnG,EAAW,MAAQ7B,EAAQ,GAAI,IAAMqD,EAEV,CAAC,eAAgB,OACnB4E,SAAS5E,IAAqB,iBAAbtB,GAC5CjC,KAAKqD,2BAA2BC,EAAUpD,EAAK6B,EAAUwB,GACzD0E,GAAO,GACO,gBAAP1E,IACPvD,KAAK8B,cAAcwB,EAAUpD,EAAIsB,GAAIO,EAAUwB,GAC/C0E,GAAO,GAGE,aAAP1E,IACFvD,KAAK0F,kBAAkBpC,EAAUpD,EAAIsB,GAAIO,EAAUwB,EAAKrD,GACxD+H,GAAO,GAGT,IAAIG,EAAY,CAAC,QAAS,cAiC1B,GAhCW,YAAP7E,GAA+C,SAA1BvD,KAAK/B,MAAMgE,YAC7BmG,EAAUD,SAAS7E,EAASkC,gBAK/BtF,EAAkB,aAAIoD,EACtBpD,EAAiB,YAAI,OALrBgI,EAAS,uBACTG,GAAY,EACZJ,GAAO,GAKO,YAAP1E,IACJ6E,EAAUD,SAAS7E,EAASkC,gBAiB/BtF,EAAkB,aAAIoD,EACtBpD,EAAiB,YAAI,MAhBjBoI,SAAShF,IAEX2E,GAAO,EACPjI,KAAK0F,kBAAkBpC,EAAUpD,EAAIsB,GAAIO,EAAUwB,IAC9B,IAAZD,GACTpD,EAAkB,aAAI,KACtBA,EAAiB,YAAI,KACrB+H,GAAO,IAGPC,EAAS,kBACTG,GAAY,EACZJ,GAAO,IAQF,gBAAP1E,GAAyBmE,EAAsBhI,OAAS,EAC1D,GAAK+H,EAAsBU,SAAS7E,EAASkC,eAGtC,CACL,IAAI/D,EAAIgG,EAAsB/F,QAAQ4B,EAASkC,eAC/CtF,EAAsB,iBAAIwH,EAAsBjG,GAChDwG,GAAO,EACPjI,KAAKyF,qBAAqBnC,EAAUpD,EAAIsB,GAAIO,QAN5CkG,GAAO,EACPC,EAAM,0BAgDV,GAvCW,kBAAP3E,GACFvD,KAAKqF,uBAAuB/B,EAAUpD,EAAIsB,GAAIO,GAGrC,aAAPwB,IACGxC,EAAkBoH,SAAS7E,IAI9B2E,GAAO,EACPjI,KAAKW,oBACH2C,EACA,gBACA,gBACApD,EAAIsB,GACJT,EACAC,EACAC,KAXFgH,GAAO,EACPC,EAAM,wBAcC,wBAAP3E,IACGxC,EAAkBoH,SAAS7E,IAI9B2E,GAAO,EACPjI,KAAKW,oBACH2C,EACA,2BACA,2BACApD,EAAIsB,GACJT,EACAC,EACAC,KAXFgH,GAAO,EACPC,EAAM,wBAeC,YAAP3E,GAA4B,uBAAPA,EACvB,GAAK+D,EAAca,SAAS7E,EAASkC,eAG9B,CACL,IAAI/D,EAAI6F,EAAc5F,QAAQ4B,EAASkC,eAC5B,uBAAPjC,EACFrD,EAAqB,gBAAIsH,EAAc/F,GAEvCvB,EAAgB,WAAIsH,EAAc/F,GAEpCwG,GAAO,OATPA,GAAO,EACPC,EAAM,2BAYV,GAAW,WAAP3E,EAAkB,EACGgF,MAAMjF,GAK3B2E,GAAO,GAHPA,GAAO,EACPC,EAAM,2BAOV,IAAIG,EAAY,KAEdA,EADe,UAAbjJ,EAAKC,OACKkJ,MAAMjF,IAIF,IAAd+E,IACFH,EAAM,GAAA3H,OAAMnB,EAAKoJ,KAAI,iBAAAjI,OAAgBnB,EAAKC,OAIjC,gBAAPkE,GAAwC,iBAAftB,GACxBsG,MAAMjF,KACP+E,GAAY,EACZH,EAAM,GAAA3H,OAAMnB,EAAKoJ,KAAI,uBACrBP,GAAO,GA2BX,GAtBc,CACZ,QACA,iBACA,gBACA,cACA,SACA,cAGUE,SAAS5E,IAAqB,KAAbD,GAC3B4E,EAAS,GACTG,GAAY,EACZJ,GAAO,GACS,SAAP1E,IACJ6E,EAAUD,SAAS7E,EAASkC,iBAC/B0C,EAAS,uBACTG,GAAY,EACZJ,GAAO,IAKA,iBAAP1E,GAAiC,eAAPA,EAAsB,CACvB,CAAC,EAAG,EAAG,EAAG,GAEd4E,SAASG,SAAShF,KAC3B,IAAZA,GAEA+E,GAAY,EACZJ,GAAO,EACPC,EAAS,GACO,IAAZ5E,IACFA,EAAW,MAGb+E,GAAY,EACZJ,GAAO,EACPC,EAAS,4BAKb,GAAiB,aAAb9I,EAAKC,KAAqB,CAE5B,IAAIoJ,EAAa,6DACbnF,EAASoF,MAAMD,IAGI,IAAZnF,GAFT+E,GAAY,EACZJ,GAAO,IAKPC,EAAM,mCACNG,GAAY,EACZJ,GAAO,GAMX,GADA/H,EAAI8H,GAAaE,EACbD,GAAQI,EAAW,CACJ,CAAC,eAAgB,aAClBF,SAAS5E,KAEvBrD,EAAI6H,IAAa,EACjBjB,KAIJ,MAAO,CACL6B,SAAOV,IAAQI,GACfrD,QAASkD,IAIb9I,EAAKwJ,UAAY,CAACC,EAAM3I,EAAKmB,KAC3B,IAAIkC,EAAMnE,EAAK0I,UACXC,EAAYxE,EAAM,SAClByE,EAAYzE,EAAM,SAClB0E,GAAO,EACPlG,EAAW,MAAQ7B,EAAQ,GAAI,IAAMqD,EACrCuF,EAAM5I,EAAI8H,GAId,OAAuB,IAAnB9H,EAAI6H,IACN1B,GAAiB,EACjB4B,GAAO,EAELnJ,IAAAC,cAAA,OAAKyC,GAAIO,EAAU/C,UAAU,sBAC1B6J,EACD/J,IAAAC,cAAA,QAAMyC,GAAIO,EAAW,OAAQ/C,UAAU,eACpC8J,KASS,iBAAb7G,IAAsD,IAArB/B,EAAe,WACnDmG,GAAiB,EACjB4B,GAAO,EAELnJ,IAAAC,cAAA,OAAKyC,GAAIO,EAAU/C,UAAU,sBAC1B6J,EACD/J,IAAAC,cAAA,QAAMyC,GAAIO,EAAW,OAAQ/C,UAAU,eACpCkB,EAAe,aAUtBpB,IAAAC,cAAA,OAAKyC,GAAIO,EAAU/C,UAAU,gCAC1B6J,EACD/J,IAAAC,cAAA,QAAMyC,GAAIO,EAAW,OAAQ/C,UAAU,eACpC8J,KAKF1J,IAGH2J,EAAa,CAEjBC,SAAUhJ,KAAKgJ,SAEfC,UAAWA,CAACC,EAAOrI,IACZqI,EACc,QAAVA,EACApK,IAAAC,cAAA,KAAGC,UAAU,+BACH,SAAVkK,EACApK,IAAAC,cAAA,KAAGC,UAAU,kCACf,KALYF,IAAAC,cAAA,KAAGC,UAAU,iCAUpC,OAFA2C,QAAQC,QACRD,QAAQwH,IAAIhI,GAEVrC,IAAAC,cAACqK,IAAK,CAACpK,UAAU,oBACfF,IAAAC,cAACsK,IAAc,CACbC,SAAS,KACTlK,KAAM+B,EACNjC,QAASyI,EACT4B,KAAMR,EACNS,QAASrK,GAAc,KACvBsK,UACe,IAAb1C,EACI2C,IAAgB,CACdC,KAAM,QACNC,YAAY,EACZC,gBAAiBA,IAAM7J,KAAK/B,MAAM6L,eAAiB,KAErD,KAENC,UAAU,EACVpD,WAAYA,EACZpD,IAAK4B,MAOf,MAAMlG,UAAoBH,IAAMc,UAC9B8G,SACE,MAAM,QAAExH,EAAO,WAAEC,EAAU,KAAEC,GAASY,KAAK/B,MAErC0J,EAAYzI,EAAQgI,IAAI,CAAC9H,EAAMiC,KACnCjC,EAAKwJ,UAAY,CAACC,EAAM3I,EAAKmB,KAC3B,IAAIkC,EAAMnE,EAAK0I,UACf,MAAW,gBAAPvE,GAAiD,WAAxBrD,EAAkB,aAE3CpB,IAAAC,cAAA,OAAKC,UAAU,sBACZ6J,EACD/J,IAAAC,cAAA,QAAMC,UAAU,eAAekB,EAAwB,qBAG3C,gBAAPqD,GAAiD,YAAxBrD,EAAkB,aAElDpB,IAAAC,cAAA,OAAKC,UAAU,SACZ6J,EACD/J,IAAAC,cAAA,cAMJD,IAAAC,cAAA,WACG8J,EACD/J,IAAAC,cAAA,eAICK,IAGH2J,EAAa,CAEjBC,SAAUhJ,KAAKgJ,SAEfC,UAAWA,CAACC,EAAOrI,IACZqI,EACc,QAAVA,EACApK,IAAAC,cAAA,KAAGC,UAAU,+BACH,SAAVkK,EACApK,IAAAC,cAAA,KAAGC,UAAU,kCACf,KALYF,IAAAC,cAAA,KAAGC,UAAU,iCASpC,OACEF,IAAAC,cAACqK,IAAK,CAACpK,UAAU,oBACfF,IAAAC,cAACsK,IAAc,CACbC,SAAS,KACTlK,KAAMA,EACNF,QAASyI,EACT4B,KAAMR,EACNS,QAASrK,GAAc,KACvB4K,UAAU,Q","file":"static/js/71.c84ec14d.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { TableResult } from \"Component/BootstrapTable\";\nimport \"../index.scss\";\n\nconst Result = (props) => {\n\n  //selector\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const selectorCsvDataResult = useSelector((state) => state.csvDataResult);\n  const selectorCsvFieldResult = useSelector((state) => state.csvFieldResult);\n\n  useEffect(() => { }, [selectorCsvDataResult]);\n\n\n  if (selectorCsvDataResult === undefined || selectorCsvDataResult === null) {\n    props.history.push(\"/inventory-entry/waste/CSV-upload\");\n    return 0;\n  }\n\n  return (\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\n\n      <TableResult\n        columns={selectorCsvFieldResult}\n        tableClass=\"reviewTable\"\n        data={selectorCsvDataResult}\n      />\n\n      <div className=\"row pt-3\">\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-3 mr-3 text no-shadow\"\n            style={{ backgroundColor: \"#fff\" }}\n            onClick={() => props.history.push(\"/inventory-entry/waste/CSV-upload\")}\n          >\n            Upload Another File\n          </button>\n        </div>\n\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\n          Review your imported file: {selectorCsvFileName} (\n          {selectorCsvDataResult.length || 0} Lines)\n        </div>\n      </div>\n\n    </div>\n  );\n};\n\nexport default withRouter(Result);\n","import React from \"react\";\nimport { CCard } from \"@coreui/react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"./bootstrapTable-style.scss\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport axios from \"axios\";\n\n//cell editable\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\n\nclass TableEditable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validateStatus: false,\n      validateResult: \"Please Wait...\",\n      globalData: this.props.globalData,\n      rowCount: 0,\n      keyy: 0,\n      triggerRender: 0\n    };  \n    this.validatePOSKUStockTransfer = this.validatePOSKUStockTransfer.bind(this);\n    this.validateSKUNumber = this.validateSKUNumber.bind(this);\n    \n  } \n  changeOutboundReason = (row) => {\n    setTimeout(() => {\n      let elem = document.getElementById(`row${row}-outboundReason`);\n      elem.classList.add(\"red\", \"tooltip-custom\");\n      elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\n    }, 300);\n  }\n\n  changeWarehouseUuid = (\n    value,\n    column,\n    columnName,\n    row,\n    warehouseCodeList,\n    warehouseUuidList,\n    warehouseNameList\n  ) => {\n    const { setCsvDataTmp, globalData } = this.props;\n    let tmpdata = globalData;\n    var index = tmpdata.findIndex((obj) => obj.id == row);\n    let i = warehouseCodeList.indexOf(value);\n    tmpdata[index][column] = warehouseUuidList[i];\n    tmpdata[index][columnName] = warehouseNameList[i];\n\n    console.clear() \n    setTimeout(async () => {\n      setCsvDataTmp(tmpdata);\n    }, 400);\n  };\n\n  validatePOSKU = async (id, row, idColumn) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;\n    if(transaction==\"additional_inbound\"){\n      return;\n    }\n\n    let tmpdata = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/stocktake/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        elem.classList.add(\"red\");\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          var index = tmpdata.findIndex((obj) => obj.id == row);\n          if (data[0] && data[0].isExist === true) {\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\n            tmpdata[index].wmsPoSkuCodeStatus = true;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = data[0].expiryDate;\n            tmpdata[index].inboundDate = data[0].inboundDate;\n            tmpdata[index].supplierName = data[0].supplierName;\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\n            tmpdata[index].uom = data[0].uom;\n            tmpdata[index].photos = data[0].photos;\n            elem.classList.remove(\"red\");\n            elem.classList.add(\"hiddenTooltip\");\n          } else {\n            tmpdata[index].wmsPoSkuCodeStatus = false;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = \"\";\n            tmpdata[index].inboundDate = \"\";\n            tmpdata[index].supplierName = \"\";\n            tmpdata[index].supplierUuid = \"\";\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\n          }\n          setCsvDataTmp(tmpdata);\n        });\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validatePOSKUStockTransfer = async (newValue, row, idColumn, key) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;  \n    let tmpdata = globalData;\n    \n    var index = tmpdata.findIndex((obj) => obj.id == row.id); \n    // console.log(tmpdata)\n    // console.log(row.id, row)\n    // console.log(index)\n\n    try {\n      const url = \"/stocktransfer/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      let payloadPO = [{\n        \"id\": row.id,\n        \"poSkuCode\": key==\"wmsPoSkuCode\" ? newValue : (row.poSkuCode?row.poSkuCode:\"\"),\n        \"skuNumber\": key==\"skuNumber\"? newValue?.skuNumber: row.skuNumber,\n        \"skuUuid\": key==\"skuNumber\"? newValue?.skuUuid:row.skuUuid,\n        \"warehouseSource\": row.warehouseSource,\n        \"areaSource\": row.areaSource,\n        \"weight\": key==\"qty\"?newValue:row.qty\n      }]; \n\n      setTimeout(async () => {\n        //setvalidate false\n        setIsValidate(false);\n\n        //elemen column\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        // elem.classList.remove(\"hiddenTooltip\");\n        // elem.classList.add(\"red\");  \n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: payloadPO },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          if (data[0]) {\n            if(data[0].isExist === true && data[0].isValid === true){\n              tmpdata[index]['rowStatus'] = true;\n              tmpdata[index]['rowReason'] = \"\";\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }else{\n              tmpdata[index]['rowStatus'] = false;\n              tmpdata[index]['rowReason'] = data[0]?.errorMessage;\n            }\n            tmpdata[index]['wmsPoSkuCode'] = data[0]?.wmsPoSkuCode ;\n            tmpdata[index]['wmsPoSkuCodeStatus'] = data[0]?.isExist && data[0]?.isValid;\n            tmpdata[index]['wmsPoSkuCodeReason'] = data[0]?.errorMessage;\n            tmpdata[index]['expiryDate'] = data[0]?.expiryDate;\n            tmpdata[index]['inboundDate'] = data[0]?.inboundDate;\n            tmpdata[index]['supplierName'] = data[0]?.supplierName;\n            tmpdata[index]['supplierUuid'] = data[0]?.supplierUuid;\n            tmpdata[index]['uom'] = data[0]?.uom;\n            tmpdata[index]['photos'] = data[0]?.photos;\n          } else {\n            tmpdata[index]['wmsPoSkuCodeStatus'] = false;\n            tmpdata[index]['wmsPoSkuCodeReason'] = response?.data?.message;\n            tmpdata[index]['expiryDate'] = \"\";\n            tmpdata[index]['inboundDate'] = \"\";\n            tmpdata[index]['supplierName'] = \"\";\n            tmpdata[index]['supplierUuid'] = \"\";\n            tmpdata[index]['rowStatus'] = false;\n            tmpdata[index]['rowReason'] = response?.data?.message;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = response?.data?.message;\n          } \n\n          if(key==\"skuNumber\"){ \n            tmpdata[index][\"skuNumber\"] = newValue.skuNumber;\n            tmpdata[index][\"skuNumberReason\"] = newValue.skuDescription;\n            tmpdata[index][\"skuNumberStatus\"] = true;\n            tmpdata[index][\"skuUuid\"] = newValue.skuUuid;\n          }\n          setCsvDataTmp(tmpdata); \n        }); \n        let tmpKey = this.state.keyy + 1; \n        this.setState({keyy: tmpKey}); \n      }, 500);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validateOutbountReason = (value, row, idColumn) => {\n    const { globalData } = this.props;\n    let tmp_data = globalData;\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\n      this.changeOutboundReason(row)\n    }\n  };\n\n  validateOutbountType = (value, row, idColumn) => {\n    const { globalData, setIsValidate } = this.props;\n    let tmp_data = globalData;\n    setIsValidate(false);\n    if (value.toUpperCase() !== \"LAINNYA\") {\n      setIsValidate(true);\n      return 0;\n    }\n\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (datax[\"outboundReason\"] == \"\") {\n      this.changeOutboundReason(row);\n    }\n  };\n\n  validateSKUNumber = async (id, row, idColumn, key, rowData = null) => {\n    const { globalData, setCsvDataTmp, setIsValidate,transaction } = this.props;\n    let tmp_data = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/oss/skuByNumbers\";\n      let elem = null;\n      let elemspan = null;\n      \n      // for validating stock transfer\n      let stats = false;\n      let newSkuData = {} \n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { skuList: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          let isSuccess = response.data.isSuccess;\n          var index = tmp_data.findIndex((obj) => obj.id == row);\n          if (isSuccess === true && data.length > 0) {\n            stats = true;\n            tmp_data[index][key] = data[0].skuNumber;\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\n            tmp_data[index][key + \"Status\"] = true;\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\n            newSkuData = {\n              skuUuid: data[0].id,\n              skuNumber: data[0].skuNumber,\n              skuDescription: data[0].skuDescription,\n              photo: data[0].photo\n            }\n\n            //custom\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = data[0].id;\n              tmp_data[index].photo = data[0].imageMd;\n            }\n\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = data[0].uom;\n            }\n            \n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = data[0].uom;\n            }\n\n            \n            if(transaction!==\"stockTransfer\"){\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }\n\n          } else {\n            stats = false;\n            tmp_data[index][key] = id;\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\n            tmp_data[index][key + \"Status\"] = false;\n            tmp_data[index][key + \"Uuid\"] = null;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"SKU Number Not Found\";\n\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = \"\";\n              tmp_data[index].photo = \"\";\n            }\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = null;\n            }\n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = \"\";\n            }\n          } \n        });\n\n        if(transaction==\"stockTransfer\" && stats === true){ \n          this.validatePOSKUStockTransfer(newSkuData, rowData, idColumn, 'skuNumber')\n        }else{\n          setCsvDataTmp(tmp_data);\n        }\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  render() {\n    const {\n      columns,\n      hiddenRows,\n      tableClass,\n      warehouseArea,\n      outboundType,\n      setCheckingCsv, \n      editable = true,\n      warehousesData = [],\n      transaction,\n      globalData\n    } = this.props;\n    let { validateStatus,  keyy } = this.state;\n    \n    //wh\n    let warehouseCodeList = [];\n    let warehouseUuidList = [];\n    let warehouseNameList = [];\n    if (warehousesData) {\n      let tmp = warehousesData?.data?.map((d) => {\n        warehouseCodeList.push(d.code);\n        warehouseUuidList.push(d.id);\n        warehouseNameList.push(d.name);\n      });\n    }\n\n    //wh area\n    let wh_area_label =\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\n    let wh_outboundtype_label = !outboundType\n      ? []\n      : outboundType.map((data) => data.label.toUpperCase());\n    let wh_outboundtype_value = !outboundType\n      ? []\n      : outboundType.map((data) => data.value);\n    const newFormat = columns.map((data, index) => {\n      data.validator = (newValue, row, column, done) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let reason = null;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n\n        let stockTransferColumnCheck = ['wmsPoSkuCode', 'qty']\n        if (stockTransferColumnCheck.includes(key) && transaction==\"stockTransfer\") {\n          this.validatePOSKUStockTransfer(newValue, row, idColumn, key);\n          stat = true;\n        }else if(key == \"wmsPoSkuCode\" ){\n          this.validatePOSKU(newValue, row.id, idColumn, key);\n          stat = true; \n        }\n\n        if (key == \"skuNumber\") {\n          this.validateSKUNumber(newValue, row.id, idColumn, key, row);\n          stat = true;\n        }\n\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type not found\";\n            checkType = false;\n            stat = false;\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        } else if (key == \"newGrade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            //if not waste or semi waste\n            if (parseInt(newValue)) {\n              //if number\n              stat = true;\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\n            } else if (newValue == \"\") {\n              row[\"newGradeUuid\"] = null;\n              row[\"newGradeUom\"] = null;\n              stat = true;\n            } else {\n              //if not number => undefined\n              reason = \"Grade Undefined\";\n              checkType = false;\n              stat = false;\n            }\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        }\n\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Outbound Type Not Found`;\n          } else {\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\n            stat = true;\n            this.validateOutbountType(newValue, row.id, idColumn);\n          }\n        }\n\n        if (key == \"outboundReason\") {\n          this.validateOutbountReason(newValue, row.id, idColumn);\n        }\n\n        if (key == \"warehouse\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseUuid\",\n              \"warehouseName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          }\n        }\n        if (key == \"warehouseDestination\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseDestinationUuid\",\n              \"warehouseDestinationName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          } \n        }\n\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Warehouse Area Not Found`;\n          } else {\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\n            if (key == \"areaNameDestination\") {\n              row[\"areaDestination\"] = wh_area_value[i];\n            } else {\n              row[\"areaSource\"] = wh_area_value[i];\n            }\n            stat = true;\n          }\n        }\n\n        if (key == \"newPack\") {\n          let checkTypenewPack = isNaN(newValue) ? false : true;\n          if (!checkTypenewPack) {\n            stat = false;\n            reason = `Pack Should be a number`;\n          } else {\n            stat = true;\n          }\n        } \n        \n\n        let checkType = null;\n        if (data.type == \"number\") {\n          checkType = isNaN(newValue) ? false : true;\n        } else {\n          checkType = true;\n        }\n        if (checkType === false) {\n          reason = `${data.text} Should be a ${data.type}`;\n        } \n\n        \n        if (key == \"wmsPoSkuCode\" && transaction == \"stockTransfer\") {\n          if(isNaN(newValue)){\n            checkType = false;\n            reason = `${data.text} Should be a number`;\n            stat = false;\n          } \n        } \n\n        //some field can null\n        let canNull = [\n          \"grade\",\n          \"outboundReason\",\n          \"ripenessLevel\",\n          \"newRipeness\",\n          \"reason\",\n          \"expiryDate\"\n        ]; \n\n        if (canNull.includes(key) && newValue === \"\") {\n          reason = \"\";\n          checkType = true;\n          stat = true;\n        } else if (key == \"grade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type Not Found\";\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //check ripenesslevel\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\n          let allowedRipenessLevel = [0, 1, 2, 3];\n          if (\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\n            newValue == \"\"\n          ) {\n            checkType = true;\n            stat = true;\n            reason = \"\";\n            if (newValue == \"\") {\n              newValue = \"\";\n            }\n          } else {\n            checkType = false;\n            stat = false;\n            reason = \"Undefined Ripeness Level\";\n          }\n        }\n\n        //check date\n        if (data.type == \"date_indo\") {\n          //checking date\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\n          if (newValue.match(regex_date)) {\n            checkType = true;\n            stat = true;\n          } else if (newValue == \"\") {\n            checkType = true;\n            stat = true;\n          } else {\n            reason = `Date format must be 'dd-mm-yyyy'`;\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //set notif\n        row[keyReason] = reason;\n        if (stat && checkType) {\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\n          if (!specialKey.includes(key)) {\n            //some key have their own checking, so if not in array do checking error\n            row[keyStatus] = true;\n            setCheckingCsv();\n          }\n        } \n         \n        return {\n          valid: stat && checkType ? true : false,\n          message: reason,\n        };\n      };\n\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n        let txt = row[keyReason];\n        \n        // if status column = false\n        // that mean there's error or not valid data in some column\n        if (row[keyStatus] === false) {\n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {txt}\n              </span>\n            </div>\n          );\n        }\n\n        // if global row status = false\n        // that mean there's wmsposkucode validation error, and makes 1 line become red colour\n        // for now is only for stock transfer  \n        if ( transaction==\"stockTransfer\" &&  row['rowStatus'] === false) { \n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {row['rowReason']}\n              </span>\n            </div>\n          );\n        }\n\n        \n        // if status column = true\n        // No problem \n        return (\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\n            {cell}\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\n              {txt}\n            </span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n    console.clear();  \n    console.log(globalData)\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={globalData}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          cellEdit={\n            editable === true\n              ? cellEditFactory({\n                  mode: \"click\",\n                  blurToSave: true,\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\n                })\n              : null\n          }\n          bordered={false}\n          hiddenRows={hiddenRows}\n          key={keyy}\n        />\n      </CCard>\n    );\n  }\n}\n\nclass TableResult extends React.Component {\n  render() {\n    const { columns, tableClass, data } = this.props;\n\n    const newFormat = columns.map((data, index) => {\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\n          return (\n            <div className=\"tooltip-custom red\">\n              {cell}\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\n            </div>\n          );\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\n          return (\n            <div className=\"green\">\n              {cell}\n              <span></span>\n            </div>\n          );\n        }\n\n        return (\n          <div>\n            {cell}\n            <span></span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={data}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          bordered={false}\n        />\n      </CCard>\n    );\n  }\n}\n\nexport { TableResult, TableEditable };\n"],"sourceRoot":""}