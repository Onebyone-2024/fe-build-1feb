{"version":3,"sources":["Page/StockEntry/Repacking/UploadTargetRepack/Review.jsx","Page/StockEntry/Repacking/UploadTargetRepack/services.js","Component/Modal/PopUp/index.jsx","Component/Modal/PopUp/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/BootstrapTable/index.jsx"],"names":["withRouter","props","dispatch","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","csvData","selectorCsvField","csvField","selectorWarehouseArea","warehouseAreaCsv","selectorStatus","status","warehousesData","warehouseData","isShowModal","setIsShowModal","React","useState","isHiddenRows","setIsHiddenRows","isShowErrorOnly","setIsShowErrorOnly","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","setCheckingCsv","submitStatus","setSubmitStatus","title","setTitle","msg1","setMsg1","msg2","setMsg2","cancelButtonTitle","setCancelButtonTitle","actionButtonTitle","setActionButtonTitle","isSubmitText","setIsSubmitText","actionButtonClass","setActionButtonClass","colourTitle","setColourTitle","newCsvData","setNewCsvData","rowDouble","setRowDouble","console","log","useEffect","_ref4","undefined","stats","map","data","index","dataField","indexField","toUpperCase","checking_error","_ref6","skuNumberArray","skuData","csvDataValidated","idx","includes","skuNumber","push","objName","dataArraySku","pushData","d","i","deliveryDate","slot","warehouse","id","warehouseStatus","deliveryDateStatus","slotStatus","skuNumberStatus","warehouseReason","deliveryDateReason","slotReason","skuNumberReason","tmp","validasiDouble","history","setCsvDataTmp","param","_ref3","type","STOK_TAKE_UPLOAD_JSON","setCsvData","_ref","tmp_arr_false","tmp_arr_true","stat","dataColumn","indexColumn","key","ret","filter","x","length","showErrorsOnly","createElement","className","TableEditable","globalData","columns","tableClass","hiddenRows","warehouseArea","dataDoubleRow","style","lineHeight","onClick","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","cancelButtonClass","actionButtonEvent","ModalsCaptcha","submit","async","_ref5","submitText","show","refresh","icon","setIsSuccess","code","message","setShow","window","onkeydown","e","keyCode","CRow","concat","CCol","CModal","closeOnBackdrop","onClose","success","name","STATUS","size","minHeight","bodyOpenClassName","CModalHeader","CModalTitle","CModalBody","CModalFooter","CButton","_ref2","location","reload","refreshPage","parentOncCloseFunction","next","isCaptcha","setIsValidated","setIsType","isType","isValidated","type_","document","getElementById","parseInt","focus","value","setSelectionRange","split","ModalsConfirmation","_module$jobPost","_module$jobPost2","_module$jobPost3","moduleEntry","confirmation","setConfirmation","save","isSuccess","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","module","areaDestinationName","jobPost","warehouseDestinationName","areaName","skuListUpdate","skuListUpdateCheck","newModule","list","poList","po","itemList","item","_item$wasteType","_item$wasteType2","_item$wasteType3","_item$wasteType4","_item$wasteType5","_item$wasteType6","qty","grade","_qty","isInteger","parseFloat","_sku","skuName","wasteType","label","_toWaste","_uom","unitOfMeassures","uom","newSku","sku","wqty","swqty","isExist","findIndex","_item$wasteType7","_item$wasteType8","s","forEach","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","text","characters","charactersLength","text_split","r","charAt","Math","floor","random","setIsCaptcha","isCaptchaText","setIsCaptchaText","autocomplete","onKeyUp","textTransform","maxLength","placeholder","Component","constructor","_this","super","this","changeOutboundReason","row","setTimeout","elem","classList","add","innerHTML","changeWarehouseUuid","column","columnName","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","obj","indexOf","clear","validatePOSKU","idColumn","transaction","url","elemspan","axios","method","then","response","_response$data","wmsPoSkuCode","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","expiryDate","inboundDate","supplierName","supplierUuid","photos","remove","error","validatePOSKUStockTransfer","newValue","payloadPO","poSkuCode","skuUuid","warehouseSource","areaSource","_response$data2","_data$2","_data$3","_data$4","_data$5","_data$6","_data$7","_data$8","_data$9","_data$10","_data$11","_data$","isValid","errorMessage","_response$data3","_response$data4","_response$data5","skuDescription","tmpKey","keyy","setState","validateOutbountReason","tmp_data","datax","validateOutbountType","validateSKUNumber","rowData","arguments","newSkuData","skuList","_response$data6","photo","imageMd","newGradeUom","validateStatus","validateResult","rowCount","triggerRender","bind","render","outboundType","editable","_warehousesData$data","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","done","keyStatus","keyReason","reason","arr_grade","checkType","isNaN","regex_date","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","CCard","BootstrapTable","keyField","sort","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","bordered","TableResult"],"mappings":"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","file":"static/js/49.4c487021.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { TableEditable } from \"Component/BootstrapTable\";\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\nimport \"../index.scss\";\nimport {\n  showErrorsOnly,\n  deleteErrorsField,\n  setCsvData,\n  submit,\n  checking_error,\n  validasiDouble,\n} from \"./services.js\";\nimport PopUp from \"Component/Modal/PopUp\";\n\nconst Upload = (props) => {\n  const dispatch = useDispatch();\n\n  //selector\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const selectorCsvData = useSelector((state) => state.csvData);\n  const selectorCsvField = useSelector((state) => state.csvField);\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\n  const selectorStatus = useSelector((state) => state.status); //wh\n  const warehousesData = useSelector((state) => state.warehouseData);\n\n  //state\n  const [isShowModal, setIsShowModal] = React.useState(false);\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\n  const [isValidate, setIsValidate] = React.useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\n  const [submitStatus, setSubmitStatus] = React.useState(false);\n\n  const [title, setTitle] = React.useState(null);\n  const [msg1, setMsg1] = React.useState(null);\n  const [msg2, setMsg2] = React.useState(null);\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\n  const [colourTitle, setColourTitle] = React.useState(null);\n  const [newCsvData, setNewCsvData] = React.useState([]);\n  const [rowDouble, setRowDouble] = React.useState([]);\n  console.log(\"rowwsss\", rowDouble);\n  useEffect(() => {\n    // validasiDouble({ selectorCsvData, dispatch });\n    setCheckingCsv(false);\n    checking_error({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      setIsValidate,\n      setCheckingCsv,\n    });\n  }, [checkingCsv]);\n\n  useEffect(() => {\n    validasiDouble({\n      selectorCsvData,\n      dispatch,\n      setNewCsvData,\n      setRowDouble,\n    });\n  }, [selectorCsvData]);\n\n  useEffect(() => {\n    if (submitStatus == \"success\") {\n      setTitle(\"Success!\");\n      setMsg2(\"Would you import another file?\");\n      setCancelButtonTitle(\"Cancel\");\n      setActionButtonTitle(\"Import new file\");\n      setActionButtonClass(\"bg-green background\");\n      setColourTitle(\"green\");\n      setModalShow(true);\n    } else if (submitStatus == \"failed\") {\n      setColourTitle(\"red\");\n      setTitle(\"Failed!\");\n      setActionButtonClass(\"bg-red background\");\n      setMsg1(selectorCsvFileName + \" failed to upload\");\n      setMsg2(\"Do you want to retry?\");\n      setCancelButtonTitle(\"Cancel\");\n      setActionButtonTitle(\"Retry\");\n      setModalShow(true);\n    }\n  }, [submitStatus]);\n\n  if (selectorCsvData === undefined || selectorCsvData === null) {\n    props.history.push(\"/inventory-entry/repacking/upload-target-repack\");\n    return 0;\n  }\n\n  const setCsvDataTmp = (param) => {\n    setCsvData({ param, dispatch, setCheckingCsv });\n    showErrorsOnly({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      isShowErrorOnly: false,\n      setIsShowErrorOnly,\n      setIsHiddenRows,\n      setCheckingCsv,\n    });\n  };\n\n  // const newCsvData = validasiDouble({\n  //   selectorCsvData,\n  //   dispatch,\n  // });\n\n  return (\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\n      <TableEditable\n        globalData={newCsvData} //Required\n        columns={selectorCsvField} //Required\n        tableClass=\"reviewTable\"\n        hiddenRows={isHiddenRows}\n        warehouseArea={selectorWarehouseArea}\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\n        setIsValidate={(param) => setIsValidate(param)}\n        dispatch={dispatch}\n        setCheckingCsv={setCheckingCsv}\n        warehousesData={warehousesData}\n        dataDoubleRow={rowDouble}\n      />\n\n      <div className=\"row pt-3\">\n        <div className=\"col-4\">\n          \n        </div>\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\n          Review your imported file: {selectorCsvFileName} (\n          {selectorCsvData.length || 0} Lines)\n        </div>\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\n            onClick={() => props.history.goBack()}\n          >\n            Discard\n          </button>\n\n          <button\n            type=\"button\"\n            class={\n              \"btn px-5 mr-3 text-white no-shadow float-right bg-green\"\n            }\n            onClick={() => setIsShowModal(!isShowModal)}\n          >\n            Submit\n          </button>\n        </div>\n      </div>\n\n      <PopUp\n        status={selectorStatus}\n        onCloseFunction={() => {\n          setModalShow(false);\n          setSubmitStatus(false);\n          props.history.push(\"/inventory-entry/repacking\");\n        }}\n        statusDisplay={modalShow}\n        title={title}\n        cancelButtonTitle={cancelButtonTitle}\n        actionButtonTitle={actionButtonTitle}\n        colorText={colourTitle}\n        refreshOnCancel={false}\n        msg1={msg1}\n        msg2={msg2}\n        cancelButtonClass={null}\n        actionButtonClass={actionButtonClass + \" ml-0\"}\n        actionButtonEvent={() =>\n          props.history.push(\"/inventory-entry/repacking/upload-target-repack\")\n        }\n      />\n      <ModalsCaptcha\n        submit={() =>\n          submit({\n            dispatch,\n            csvData: selectorCsvData,\n            setIsShowModal,\n            setIsSubmitText,\n            setSubmitStatus,\n            setMsg1,\n          })\n        }\n        submitText={isSubmitText}\n        show={isShowModal}\n        setIsShowModal={setIsShowModal}\n      />\n    </div>\n  );\n};\n\nexport default withRouter(Upload);\n","//other\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\nimport { submitCsvTargetRepack } from \"apiServices\";\nimport moment from \"moment\";\n\nexport const showErrorsOnly = ({\n  csvData,\n  csvField,\n  isShowErrorOnly,\n  setIsShowErrorOnly,\n  setIsHiddenRows,\n  setCheckingCsv,\n}) => {\n  // ;\n  let tmp_arr_false = [];\n  let tmp_arr_true = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    let i = index + 1;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n\n    if (stat === false) {\n      if (!tmp_arr_false.includes(i)) {\n        tmp_arr_false.push(i);\n      }\n    } else {\n      if (!tmp_arr_true.includes(i)) {\n        tmp_arr_true.push(i);\n      }\n    }\n  });\n\n  //return array\n  let ret = [];\n  if (isShowErrorOnly === true) {\n    //true = delete all row\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\n    if (ret.length == csvData.length) {\n      return 0;\n    }\n  } else {\n    ret = [];\n  }\n  setIsHiddenRows(ret);\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\n  setCheckingCsv(true);\n};\n\nexport const deleteErrorsField = ({\n  csvData,\n  csvField,\n  dispatch,\n  setCheckingCsv,\n}) => {\n  let new_arr = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n    if (stat === true) {\n      new_arr.push(data);\n    }\n  });\n\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\n  setCheckingCsv(true);\n};\n\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\n  setCheckingCsv(true);\n};\n\nexport const checking_error = ({\n  csvData,\n  csvField,\n  setIsValidate,\n  setCheckingCsv,\n}) => {\n  if (csvData === undefined) {\n    return 0;\n  }\n\n  let stats = true;\n  csvData.map((data, index) => {\n    csvField.map((dataField, indexField) => {\n      // console.log(data[dataField + 'status']);\n      let status = data[dataField.dataField + \"Status\"];\n\n      //jika outbound type = lainya, maka harus isi outbound reason\n      if (dataField.dataField == \"outboundType\") {\n        let type = data[dataField.dataField].toUpperCase();\n        if (type == \"LAINNYA\") {\n          if (data[\"outboundReason\"] == \"\") {\n            status = false;\n          }\n        }\n      }\n\n      if (status === false) {\n        // console.log(data, dataField.dataField, data[dataField.dataField + 'Status']);\n        stats = false;\n      }\n    });\n  });\n  if (stats === false) {\n    setIsValidate(false);\n  } else {\n    setIsValidate(true);\n  }\n  setCheckingCsv(false);\n};\n\nconst setHeader = (csvData) => {\n  //get time - created at\n  let time = new Date().getTime();\n  let d = new Date(time);\n  let n = d.getMilliseconds();\n  let list_area = [];\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    //in outbound csv upload only check area source\n    if (!list_area.includes(data.areaSource)) {\n      return_data.push({\n        id: index,\n        warehouseSource: warehouse_source,\n        warehouseDestination: warehouse_source,\n        areaSource: data.areaSource,\n        areaDestination: data.areaSource,\n        list: [],\n        createdAt: n,\n      });\n      list_area.push(data.areaSource);\n    }\n  });\n  return return_data;\n};\n\nconst getSKU = (csvData) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.skuUuid == data.skuUuid &&\n        header.warehouseSource == data.warehouseSource &&\n        header.areaSource == data.areaSource\n      ) {\n        available = true;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        warehouseSource: warehouse_source,\n        areaSource: data.areaSource,\n        skuUuid: data.skuUuid,\n        skuNumber: data.skuNumber,\n        unitOfMeassures: data.uom,\n        photo: data.photos,\n        poList: [],\n      });\n    }\n  });\n  return return_data;\n};\n\nconst checkGrade = (value) => {\n  if (!value) {\n    return;\n  }\n\n  if (value.toUpperCase() == \"SEMI WASTE\") {\n    return \"semi_waste\";\n  } else if (value.toUpperCase() == \"WASTE\") {\n    return \"waste\";\n  } else {\n    return value;\n  }\n};\n\nconst groupingPO = (csvData, skuList) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    let header_index = \"\";\n\n    //cheking grade\n    let newGrade = checkGrade(data.newGradeUuid);\n    if (!newGrade) {\n      newGrade = data.skuUuid;\n    }\n    //end checking grade\n\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.areaSource == data.areaSource &&\n        header.warehouseSource == data.warehouseSource &&\n        header.skuUuid == data.skuUuid &&\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\n        header.ripenessLevel == data.ripenessLevel &&\n        header.expiryDateCol == data.expiryDateCol\n      ) {\n        available = true;\n        header_index = idx;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        skuUuid: data.skuUuid || \"\",\n        areaSource: data.areaSource || \"\",\n        warehouseSource: warehouse_source || \"\",\n        expiryDateCol: data.expiryDateCol || \"\",\n        expiryDate:\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n        inboundDate: data.inboundDate || \"\",\n        supplierId: data.supplierUuid || \"\",\n        supplierName: data.supplierName || \"\",\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\n        codeGrade: data.skuUuid || \"\",\n        ripenessLevel: data.ripenessLevel || 0,\n        itemList: [],\n      });\n      header_index = return_data.length - 1;\n    }\n    return_data[header_index].itemList.push({\n      qty: data.qty || 0,\n      areaSource: data.areaSource,\n      skuNumber: data.skuNumber,\n      ripeness: {\n        label: data.ripenessLevel || \"\",\n        value: data.ripenessLevel || 0,\n      },\n      expiryDate:\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n      expiryDateText: data.expiryDateCol,\n      grade: { label: data.newGrade, value: newGrade || data.skuUuid },\n      codeOutbound: {\n        label: data.outboundTypeCode || \"\",\n        value: data.outboundTypeCode || \"\",\n      },\n      note: data.reason || \"\",\n      areaName: data.areaName || \"\",\n      pack: data.inputPack || 0,\n      unitOfMeassures: data.uom || \"\",\n    });\n  });\n  return return_data;\n};\n\nconst setJobPost = (header, skuList, poGroup) => {\n  //insert PO to SKUList\n  skuList.map((skuListData, skuListIdx) => {\n    poGroup.map((poGroup, poGroupIndex) => {\n      if (\n        poGroup &&\n        poGroup.areaSource == skuListData.areaSource &&\n        poGroup.warehouseSource == skuListData.warehouseSource &&\n        poGroup.skuUuid == skuListData.skuUuid\n      ) {\n        skuList[skuListIdx][\"poList\"].push(poGroup);\n      }\n    });\n  });\n\n  //insert sku to Header\n  header.map((headerData, headerIdx) => {\n    skuList.map((skuListData, skuListDataIdx) => {\n      if (\n        poGroup &&\n        headerData.areaSource == skuListData.areaSource &&\n        headerData.warehouseSource == skuListData.warehouseSource\n      ) {\n        header[headerIdx][\"list\"].push(skuListData);\n      }\n    });\n  });\n\n  return header;\n};\n\nconst setResult = (result) => {\n  let arrayResult = [];\n  let i = 1;\n  result.jobPost.list.map((dataHeader, indexHeader) => {\n    dataHeader.poList.map((poHeader, indexPo) => {\n      poHeader.itemList.map((data, index) => {\n        let isStatus = \"Failed\";\n        if (data.isSuccess) {\n          isStatus = \"Success\";\n        }\n        arrayResult.push({\n          id: i,\n          uploadStatus: isStatus || \"\",\n          uploadStatusReason: data.message,\n          skuNumber: data.skuNumber || \"\",\n          ripenessLevel: data.ripeness?.label || \"\",\n          qty: data.qty || 0,\n          reason: data.note || \"\",\n          grade: poHeader.codeGrade || \"\",\n          newGrade: data.grade.label || \"\",\n          areaName: data.areaName || \"\",\n          inputPack: data.pack || 0,\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\n          expiryDateCol: data.expiryDateText || \"\",\n        });\n        i++;\n      });\n    });\n  });\n  return arrayResult;\n};\n\nexport const submit = async ({\n  csvData,\n  dispatch,\n  setIsSubmitText,\n  setSubmitStatus,\n  setMsg1,\n  setIsShowModal,\n}) => {\n  console.log(csvData);\n  setIsSubmitText(\"Loading...\");\n\n  // set body param\n  // const params = csvData?.map((d, i) => {\n  //   return {\n  //     warehouse: d.warehouseUuid,\n  //     skuUuid: d.skuUuid,\n  //     skuName: d.skuDescription,\n  //     targetDate: moment(d.deliveryDate, \"DD-MM-YYYY\").format(\"YYYY-MM-DD\"),\n  //     targetUos: parseFloat(d.uos),\n  //     targetUom: parseInt(d.uom),\n  //     slot: parseInt(d.slot),\n  //   };\n  // });\n\n  //submit\n  // let execute = await submitCsvTargetRepack({\n  //   data: params,\n  //   setSubmitStatus,\n  //   dispatch,\n  // });\n\n  setIsShowModal(false);\n  setIsSubmitText(\"Submit\");\n  setSubmitStatus(\"success\");\n\n  setMsg1(\"Success\");\n  \n};\n\nexport const validasiDouble = ({\n  selectorCsvData,\n  setNewCsvData,\n  setRowDouble,\n  dispatch,\n}) => {\n  let skuNumberArray = [];\n  let skuData = {};\n  let csvDataValidated = [];\n  let rowDouble = [];\n  const y = selectorCsvData?.map((data, idx) => {\n    if (!skuNumberArray.includes(data.skuNumber)) {\n      skuNumberArray.push(data.skuNumber);\n    }\n\n    let objName = \"sku_\" + data.skuNumber;\n    if (!skuData[objName]) {\n      let tmp = {\n        warehouse: data.warehouse,\n        deliveryDate: data.deliveryDate,\n        skuNumber: data.skuNumber,\n        slot: data.slot,\n      };\n      skuData[objName] = [tmp];\n    } else {\n      let dataArraySku = skuData[objName];\n      let pushData = true;\n      dataArraySku.map((d, i) => {\n        if (\n          d.deliveryDate == data.deliveryDate &&\n          d.skuNumber == data.skuNumber &&\n          d.slot == data.slot &&\n          d.warehouse == data.warehouse\n        ) {\n          //data sama, tidak di push\n          pushData = false;\n          rowDouble.push(data.id);\n\n          //set to red\n          data.warehouseStatus = false;\n          data.deliveryDateStatus = false;\n          data.slotStatus = false;\n          data.skuNumberStatus = false;\n          data.warehouseReason = \"Data Duplicated\";\n          data.deliveryDateReason = \"Data Duplicated\";\n          data.slotReason = \"Data Duplicated\";\n          data.skuNumberReason = \"Data Duplicated\";\n        }\n      });\n      if (pushData) {\n        let tmp = {\n          warehouse: data.warehouse,\n          deliveryDate: data.deliveryDate,\n          skuNumber: data.skuNumber,\n          slot: data.slot,\n        };\n        skuData[objName].push(tmp);\n      }\n    }\n\n    console.log(\"data\", data);\n    csvDataValidated.push(data);\n  });\n\n  console.log(csvDataValidated);\n  // setRowDouble([3]);\n  // dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: csvDataValidated });\n  // return { data: csvDataValidated, doubleRow: rowDouble };\n  setNewCsvData(csvDataValidated);\n  setRowDouble(rowDouble);\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { onClose, refreshPage } from \"./services.js\";\nimport { useDispatch } from \"react-redux\";\nimport { STATUS } from \"apiServices/action\";\n\nconst PopUp = ({\n  refresh,\n  status,\n  icon,\n  statusDisplay = false,\n  title = \"\",\n  cancelButtonTitle = \"Cancel\",\n  actionButtonTitle = \"Submit\",\n  cancelButtonClass = \"bg-background\",\n  actionButtonClass = \"bg-background\",\n  actionButtonEvent = null,\n  colorText = \"red\",\n  msg1 = null,\n  msg2 = null,\n  onCloseFunction = null,\n  refreshOnCancel = true,\n  setIsSuccess\n}) => {\n  const dispatch = useDispatch();\n  if (status?.code === 500 ) {\n    icon = \"em-pensive\"\n    title = \"Server Error\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = true;\n  }\n  if (status?.code === 408 ) {\n    icon = \"em-alarm_clock\"\n    title = \"Request Timeout\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = true;\n  }\n  if (status?.code === 400 ) {\n    icon = \"em-alarm_clock\"\n    title = \"Server Error\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = false;\n  }\n  if (status?.code === 404) {\n    title = \"Something wrong with the application\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = false;\n  }\n\n  const [show, setShow] = useState(statusDisplay);\n\n  useEffect(() => {\n    //from outside change\n    setShow(statusDisplay);\n  }, [statusDisplay]);\n\n  useEffect(() => {\n  }, [show]);\n\n  window.onkeydown = e => e.keyCode === 27 ? setShow(false) : null\n  return (\n    <CRow className={`${show ? null : \"d-none\"}`}>\n      <CCol>\n        <CModal\n          show={show}\n          closeOnBackdrop={false}\n          onClose={() => {\n            setShow(false)\n            if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\n            dispatch({ type: STATUS, status: null });\n            if (onCloseFunction) {\n              onCloseFunction()\n            }\n          }}\n          size=\"lg\"\n          style={{ minHeight: \"280px\" }}\n          bodyOpenClassName=\"p-3\"\n        >\n          {/* <div className='d-flex flex-row-reverse'>\n            <i className='pr-2 pt-2 iconU-modalClose' onClick={() => setShow(false)}></i>\n          </div>\n          <CModalHeader className=\"px-5 pt-3 border-none\">\n              <CModalTitle className={`text LatoBold ${colorText}`}>\n                {title}\n              </CModalTitle> */}\n\n          <div className=\"d-flex flex-row-reverse\">\n            <i\n              className=\"pr-3 pt-3 iconU-modalClose\"\n              onClick={() => {\n                setShow(false)\n                if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\n                dispatch({ type: STATUS, status: null });\n                if (onCloseFunction) {\n                  onCloseFunction()\n                }\n              }}\n            ></i>\n          </div>\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className={`text LatoBold ${colorText}`}>\n              {title} <span><i className={`em ${icon}`}></i></span>\n            </CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">{msg1}</p>\n            <p className=\"text\">{msg2}</p>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            {cancelButtonTitle ? (\n              <CButton\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\n                onClick={() => {\n                  if (refreshOnCancel) {\n                    if (typeof (refresh) === 'function') refresh()\n                    else refreshPage({ refresh: true });\n                  } else {\n                    onClose({\n                      setShow,\n                      parentOncCloseFunction: onCloseFunction,\n                    });\n                  }\n                  dispatch({ type: STATUS, status: null });\n                }}\n              >\n                {cancelButtonTitle}\n              </CButton>\n            ) : null}\n            {actionButtonTitle ? (\n              <CButton\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\n                onClick={() => {\n                  if (actionButtonEvent) {\n                    actionButtonEvent();\n                    setShow(false);\n                  } else {\n                    setShow(false)\n                  }\n                }\n                }\n              >\n                {actionButtonTitle}\n              </CButton>\n            ) : null}{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default PopUp;\n","export const onClose = ({ setShow, parentOncCloseFunction }) => {\n  setShow(false);\n  if (parentOncCloseFunction) {\n    parentOncCloseFunction();\n  }\n\n};\n\nexport const refreshPage = ({ refresh = true }) => {\n  if (refresh === true) {\n    window.location.reload(false);\n  }\n};\n","import { isInteger } from \"formik\";\n\nexport const next = ({\n  e,\n  state,\n  isCaptcha,\n  setIsValidated,\n  setIsType,\n  isType,\n  isValidated,\n  submit\n}) => {\n  const key = e.key; // const {key} = event; ES6+\n  let type = [...isType];\n\n  //if press enter\n  if (key === \"Enter\"){\n    if(isValidated){\n      submit();\n    }else{\n      return;\n    }\n  }\n\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\",\"Delete\"];\n  if (arr_tmp.includes(key)) {\n    return 0;\n  } else if (key === \"Backspace\") {\n    let type_ = [...isType];\n    let state_ = type_[state];\n    if (state_ == \"\" && state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\n      type_[state - 1] = \"\";\n      type[state - 1] = \"\";\n    } \n  } else if (key === \"ArrowLeft\") {\n    if (state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) - 1))\n        .setSelectionRange(-1, -1);\n\n      return 0;\n    }\n  } else if (key === \"ArrowRight\") {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) + 1))\n        .setSelectionRange(-1, -1);\n      return 0;\n    }\n  } else {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n    }\n  }\n\n  if (key === \"Backspace\") {\n    type[state] = \"\";\n  } else {\n    type[state] = key.toUpperCase();\n  }\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\n  let allowedChar = char.split(\"\");\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\n    setIsType(type);\n  } else {\n    return 0;\n  }\n\n  let stat = true;\n  isCaptcha.map((data, index) => {\n    // if (index == 0) {\n    //   return;\n    // }\n    if (!(type[index + 1] == isCaptcha[index])) {\n      stat = false;\n    } \n  });\n  setIsValidated(stat);\n};\n\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\n  if (module?.length) {\n    let newModule = [];\n    module.map((list) => {\n      list.poList.map((po) => {\n        po.itemList.map((item) => {\n          const { qty, grade } = item;\n          const _qty = isInteger(qty)\n            ? parseInt(qty)\n            : !qty\n              ? 0\n              : parseFloat(qty);\n          const _sku = noSkuChecking\n            ? list.skuName\n            : moduleName === \"waste\"\n              ? item.wasteType?.label\n                ? item.wasteType?.label\n                : list.skuName\n              : grade?.label;\n          const _toWaste =\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\" ||\n                item.wasteType?.label === \"Waste\"\n                ? true\n                : false\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\n                ? true\n                : false;\n          const _uom = noSkuChecking\n            ? list.unitOfMeassures\n            : grade?.uom === \"gram\"\n              ? \"kg\"\n              : grade?.uom;\n          let newSku = {\n            sku: _sku,\n            qty: _qty,\n            uom: _uom,\n            wqty: 0,\n            swqty: 0,\n          };\n          if (_toWaste) {\n            newSku.qty = 0;\n            newSku.sku = list.skuName;\n          }\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Waste\"\n              : grade?.label === \"Waste\"\n          )\n            newSku.wqty = _qty;\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\"\n              : grade?.label === \"Semi Waste\"\n          )\n            newSku.swqty = _qty;\n          const isExist = newModule.findIndex(\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\n          );\n\n          if (moduleName !== \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (grade?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\n            }\n          }\n\n          if (moduleName === \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (item.wasteType?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (item.wasteType?.label === \"Waste\")\n                newModule[isExist].wqty += _qty;\n            }\n          }\n        });\n      });\n    });\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\n    const i = newModule.findIndex((s) => s.sku === skuName);\n    newModule.forEach((sku) => {\n      if (i !== -1) {\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\n      }\n    });\n    return newModule;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { useSelector } from \"react-redux\";\nimport { next, skuListUpdateCheck } from \"./services.js\";\nimport { totalQty } from \"Page/StockEntry/GeneralServices/moduleServices\";\n\nconst ModalsConfirmation = ({\n  moduleEntry,\n  confirmation,\n  setConfirmation,\n  save,\n  submit,\n  isSuccess,\n  isLoading,\n  moveAll,\n  setAction,\n  moduleName,\n  noSkuChecking,\n  singleViewData,\n}) => {\n  const dimention = document.documentElement.clientHeight;\n  const height = dimention - 300;\n\n  let buttonName = \"Submit\";\n\n  if (confirmation.name === \"save\") buttonName = \"Save\";\n  useEffect(() => {\n    if (isSuccess) setConfirmation({ show: false, name: null });\n  }, [isSuccess]);\n  window.onkeydown = (e) =>\n    e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null;\n\n  useEffect(() => {\n    setAction(confirmation.name);\n  }, [confirmation]);\n\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry;\n\n  const areaDestinationName = module?.jobPost?.areaDestinationName;\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName;\n  const areaName = module?.jobPost?.areaName;\n\n  const skuListUpdate = skuListUpdateCheck(\n    module?.jobPost.list,\n    noSkuChecking,\n    moduleName\n  );\n  return (\n    <CRow\n      className={\"modalConfirmation \" + (confirmation.show ? null : \"d-none\")}\n    >\n      <CCol>\n        <CModal show={confirmation.show} closeOnBackdrop={false}>\n          <CModalHeader className=\"px-4 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">\n              Confirmation{\" \"}\n              <span>\n                <i className=\"em em-pray\"></i>\n              </span>\n            </CModalTitle>\n            <label\n              tabIndex=\"0\"\n              onKeyDown={(e) =>\n                e.keyCode === 13\n                  ? setConfirmation({ show: false, name: null })\n                  : false\n              }\n              onClick={() => setConfirmation({ show: false, name: null })}\n              className=\"sku-item iconU-modalClose\"\n            />\n          </CModalHeader>\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\n            <p className=\"text mb-2\">\n              <span>{`Are you sure want to ${\n                areaName == \"Waste\" ? \"update\" : \"send\"\n              } this Item `}</span>\n              <span\n                className={` ${areaDestinationName ? null : \"d-none\"}`}\n              >{` from`}</span>\n              <span\n                className={`green ${areaDestinationName ? null : \"d-none\"}`}\n              >{` ${areaName} `}</span>\n              <span>\n                {moduleName == \"outbound\"\n                  ? \"from\"\n                  : moduleName === \"repack\"\n                  ? \"\"\n                  : \"to\"}{\" \"}\n              </span>\n              <span\n                className={`green ${moduleName !== \"repack\" ? null : \"d-none\"}`}\n              >{` ${\n                moduleName === \"stockTransfer\"\n                  ? warehouseDestinationName\n                  : areaDestinationName\n                  ? areaDestinationName\n                  : areaName\n              } `}</span>\n            </p>\n            <p className=\"text\">\n              Please double check this list, this record will store to database.\n            </p>\n            <div\n              style={{\n                minHeight: height,\n                maxHeight: height,\n                overflow: \"auto\",\n                border: \"1px solid var(--lineGrey)\",\n              }}\n            >\n              <table>\n                <thead>\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Weight\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Semi Waste\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Waste\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {skuListUpdate?.map((data) => (\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                      <td style={{ maxWidth: \"160px\" }}>{data.sku}</td>\n                      <td\n                        className=\"text-right py-3\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        {`${totalQty(data?.qty)}`}\n                      </td>\n                      <td\n                        className=\"text-right text-nowrap\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        <span className=\"text-nowrap\">{`${totalQty(\n                          data?.swqty\n                        )} `}</span>\n                      </td>\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\n                        {`${totalQty(data?.wqty)}`}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? setConfirmation({ show: false, name: null })\n                    : false\n                }\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\n                onClick={() => setConfirmation({ show: false, name: null })}\n              >\n                Cancel\n              </CButton>\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? isLoading\n                      ? null\n                      : confirmation.name === \"save\"\n                      ? save()\n                      : submit()\n                    : false\n                }\n                className={`${\n                  isLoading ? \"bg-softGreen text\" : \"bg-green text-white\"\n                } no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\n                onClick={() =>\n                  isLoading\n                    ? null\n                    : confirmation.name === \"save\"\n                    ? save()\n                    : submit()\n                }\n              >\n                {isLoading ? \"Processing...\" : buttonName}\n              </CButton>{\" \"}\n            </div>\n          </CModalBody>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst ModalsCaptcha = ({\n  show = false,\n  setIsShowModal,\n  submit,\n  submitText = \"Submit\",\n}) => {\n  //random text\n  var text = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var charactersLength = characters.length;\n  var text_split = [];\n  for (var i = 0; i < 3; i++) {\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\n    text += r;\n    text_split.push(r);\n  }\n\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\n  const [isValidated, setIsValidated] = React.useState(false);\n  const [isType, setIsType] = React.useState([]);\n\n  //reset if visible = false\n  useEffect(() => {\n    if (show === true) {\n      document.getElementById(\"t1\").value = \"\";\n      document.getElementById(\"t2\").value = \"\";\n      document.getElementById(\"t3\").value = \"\";\n    }\n  }, [show]);\n\n  return (\n    <CRow className={show ? null : \"d-none\"}>\n      <CCol>\n        <CModal\n          show={show}\n          onClose={() => {\n            setIsShowModal(false);\n          }}\n          size=\"lg\"\n          style={{ height: \"400px\" }}\n        >\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\n              {selectorCsvFileName}?\n            </p>\n            <p className=\"text\">\n              Once uploaded this record will store to databases.\n            </p>\n            <p className=\"text mb-2\">\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\n            </p>\n\n            <div className=\"captcha-box\">\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 1,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t1\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[0]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 2,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t2\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input ml-0 mr-0\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[1]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 3,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t3\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[2]}\n              />\n            </div>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            <CButton\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\n              onClick={() => {\n                setIsShowModal(false);\n              }}\n            >\n              Cancel\n            </CButton>\n            <CButton\n              className={\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\n              }\n              onClick={() => {\n                submit();\n                setIsValidated(false);\n              }}\n            >\n              {submitText}\n            </CButton>{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport { ModalsConfirmation, ModalsCaptcha };\n","import React from \"react\";\nimport { CCard } from \"@coreui/react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"./bootstrapTable-style.scss\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport axios from \"axios\";\n\n//cell editable\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\n\nclass TableEditable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validateStatus: false,\n      validateResult: \"Please Wait...\",\n      globalData: this.props.globalData,\n      rowCount: 0,\n      keyy: 0,\n      triggerRender: 0\n    };  \n    this.validatePOSKUStockTransfer = this.validatePOSKUStockTransfer.bind(this);\n    this.validateSKUNumber = this.validateSKUNumber.bind(this);\n    \n  } \n  changeOutboundReason = (row) => {\n    setTimeout(() => {\n      let elem = document.getElementById(`row${row}-outboundReason`);\n      elem.classList.add(\"red\", \"tooltip-custom\");\n      elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\n    }, 300);\n  }\n\n  changeWarehouseUuid = (\n    value,\n    column,\n    columnName,\n    row,\n    warehouseCodeList,\n    warehouseUuidList,\n    warehouseNameList\n  ) => {\n    const { setCsvDataTmp, globalData } = this.props;\n    let tmpdata = globalData;\n    var index = tmpdata.findIndex((obj) => obj.id == row);\n    let i = warehouseCodeList.indexOf(value);\n    tmpdata[index][column] = warehouseUuidList[i];\n    tmpdata[index][columnName] = warehouseNameList[i];\n\n    console.clear() \n    setTimeout(async () => {\n      setCsvDataTmp(tmpdata);\n    }, 400);\n  };\n\n  validatePOSKU = async (id, row, idColumn) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;\n    if(transaction==\"additional_inbound\"){\n      return;\n    }\n\n    let tmpdata = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/stocktake/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        elem.classList.add(\"red\");\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          var index = tmpdata.findIndex((obj) => obj.id == row);\n          if (data[0] && data[0].isExist === true) {\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\n            tmpdata[index].wmsPoSkuCodeStatus = true;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = data[0].expiryDate;\n            tmpdata[index].inboundDate = data[0].inboundDate;\n            tmpdata[index].supplierName = data[0].supplierName;\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\n            tmpdata[index].uom = data[0].uom;\n            tmpdata[index].photos = data[0].photos;\n            elem.classList.remove(\"red\");\n            elem.classList.add(\"hiddenTooltip\");\n          } else {\n            tmpdata[index].wmsPoSkuCodeStatus = false;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = \"\";\n            tmpdata[index].inboundDate = \"\";\n            tmpdata[index].supplierName = \"\";\n            tmpdata[index].supplierUuid = \"\";\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\n          }\n          setCsvDataTmp(tmpdata);\n        });\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validatePOSKUStockTransfer = async (newValue, row, idColumn, key) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;  \n    let tmpdata = globalData;\n    \n    var index = tmpdata.findIndex((obj) => obj.id == row.id); \n    // console.log(tmpdata)\n    // console.log(row.id, row)\n    // console.log(index)\n\n    try {\n      const url = \"/stocktransfer/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      let payloadPO = [{\n        \"id\": row.id,\n        \"poSkuCode\": key==\"wmsPoSkuCode\" ? newValue : (row.poSkuCode?row.poSkuCode:\"\"),\n        \"skuNumber\": key==\"skuNumber\"? newValue?.skuNumber: row.skuNumber,\n        \"skuUuid\": key==\"skuNumber\"? newValue?.skuUuid:row.skuUuid,\n        \"warehouseSource\": row.warehouseSource,\n        \"areaSource\": row.areaSource,\n        \"weight\": key==\"qty\"?newValue:row.qty\n      }]; \n\n      setTimeout(async () => {\n        //setvalidate false\n        setIsValidate(false);\n\n        //elemen column\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        // elem.classList.remove(\"hiddenTooltip\");\n        // elem.classList.add(\"red\");  \n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: payloadPO },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          if (data[0]) {\n            if(data[0].isExist === true && data[0].isValid === true){\n              tmpdata[index]['rowStatus'] = true;\n              tmpdata[index]['rowReason'] = \"\";\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }else{\n              tmpdata[index]['rowStatus'] = false;\n              tmpdata[index]['rowReason'] = data[0]?.errorMessage;\n            }\n            tmpdata[index]['wmsPoSkuCode'] = data[0]?.wmsPoSkuCode ;\n            tmpdata[index]['wmsPoSkuCodeStatus'] = data[0]?.isExist && data[0]?.isValid;\n            tmpdata[index]['wmsPoSkuCodeReason'] = data[0]?.errorMessage;\n            tmpdata[index]['expiryDate'] = data[0]?.expiryDate;\n            tmpdata[index]['inboundDate'] = data[0]?.inboundDate;\n            tmpdata[index]['supplierName'] = data[0]?.supplierName;\n            tmpdata[index]['supplierUuid'] = data[0]?.supplierUuid;\n            tmpdata[index]['uom'] = data[0]?.uom;\n            tmpdata[index]['photos'] = data[0]?.photos;\n          } else {\n            tmpdata[index]['wmsPoSkuCodeStatus'] = false;\n            tmpdata[index]['wmsPoSkuCodeReason'] = response?.data?.message;\n            tmpdata[index]['expiryDate'] = \"\";\n            tmpdata[index]['inboundDate'] = \"\";\n            tmpdata[index]['supplierName'] = \"\";\n            tmpdata[index]['supplierUuid'] = \"\";\n            tmpdata[index]['rowStatus'] = false;\n            tmpdata[index]['rowReason'] = response?.data?.message;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = response?.data?.message;\n          } \n\n          if(key==\"skuNumber\"){ \n            tmpdata[index][\"skuNumber\"] = newValue.skuNumber;\n            tmpdata[index][\"skuNumberReason\"] = newValue.skuDescription;\n            tmpdata[index][\"skuNumberStatus\"] = true;\n            tmpdata[index][\"skuUuid\"] = newValue.skuUuid;\n          }\n          setCsvDataTmp(tmpdata); \n        }); \n        let tmpKey = this.state.keyy + 1; \n        this.setState({keyy: tmpKey}); \n      }, 500);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validateOutbountReason = (value, row, idColumn) => {\n    const { globalData } = this.props;\n    let tmp_data = globalData;\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\n      this.changeOutboundReason(row)\n    }\n  };\n\n  validateOutbountType = (value, row, idColumn) => {\n    const { globalData, setIsValidate } = this.props;\n    let tmp_data = globalData;\n    setIsValidate(false);\n    if (value.toUpperCase() !== \"LAINNYA\") {\n      setIsValidate(true);\n      return 0;\n    }\n\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (datax[\"outboundReason\"] == \"\") {\n      this.changeOutboundReason(row);\n    }\n  };\n\n  validateSKUNumber = async (id, row, idColumn, key, rowData = null) => {\n    const { globalData, setCsvDataTmp, setIsValidate,transaction } = this.props;\n    let tmp_data = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/oss/skuByNumbers\";\n      let elem = null;\n      let elemspan = null;\n      \n      // for validating stock transfer\n      let stats = false;\n      let newSkuData = {} \n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { skuList: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          let isSuccess = response.data.isSuccess;\n          var index = tmp_data.findIndex((obj) => obj.id == row);\n          if (isSuccess === true && data.length > 0) {\n            stats = true;\n            tmp_data[index][key] = data[0].skuNumber;\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\n            tmp_data[index][key + \"Status\"] = true;\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\n            newSkuData = {\n              skuUuid: data[0].id,\n              skuNumber: data[0].skuNumber,\n              skuDescription: data[0].skuDescription,\n              photo: data[0].photo\n            }\n\n            //custom\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = data[0].id;\n              tmp_data[index].photo = data[0].imageMd;\n            }\n\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = data[0].uom;\n            }\n            \n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = data[0].uom;\n            }\n\n            \n            if(transaction!==\"stockTransfer\"){\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }\n\n          } else {\n            stats = false;\n            tmp_data[index][key] = id;\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\n            tmp_data[index][key + \"Status\"] = false;\n            tmp_data[index][key + \"Uuid\"] = null;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"SKU Number Not Found\";\n\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = \"\";\n              tmp_data[index].photo = \"\";\n            }\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = null;\n            }\n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = \"\";\n            }\n          } \n        });\n\n        if(transaction==\"stockTransfer\" && stats === true){ \n          this.validatePOSKUStockTransfer(newSkuData, rowData, idColumn, 'skuNumber')\n        }else{\n          setCsvDataTmp(tmp_data);\n        }\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  render() {\n    const {\n      columns,\n      hiddenRows,\n      tableClass,\n      warehouseArea,\n      outboundType,\n      setCheckingCsv, \n      editable = true,\n      warehousesData = [],\n      transaction,\n      globalData\n    } = this.props;\n    let { validateStatus,  keyy } = this.state;\n    \n    //wh\n    let warehouseCodeList = [];\n    let warehouseUuidList = [];\n    let warehouseNameList = [];\n    if (warehousesData) {\n      let tmp = warehousesData?.data?.map((d) => {\n        warehouseCodeList.push(d.code);\n        warehouseUuidList.push(d.id);\n        warehouseNameList.push(d.name);\n      });\n    }\n\n    //wh area\n    let wh_area_label =\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\n    let wh_outboundtype_label = !outboundType\n      ? []\n      : outboundType.map((data) => data.label.toUpperCase());\n    let wh_outboundtype_value = !outboundType\n      ? []\n      : outboundType.map((data) => data.value);\n    const newFormat = columns.map((data, index) => {\n      data.validator = (newValue, row, column, done) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let reason = null;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n\n        let stockTransferColumnCheck = ['wmsPoSkuCode', 'qty']\n        if (stockTransferColumnCheck.includes(key) && transaction==\"stockTransfer\") {\n          this.validatePOSKUStockTransfer(newValue, row, idColumn, key);\n          stat = true;\n        }else if(key == \"wmsPoSkuCode\" ){\n          this.validatePOSKU(newValue, row.id, idColumn, key);\n          stat = true; \n        }\n\n        if (key == \"skuNumber\") {\n          this.validateSKUNumber(newValue, row.id, idColumn, key, row);\n          stat = true;\n        }\n\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type not found\";\n            checkType = false;\n            stat = false;\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        } else if (key == \"newGrade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            //if not waste or semi waste\n            if (parseInt(newValue)) {\n              //if number\n              stat = true;\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\n            } else if (newValue == \"\") {\n              row[\"newGradeUuid\"] = null;\n              row[\"newGradeUom\"] = null;\n              stat = true;\n            } else {\n              //if not number => undefined\n              reason = \"Grade Undefined\";\n              checkType = false;\n              stat = false;\n            }\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        }\n\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Outbound Type Not Found`;\n          } else {\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\n            stat = true;\n            this.validateOutbountType(newValue, row.id, idColumn);\n          }\n        }\n\n        if (key == \"outboundReason\") {\n          this.validateOutbountReason(newValue, row.id, idColumn);\n        }\n\n        if (key == \"warehouse\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseUuid\",\n              \"warehouseName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          }\n        }\n        if (key == \"warehouseDestination\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseDestinationUuid\",\n              \"warehouseDestinationName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          } \n        }\n\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Warehouse Area Not Found`;\n          } else {\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\n            if (key == \"areaNameDestination\") {\n              row[\"areaDestination\"] = wh_area_value[i];\n            } else {\n              row[\"areaSource\"] = wh_area_value[i];\n            }\n            stat = true;\n          }\n        }\n\n        if (key == \"newPack\") {\n          let checkTypenewPack = isNaN(newValue) ? false : true;\n          if (!checkTypenewPack) {\n            stat = false;\n            reason = `Pack Should be a number`;\n          } else {\n            stat = true;\n          }\n        } \n        \n\n        let checkType = null;\n        if (data.type == \"number\") {\n          checkType = isNaN(newValue) ? false : true;\n        } else {\n          checkType = true;\n        }\n        if (checkType === false) {\n          reason = `${data.text} Should be a ${data.type}`;\n        } \n\n        \n        if (key == \"wmsPoSkuCode\" && transaction == \"stockTransfer\") {\n          if(isNaN(newValue)){\n            checkType = false;\n            reason = `${data.text} Should be a number`;\n            stat = false;\n          } \n        } \n\n        //some field can null\n        let canNull = [\n          \"grade\",\n          \"outboundReason\",\n          \"ripenessLevel\",\n          \"newRipeness\",\n          \"reason\",\n          \"expiryDate\"\n        ]; \n\n        if (canNull.includes(key) && newValue === \"\") {\n          reason = \"\";\n          checkType = true;\n          stat = true;\n        } else if (key == \"grade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type Not Found\";\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //check ripenesslevel\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\n          let allowedRipenessLevel = [0, 1, 2, 3];\n          if (\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\n            newValue == \"\"\n          ) {\n            checkType = true;\n            stat = true;\n            reason = \"\";\n            if (newValue == \"\") {\n              newValue = \"\";\n            }\n          } else {\n            checkType = false;\n            stat = false;\n            reason = \"Undefined Ripeness Level\";\n          }\n        }\n\n        //check date\n        if (data.type == \"date_indo\") {\n          //checking date\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\n          if (newValue.match(regex_date)) {\n            checkType = true;\n            stat = true;\n          } else if (newValue == \"\") {\n            checkType = true;\n            stat = true;\n          } else {\n            reason = `Date format must be 'dd-mm-yyyy'`;\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //set notif\n        row[keyReason] = reason;\n        if (stat && checkType) {\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\n          if (!specialKey.includes(key)) {\n            //some key have their own checking, so if not in array do checking error\n            row[keyStatus] = true;\n            setCheckingCsv();\n          }\n        } \n         \n        return {\n          valid: stat && checkType ? true : false,\n          message: reason,\n        };\n      };\n\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n        let txt = row[keyReason];\n        \n        // if status column = false\n        // that mean there's error or not valid data in some column\n        if (row[keyStatus] === false) {\n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {txt}\n              </span>\n            </div>\n          );\n        }\n\n        // if global row status = false\n        // that mean there's wmsposkucode validation error, and makes 1 line become red colour\n        // for now is only for stock transfer  \n        if ( transaction==\"stockTransfer\" &&  row['rowStatus'] === false) { \n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {row['rowReason']}\n              </span>\n            </div>\n          );\n        }\n\n        \n        // if status column = true\n        // No problem \n        return (\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\n            {cell}\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\n              {txt}\n            </span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n    console.clear();  \n    console.log(globalData)\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={globalData}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          cellEdit={\n            editable === true\n              ? cellEditFactory({\n                  mode: \"click\",\n                  blurToSave: true,\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\n                })\n              : null\n          }\n          bordered={false}\n          hiddenRows={hiddenRows}\n          key={keyy}\n        />\n      </CCard>\n    );\n  }\n}\n\nclass TableResult extends React.Component {\n  render() {\n    const { columns, tableClass, data } = this.props;\n\n    const newFormat = columns.map((data, index) => {\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\n          return (\n            <div className=\"tooltip-custom red\">\n              {cell}\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\n            </div>\n          );\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\n          return (\n            <div className=\"green\">\n              {cell}\n              <span></span>\n            </div>\n          );\n        }\n\n        return (\n          <div>\n            {cell}\n            <span></span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={data}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          bordered={false}\n        />\n      </CCard>\n    );\n  }\n}\n\nexport { TableResult, TableEditable };\n"],"sourceRoot":""}