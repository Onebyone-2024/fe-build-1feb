{"version":3,"sources":["Page/StockEntry/StockTake/Upload/services.js","Page/StockEntry/StockTake/Upload/Review.jsx","Component/Modal/PopUp/index.jsx","Component/Modal/PopUp/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/BootstrapTable/index.jsx"],"names":["submit","async","csvData","csvField","dispatch","selectorStatus","setIsShowModal","setIsSubmitText","setSubmitStatus","_ref5","console","clear","header","time","Date","getTime","n","getMilliseconds","list_area","return_data","warehouse_source","warehouseSource","map","data","index","includes","areaSource","push","id","warehouseDestination","areaDestination","list","createdAt","setHeader","skuList","available","forEach","idx","skuUuid","skuNumber","unitOfMeassures","uom","photo","photos","poList","getSKU","poGroup","groupingPO","header_index","wmsPoSkuCode","expiryDate","inboundDate","supplierId","supplierUuid","supplierName","moment","expiryDateCol","toDate","codeGrade","itemList","length","newRipeness","ripenessLevel","newGrade","value","toUpperCase","checkGrade","newGradeUuid","qty","expiryDateText","ripeness","label","grade","areaName","jobPost","setJobPost","skuListData","skuListIdx","poGroupIndex","headerData","headerIdx","skuListDataIdx","execute","submitCsv","dataCsv","transaction","result","arrayResult","i","dataHeader","indexHeader","poHeader","indexPo","poSkuCode","isStatus","isSuccess","uploadStatus","uploadStatusReason","message","setResult","type","STOK_TAKE_UPLOAD_JSON","csvDataResult","newSchema","dataField","text","sort","csvFieldResult","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","status","isShowModal","React","useState","isHiddenRows","setIsHiddenRows","isShowErrorOnly","setIsShowErrorOnly","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","setCheckingCsv","submitStatus","title","setTitle","msg1","setMsg1","msg2","setMsg2","cancelButtonTitle","setCancelButtonTitle","actionButtonTitle","setActionButtonTitle","isSubmitText","actionButtonClass","setActionButtonClass","colourTitle","setColourTitle","useEffect","_ref4","undefined","stats","indexField","checking_error","history","setCsvDataTmp","param","_ref3","setCsvData","log","createElement","className","TableEditable","globalData","columns","tableClass","hiddenRows","warehouseArea","style","backgroundColor","onClick","_ref","tmp_arr_false","tmp_arr_true","stat","dataColumn","indexColumn","key","ret","filter","x","showErrorsOnly","_ref2","new_arr","deleteErrorsField","lineHeight","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","cancelButtonClass","actionButtonEvent","ModalsCaptcha","submitText","show","refresh","icon","setIsSuccess","code","setShow","window","onkeydown","e","keyCode","CRow","concat","CCol","CModal","closeOnBackdrop","onClose","success","name","STATUS","size","minHeight","bodyOpenClassName","CModalHeader","CModalTitle","CModalBody","CModalFooter","CButton","location","reload","refreshPage","parentOncCloseFunction","next","isCaptcha","setIsValidated","setIsType","isType","isValidated","type_","document","getElementById","parseInt","focus","setSelectionRange","split","ModalsConfirmation","_module$jobPost","_module$jobPost2","_module$jobPost3","moduleEntry","confirmation","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","module","areaDestinationName","warehouseDestinationName","skuListUpdate","skuListUpdateCheck","newModule","po","item","_item$wasteType","_item$wasteType2","_item$wasteType3","_item$wasteType4","_item$wasteType5","_item$wasteType6","_qty","isInteger","parseFloat","_sku","skuName","wasteType","_toWaste","_uom","newSku","sku","wqty","swqty","isExist","findIndex","_item$wasteType7","_item$wasteType8","s","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","characters","charactersLength","text_split","r","charAt","Math","floor","random","setIsCaptcha","isCaptchaText","setIsCaptchaText","autocomplete","onKeyUp","textTransform","maxLength","placeholder","Component","constructor","_this","super","this","changeOutboundReason","row","setTimeout","elem","classList","add","innerHTML","changeWarehouseUuid","column","columnName","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","obj","indexOf","validatePOSKU","idColumn","url","elemspan","axios","method","then","response","_response$data","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","remove","error","validatePOSKUStockTransfer","newValue","payloadPO","_response$data2","_data$2","_data$3","_data$4","_data$5","_data$6","_data$7","_data$8","_data$9","_data$10","_data$11","_data$","isValid","errorMessage","_response$data3","_response$data4","_response$data5","skuDescription","tmpKey","keyy","setState","validateOutbountReason","tmp_data","datax","validateOutbountType","validateSKUNumber","rowData","arguments","newSkuData","_response$data6","imageMd","newGradeUom","validateStatus","validateResult","rowCount","triggerRender","bind","render","outboundType","editable","warehousesData","_warehousesData$data","d","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","done","keyStatus","keyReason","reason","arr_grade","checkType","isNaN","regex_date","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","CCard","BootstrapTable","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered","TableResult"],"mappings":"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","file":"static/js/50.63ddf5b5.chunk.js","sourcesContent":["//other\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\nimport { submitCsv } from \"apiServices\";\nimport moment from \"moment\";\n\nexport const showErrorsOnly = ({\n  csvData,\n  csvField,\n  isShowErrorOnly,\n  setIsShowErrorOnly,\n  setIsHiddenRows,\n  setCheckingCsv,\n}) => {\n  // ;\n  let tmp_arr_false = [];\n  let tmp_arr_true = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    let i = index + 1;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n\n    if (stat === false) {\n      if (!tmp_arr_false.includes(i)) {\n        tmp_arr_false.push(i);\n      }\n    } else {\n      if (!tmp_arr_true.includes(i)) {\n        tmp_arr_true.push(i);\n      }\n    }\n  });\n\n  //return array\n  let ret = [];\n  if (isShowErrorOnly === true) {\n    //true = delete all row\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\n    if (ret.length == csvData.length) {\n      return 0;\n    }\n  } else {\n    ret = [];\n  }\n  setIsHiddenRows(ret);\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\n  setCheckingCsv(true);\n};\n\nexport const deleteErrorsField = ({\n  csvData,\n  csvField,\n  dispatch,\n  setCheckingCsv,\n}) => {\n  let new_arr = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n    if (stat === true) {\n      new_arr.push(data);\n    }\n  });\n\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\n  setCheckingCsv(true);\n};\n\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\n  setCheckingCsv(true);\n};\n\nexport const checking_error = ({\n  csvData,\n  csvField,\n  setIsValidate,\n  setCheckingCsv,\n}) => {\n  if (csvData === undefined) {\n    return 0;\n  }\n  let stats = true;\n  csvData.map((data, index) => {\n    csvField.map((dataField, indexField) => {\n      let status = data[dataField.dataField + \"Status\"];\n      if (status === false) {\n        stats = false;\n      }\n    });\n  });\n  if (stats === false) {\n    setIsValidate(false);\n  } else {\n    setIsValidate(true);\n  }\n  setCheckingCsv(false);\n};\n\nconst setHeader = (csvData) => {\n  //get time - created at\n  let time = new Date().getTime();\n  let d = new Date(time);\n  let n = d.getMilliseconds();\n  let list_area = [];\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    //in outbound csv upload only check area source\n    if (!list_area.includes(data.areaSource)) {\n      return_data.push({\n        id: index,\n        warehouseSource: warehouse_source,\n        warehouseDestination: warehouse_source,\n        areaSource: data.areaSource,\n        areaDestination: data.areaSource,\n        list: [],\n        createdAt: n,\n      });\n      list_area.push(data.areaSource);\n    }\n  });\n  return return_data;\n};\n\nconst getSKU = (csvData) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.skuUuid == data.skuUuid &&\n        header.warehouseSource == data.warehouseSource &&\n        header.areaSource == data.areaSource\n      ) {\n        available = true;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        warehouseSource: warehouse_source,\n        areaSource: data.areaSource,\n        skuUuid: data.skuUuid,\n        skuNumber: data.skuNumber,\n        unitOfMeassures: data.uom,\n        photo: data.photos,\n        poList: [],\n      });\n    }\n  });\n  return return_data;\n};\n\nconst checkGrade = (value) => {\n  if (!value) {\n    return;\n  }\n  if (value.toUpperCase() == \"SEMI WASTE\") {\n    return \"semi_waste\";\n  } else if (value.toUpperCase() == \"WASTE\") {\n    return \"waste\";\n  } else {\n    return null;\n  }\n};\n\nconst groupingPO = (csvData, skuList) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    let header_index = \"\";\n\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.areaSource == data.areaSource &&\n        header.warehouseSource == data.warehouseSource &&\n        header.skuUuid == data.skuUuid &&\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\n        header.expiryDate == data.expiryDate\n      ) {\n        available = true;\n        header_index = idx;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        skuUuid: data.skuUuid || \"\",\n        areaSource: data.areaSource || \"\",\n        warehouseSource: warehouse_source || \"\",\n        inboundDate: data.inboundDate || \"\",\n        supplierId: data.supplierUuid || \"\",\n        supplierName: data.supplierName || \"\",\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\n        expiryDate:\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n        codeGrade: data.skuUuid || \"\",\n        itemList: [],\n      });\n      header_index = return_data.length - 1;\n    }\n\n    //check ripeness\n    let newRipeness = data.newRipeness;\n    if (data.newRipeness == \"\") {\n      newRipeness = data.ripenessLevel || 0;\n    }\n\n    //check grade\n    let newGrade = checkGrade(data.newGrade);\n    if (newGrade === null) {\n      newGrade = data.newGradeUuid;\n    }\n\n    return_data[header_index].itemList.push({\n      qty: data.qty || 0,\n      areaSource: data.areaSource,\n      expiryDateText: data.expiryDateCol,\n      expiryDate:\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n      skuNumber: data.skuNumber,\n      wmsPoSkuCode: data.wmsPoSkuCode,\n      ripeness: { label: data.newRipeness || \"\", value: newRipeness || 0 },\n      grade: { label: data.newGrade || \"\", value: newGrade || data.skuUuid },\n      areaName: data.areaName || \"\",\n    });\n  });\n  return return_data;\n};\n\nconst setJobPost = (header, skuList, poGroup) => {\n  //insert PO to SKUList\n  skuList.map((skuListData, skuListIdx) => {\n    poGroup.map((poGroup, poGroupIndex) => {\n      if (\n        poGroup &&\n        poGroup.areaSource == skuListData.areaSource &&\n        poGroup.warehouseSource == skuListData.warehouseSource &&\n        poGroup.skuUuid == skuListData.skuUuid\n      ) {\n        skuList[skuListIdx][\"poList\"].push(poGroup);\n      }\n    });\n  });\n\n  //insert sku to Header\n  header.map((headerData, headerIdx) => {\n    skuList.map((skuListData, skuListDataIdx) => {\n      if (\n        poGroup &&\n        headerData.areaSource == skuListData.areaSource &&\n        headerData.warehouseSource == skuListData.warehouseSource\n      ) {\n        header[headerIdx][\"list\"].push(skuListData);\n      }\n    });\n  });\n\n  return header;\n};\n\nconst setResult = (result) => {\n  let arrayResult = [];\n  let i = 1;\n  result.data.list.map((dataHeader, indexHeader) => {\n    dataHeader.poList.map((poHeader, indexPo) => {\n      let poSkuCode = poHeader.wmsPoSkuCode;\n      let grade = poHeader.codeGrade;\n      poHeader.itemList.map((data, index) => {\n        let isStatus = \"Failed\";\n        if (data.isSuccess) {\n          isStatus = \"Success\";\n        }\n        arrayResult.push({\n          id: i,\n          uploadStatus: isStatus || \"\",\n          uploadStatusReason: data.message,\n          wmsPoSkuCode: poSkuCode || \"\",\n          skuNumber: data.skuNumber || \"\",\n          expiryDateCol: data.expiryDateText || \"\",\n          qty: data.qty || 0,\n          grade: grade || \"\",\n          newGrade: data.grade.label || \"\",\n          areaName: data.areaName || \"\",\n          newRipeness: data.ripeness.label || \"\",\n        });\n        i++;\n      });\n    });\n  });\n  return arrayResult;\n};\n\nexport const submit = async ({\n  csvData,\n  csvField,\n  dispatch,\n  selectorStatus,\n  setIsShowModal,\n  setIsSubmitText,\n  setSubmitStatus,\n}) => {\n  setIsSubmitText(\"Loading...\");\n  console.clear();\n\n  //set header\n  let header = await setHeader(csvData);\n\n  //get list sku\n  let skuList = await getSKU(csvData);\n\n  //grouping PO\n  let poGroup = await groupingPO(csvData, skuList);\n\n  //set JobPost\n  let jobPost = await setJobPost(header, skuList, poGroup);\n\n  //submit\n  let execute = await submitCsv({\n    dataCsv: jobPost,\n    setSubmitStatus,\n    dispatch,\n    transaction: \"stockTake\",\n  });\n  if (execute == \"error\") {\n    return 0;\n  }\n\n  //set result\n  let result = await setResult(execute);\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\n\n  //renew schema for result\n  let newSchema = [];\n  newSchema.push({\n    dataField: \"uploadStatus\",\n    text: \"Upload Status\",\n    type: \"string\",\n    sort: true,\n  });\n  csvField.map((data, index) => {\n    newSchema.push(data);\n  });\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\n\n  setIsShowModal(false);\n  setIsSubmitText(\"Submit\");\n  setSubmitStatus(true);\n};\n\nexport const submit_old = async ({\n  csvData,\n  csvField,\n  dispatch,\n  setIsShowModal,\n  setIsSubmitText,\n  setSubmitStatus,\n}) => {\n  setIsSubmitText(\"Loading...\");\n  let jobHeader = [];\n\n  //0 get time\n  let time = new Date().getTime();\n  let d = new Date(time);\n  let n = d.getMilliseconds();\n\n  //1. set header\n  jobHeader = [\n    {\n      jobPost: {\n        id: 0,\n        warehouseSource: csvData[0].warehouseSource || \"\",\n        warehouseDestination: csvData[0].warehouseSource || \"\",\n        areaSource: csvData[0].areaSource || \"\",\n        areaDestination: csvData[0].areaSource || \"\",\n        list: null,\n      },\n    },\n  ];\n\n  //2. get sku\n  let sku_uuid_array = [];\n\n  let sku_data = [];\n  csvData.map((data, index) => {\n    if (!sku_uuid_array.includes(data.skuUuid)) {\n      sku_uuid_array.push(data.skuUuid);\n      sku_data.push({\n        skuNumber: data.skuNumber,\n        skuUuid: data.skuUuid,\n        uom: data.uom,\n        photo: data.photo,\n      });\n    }\n  });\n\n  //3. get PO per sku\n  let po_array = [];\n  sku_data.forEach((data_sku, index_sku) => {\n    if (data_sku === null || data_sku === undefined || data_sku === \"\") {\n      return false;\n    }\n\n    let tmp_po = {};\n    tmp_po.skuUuid = data_sku.skuUuid;\n    tmp_po.skuNumber = data_sku.skuNumber;\n    tmp_po.unitOfMeassures = data_sku.uom;\n    tmp_po.photo = data_sku.photo;\n    tmp_po.poList = [];\n    csvData.map((data, index) => {\n      if (data.skuNumber !== data_sku.skuNumber) {\n        return false;\n      }\n\n      let tmp_po_array = {};\n      tmp_po_array.wmsPoSkuCode = data.wmsPoSkuCode || \"\";\n      tmp_po_array.supplierUuid = data.supplierUuid || \"\";\n      tmp_po_array.supplierName = data.supplierName || \"\";\n      tmp_po_array.inboundDate = data.inboundDate || 0;\n      tmp_po_array.expiryDate = data.expiryDateCol || 0;\n      tmp_po_array.skuUuid = data.skuUuid;\n\n      //grade\n      tmp_po_array.gradeLabel = data.newGrade;\n      if (data.newGrade.toUpperCase() == \"WASTE\") {\n        tmp_po_array.grade = \"waste\";\n        tmp_po_array.newUom = data_sku.uom;\n      } else if (data.newGrade.toUpperCase() == \"SEMI WASTE\") {\n        tmp_po_array.grade = \"semi_waste\";\n        tmp_po_array.newUom = data_sku.uom;\n      } else {\n        tmp_po_array.grade = data.newGradeUuid || data_sku.skuUuid; //if grade null then grade =s kuUuid\n        tmp_po_array.newUom = data.newGradeUom || data_sku.uom; //if grade null then grade =s kuUuid\n      }\n\n      tmp_po_array.qty = data.qty || 0;\n      tmp_po_array.ripeness = data.ripenessLevel || 0;\n      tmp_po_array.newRipeness = data.newRipeness || \"\";\n      tmp_po_array.areaName = data.areaName || \"\";\n      tmp_po_array.skuNumber = data.skuNumber || \"\";\n      tmp_po_array.warehouseCode = data.warehouseCode || \"\";\n      tmp_po_array.expiryDate = data.expiryDateCol || \"\";\n      tmp_po.poList.push(tmp_po_array);\n    });\n    po_array.push(tmp_po);\n  });\n\n  //merapikan  po_array\n  let po_array_fix = [];\n  po_array.forEach((data, index) => {\n    let tmp = {};\n    let po_list = [];\n    let header_po = [];\n    data.poList.map((data_po, index_po) => {\n      let newRipeness = \"\";\n\n      //check if header already set or not\n      let header_available = false;\n      let header_index = null;\n      header_po.forEach((header, idx) => {\n        if (\n          header &&\n          header.ripenessLevel == data_po.ripeness &&\n          header.wmsPoSkuCode == data_po.wmsPoSkuCode &&\n          header.expiryDate == data_po.expiryDate\n        ) {\n          header_available = true;\n          header_index = idx;\n        }\n      });\n\n      //if header not available then set\n      if (header_available === false) {\n        header_po.push({\n          ripenessLevel: data_po.ripeness,\n          wmsPoSkuCode: data_po.wmsPoSkuCode,\n          expiryDate: data_po.expiryDate,\n        });\n        header_index = header_po.length - 1;\n\n        let tmp_po_array = {};\n        tmp_po_array.wmsPoSkuCode = data_po.wmsPoSkuCode || \"\";\n        tmp_po_array.supplierId = data_po.supplierUuid || \"\";\n        tmp_po_array.supplierName = data_po.supplierName || \"\";\n        tmp_po_array.codeGrade = data_po.skuUuid || \"\";\n        tmp_po_array.ripenessLevel = data_po.ripeness || 0;\n\n        //date\n        tmp_po_array.inboundDate = data_po.inboundDate || 0;\n        tmp_po_array.expiryDate =\n          moment(data_po.expiryDate, \"DD-MM-YYYY\").toDate().getTime() +\n            25200000 || \"\";\n        tmp_po_array.itemList = [];\n        po_list.push(tmp_po_array);\n      }\n      //end check header\n\n      //new sku ripeness\n      //if new ripeness == null then new ripeness=ripenessLevel\n      if (data_po.newRipeness == \"\") {\n        newRipeness = data_po.ripeness;\n      } else {\n        newRipeness = data_po.newRipeness;\n      }\n\n      let tmp_itemlist = {};\n      tmp_itemlist.grade = { label: data_po.gradeLabel, value: data_po.grade };\n      tmp_itemlist.ripeness = {\n        label: data_po.newRipeness,\n        value: newRipeness,\n      };\n      tmp_itemlist.qty = data_po.qty || 0;\n      tmp_itemlist.pack = data_po.pack || 0;\n      tmp_itemlist.uom = data_po.newUom || \"\";\n      tmp_itemlist.areaName = data_po.areaName || \"\";\n      tmp_itemlist.skuNumber = data_po.skuNumber || \"\";\n      tmp_itemlist.warehouseCode = data_po.warehouseCode || \"\";\n      tmp_itemlist.expiryDate = data_po.expiryDate || \"\";\n      po_list[header_index].itemList.push(tmp_itemlist);\n    });\n    tmp.skuUuid = data.skuUuid;\n    tmp.skuNumber = data.skuNumber;\n    tmp.unitOfMeassures = data.unitOfMeassures;\n    tmp.photo = data.photo;\n    tmp.poList = po_list;\n    po_array_fix.push(tmp);\n  });\n  //final\n  jobHeader[0].jobPost.list = po_array_fix;\n  let ret = await submitCsv({\n    dataCsv: jobHeader,\n    setSubmitStatus,\n    dispatch,\n    transaction: \"stockTake\",\n  });\n  setIsShowModal(false);\n  setIsSubmitText(\"Submit\");\n  if (ret == \"error\") {\n    return 0;\n  }\n\n  //set dispatch result\n  let arrayResult = [];\n  let i = 1;\n  await ret.jobPost.list.map((dataHeader, indexHeader) => {\n    dataHeader.poList.map((poHeader, indexPo) => {\n      let poSkuCode = poHeader.wmsPoSkuCode;\n      let ripenessLevel = poHeader.ripenessLevel;\n      poHeader.itemList.map((data, index) => {\n        let isStatus = \"Failed\";\n        if (data.isSuccess) {\n          isStatus = \"Success\";\n        }\n\n        arrayResult.push({\n          id: i,\n          warehouse: data.warehouseCode || \"\",\n          areaName: data.areaName || \"\",\n          wmsPoSkuCode: poSkuCode || \"\",\n          newGrade: data.grade.label || \"\",\n          ripeness: ripenessLevel,\n          newRipeness: data.ripeness.label || \"\",\n          skuNumber: data.skuNumber || \"\",\n          expiryDate: data.expiryDate || \"\",\n          uploadStatusReason: data.message,\n          uploadStatusErrorCode: data.errorCode,\n          uploadStatus: isStatus,\n          qty: data.qty,\n        });\n        i++;\n      });\n    });\n  });\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: arrayResult });\n\n  //renew schema\n  let newSchema = [];\n  csvField.map((data, index) => {\n    if (index == 1) {\n      newSchema.push({\n        dataField: \"uploadStatus\",\n        text: \"Upload Status\",\n        type: \"string\",\n        sort: true,\n      });\n    } else {\n      newSchema.push(data);\n    }\n  });\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\n  setSubmitStatus(true);\n};\n","import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { TableEditable } from \"Component/BootstrapTable\";\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\nimport \"../index.scss\";\nimport {\n  showErrorsOnly,\n  deleteErrorsField,\n  setCsvData,\n  submit,\n  checking_error\n} from \"./services.js\";\nimport PopUp from \"Component/Modal/PopUp\";\n\nconst Upload = (props) => {\n  const dispatch = useDispatch();\n\n  //selector\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const selectorCsvData = useSelector((state) => state.csvData);\n  const selectorCsvField = useSelector((state) => state.csvField);\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\n  const selectorStatus = useSelector((state) => state.status);\n\n  //state\n  const [isShowModal, setIsShowModal] = React.useState(false);\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\n  const [isValidate, setIsValidate] = React.useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\n  const [submitStatus, setSubmitStatus] = React.useState(false);\n\n  const [title, setTitle] = React.useState(null);\n  const [msg1, setMsg1] = React.useState(null);\n  const [msg2, setMsg2] = React.useState(null);\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\n  const [colourTitle, setColourTitle] = React.useState(null);\n\n  // console.log(selectorWarehouseArea);\n  // console.log(selectorCsvField);\n  // console.log(selectorCsvData);\n\n  useEffect(() => {\n    checking_error({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      setIsValidate,\n      setCheckingCsv\n    });\n  }, [checkingCsv]);\n\n  useEffect(() => { }, [selectorCsvData]);\n\n  useEffect(() => {\n    if (submitStatus === 'success') {\n      setActionButtonTitle('Done');\n      setCancelButtonTitle('');\n      setMsg1(selectorCsvFileName + ' upload successfull. ');\n      setMsg2('Would you import another file?');\n      setTitle('Success');\n      setActionButtonClass('bg-green background ml-0');\n      setColourTitle('green');\n      setModalShow(true);\n    } else if (submitStatus === 'failed') {\n      setActionButtonTitle('Retry');\n      setCancelButtonTitle('Cancel');\n      setMsg1(selectorStatus?.message);\n      setMsg2('do you want to retry?');\n      setTitle('Failed!');\n      setActionButtonClass('bg-red background ml-0');\n      setColourTitle('red');\n      setModalShow(true);\n    }\n  }, [submitStatus]);\n\n  useEffect(() => {\n    if (submitStatus === true) {\n      props.history.push(\"/inventory-entry/stock-take/CSV-upload/result\");\n    }\n  }, [submitStatus]);\n\n  if (selectorCsvData === undefined || selectorCsvData === null) {\n    props.history.push(\"/inventory-entry/stock-take/CSV-upload\");\n    return 0;\n  }\n\n  const setCsvDataTmp = (param) => {\n    setCsvData({ param, dispatch, setCheckingCsv });\n  };\n\n  console.log(selectorCsvData)\n\n  return (\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\n      <TableEditable\n        globalData={selectorCsvData} //Required\n        columns={selectorCsvField} //Required\n        tableClass=\"reviewTable\"\n        hiddenRows={isHiddenRows}\n        warehouseArea={selectorWarehouseArea}\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\n        setIsValidate={(param) => setIsValidate(param)}\n        dispatch={dispatch}\n        setCheckingCsv={setCheckingCsv}\n      />\n\n      <div className=\"row pt-3\">\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-3 mr-3 text no-shadow\"\n            style={{ backgroundColor: \"#fff\" }}\n            onClick={() =>\n              showErrorsOnly({\n                csvData: selectorCsvData,\n                csvField: selectorCsvField,\n                isShowErrorOnly,\n                setIsShowErrorOnly,\n                setIsHiddenRows,\n                setCheckingCsv\n              })\n            }\n          >\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn px-3 mr-3  text no-shadow\"\n            style={{ backgroundColor: \"#fff\" }}\n            onClick={() =>\n              deleteErrorsField({\n                csvData: selectorCsvData,\n                csvField: selectorCsvField,\n                dispatch,\n                setCheckingCsv\n              })\n            }\n          >\n            Delete Errors Field\n          </button>\n        </div>\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\n          Review your imported file: {selectorCsvFileName} (\n          {selectorCsvData.length || 0} Lines)\n        </div>\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\n            onClick={() => props.history.goBack()}\n          >\n            Discard\n          </button>\n\n          <button\n            type=\"button\"\n            class={\n              \"btn px-5 mr-3 text-white no-shadow float-right \"\n              + (isValidate === true && selectorCsvData?.length > 0 ? \"bg-green\" : \"bg-primaryGrey disabled\")\n            }\n            onClick={() => setIsShowModal(!isShowModal)}\n          >\n            Submit\n          </button>\n        </div>\n      </div>\n\n      <PopUp\n        status={selectorStatus}\n        onCloseFunction={() => {\n          setModalShow(false);\n          setSubmitStatus(false)\n        }}\n        statusDisplay={modalShow}\n        title={title}\n        cancelButtonTitle={cancelButtonTitle}\n        actionButtonTitle={actionButtonTitle}\n        colorText={colourTitle}\n        refreshOnCancel={false}\n        msg1={msg1}\n        msg2={msg2}\n        cancelButtonClass={null}\n        actionButtonClass={actionButtonClass + \" ml-0\"}\n        actionButtonEvent={() => props.history.push(\"/inventory-entry/stock-take/CSV-upload\")}\n      />\n      <ModalsCaptcha\n        submit={() =>\n          submit({\n            dispatch,\n            csvData: selectorCsvData,\n            setIsShowModal,\n            setIsSubmitText,\n            setSubmitStatus,\n            csvField: selectorCsvField,\n          })\n        }\n        submitText={isSubmitText}\n        show={isShowModal}\n        setIsShowModal={setIsShowModal}\n      />\n    </div>\n  );\n};\n\nexport default withRouter(Upload);\n","import React, { useState, useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { onClose, refreshPage } from \"./services.js\";\nimport { useDispatch } from \"react-redux\";\nimport { STATUS } from \"apiServices/action\";\n\nconst PopUp = ({\n  refresh,\n  status,\n  icon,\n  statusDisplay = false,\n  title = \"\",\n  cancelButtonTitle = \"Cancel\",\n  actionButtonTitle = \"Submit\",\n  cancelButtonClass = \"bg-background\",\n  actionButtonClass = \"bg-background\",\n  actionButtonEvent = null,\n  colorText = \"red\",\n  msg1 = null,\n  msg2 = null,\n  onCloseFunction = null,\n  refreshOnCancel = true,\n  setIsSuccess\n}) => {\n  const dispatch = useDispatch();\n  if (status?.code === 500 ) {\n    icon = \"em-pensive\"\n    title = \"Server Error\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = true;\n  }\n  if (status?.code === 408 ) {\n    icon = \"em-alarm_clock\"\n    title = \"Request Timeout\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = true;\n  }\n  if (status?.code === 400 ) {\n    icon = \"em-alarm_clock\"\n    title = \"Server Error\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = false;\n  }\n  if (status?.code === 404) {\n    title = \"Something wrong with the application\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = false;\n  }\n\n  const [show, setShow] = useState(statusDisplay);\n\n  useEffect(() => {\n    //from outside change\n    setShow(statusDisplay);\n  }, [statusDisplay]);\n\n  useEffect(() => {\n  }, [show]);\n\n  window.onkeydown = e => e.keyCode === 27 ? setShow(false) : null\n  return (\n    <CRow className={`${show ? null : \"d-none\"}`}>\n      <CCol>\n        <CModal\n          show={show}\n          closeOnBackdrop={false}\n          onClose={() => {\n            setShow(false)\n            if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\n            dispatch({ type: STATUS, status: null });\n            if (onCloseFunction) {\n              onCloseFunction()\n            }\n          }}\n          size=\"lg\"\n          style={{ minHeight: \"280px\" }}\n          bodyOpenClassName=\"p-3\"\n        >\n          {/* <div className='d-flex flex-row-reverse'>\n            <i className='pr-2 pt-2 iconU-modalClose' onClick={() => setShow(false)}></i>\n          </div>\n          <CModalHeader className=\"px-5 pt-3 border-none\">\n              <CModalTitle className={`text LatoBold ${colorText}`}>\n                {title}\n              </CModalTitle> */}\n\n          <div className=\"d-flex flex-row-reverse\">\n            <i\n              className=\"pr-3 pt-3 iconU-modalClose\"\n              onClick={() => {\n                setShow(false)\n                if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\n                dispatch({ type: STATUS, status: null });\n                if (onCloseFunction) {\n                  onCloseFunction()\n                }\n              }}\n            ></i>\n          </div>\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className={`text LatoBold ${colorText}`}>\n              {title} <span><i className={`em ${icon}`}></i></span>\n            </CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">{msg1}</p>\n            <p className=\"text\">{msg2}</p>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            {cancelButtonTitle ? (\n              <CButton\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\n                onClick={() => {\n                  if (refreshOnCancel) {\n                    if (typeof (refresh) === 'function') refresh()\n                    else refreshPage({ refresh: true });\n                  } else {\n                    onClose({\n                      setShow,\n                      parentOncCloseFunction: onCloseFunction,\n                    });\n                  }\n                  dispatch({ type: STATUS, status: null });\n                }}\n              >\n                {cancelButtonTitle}\n              </CButton>\n            ) : null}\n            {actionButtonTitle ? (\n              <CButton\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\n                onClick={() => {\n                  if (actionButtonEvent) {\n                    actionButtonEvent();\n                    setShow(false);\n                  } else {\n                    setShow(false)\n                  }\n                }\n                }\n              >\n                {actionButtonTitle}\n              </CButton>\n            ) : null}{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default PopUp;\n","export const onClose = ({ setShow, parentOncCloseFunction }) => {\n  setShow(false);\n  if (parentOncCloseFunction) {\n    parentOncCloseFunction();\n  }\n\n};\n\nexport const refreshPage = ({ refresh = true }) => {\n  if (refresh === true) {\n    window.location.reload(false);\n  }\n};\n","import { isInteger } from \"formik\";\n\nexport const next = ({\n  e,\n  state,\n  isCaptcha,\n  setIsValidated,\n  setIsType,\n  isType,\n  isValidated,\n  submit\n}) => {\n  const key = e.key; // const {key} = event; ES6+\n  let type = [...isType];\n\n  //if press enter\n  if (key === \"Enter\"){\n    if(isValidated){\n      submit();\n    }else{\n      return;\n    }\n  }\n\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\",\"Delete\"];\n  if (arr_tmp.includes(key)) {\n    return 0;\n  } else if (key === \"Backspace\") {\n    let type_ = [...isType];\n    let state_ = type_[state];\n    if (state_ == \"\" && state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\n      type_[state - 1] = \"\";\n      type[state - 1] = \"\";\n    } \n  } else if (key === \"ArrowLeft\") {\n    if (state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) - 1))\n        .setSelectionRange(-1, -1);\n\n      return 0;\n    }\n  } else if (key === \"ArrowRight\") {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) + 1))\n        .setSelectionRange(-1, -1);\n      return 0;\n    }\n  } else {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n    }\n  }\n\n  if (key === \"Backspace\") {\n    type[state] = \"\";\n  } else {\n    type[state] = key.toUpperCase();\n  }\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\n  let allowedChar = char.split(\"\");\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\n    setIsType(type);\n  } else {\n    return 0;\n  }\n\n  let stat = true;\n  isCaptcha.map((data, index) => {\n    // if (index == 0) {\n    //   return;\n    // }\n    if (!(type[index + 1] == isCaptcha[index])) {\n      stat = false;\n    } \n  });\n  setIsValidated(stat);\n};\n\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\n  if (module?.length) {\n    let newModule = [];\n    module.map((list) => {\n      list.poList.map((po) => {\n        po.itemList.map((item) => {\n          const { qty, grade } = item;\n          const _qty = isInteger(qty)\n            ? parseInt(qty)\n            : !qty\n              ? 0\n              : parseFloat(qty);\n          const _sku = noSkuChecking\n            ? list.skuName\n            : moduleName === \"waste\"\n              ? item.wasteType?.label\n                ? item.wasteType?.label\n                : list.skuName\n              : grade?.label;\n          const _toWaste =\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\" ||\n                item.wasteType?.label === \"Waste\"\n                ? true\n                : false\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\n                ? true\n                : false;\n          const _uom = noSkuChecking\n            ? list.unitOfMeassures\n            : grade?.uom === \"gram\"\n              ? \"kg\"\n              : grade?.uom;\n          let newSku = {\n            sku: _sku,\n            qty: _qty,\n            uom: _uom,\n            wqty: 0,\n            swqty: 0,\n          };\n          if (_toWaste) {\n            newSku.qty = 0;\n            newSku.sku = list.skuName;\n          }\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Waste\"\n              : grade?.label === \"Waste\"\n          )\n            newSku.wqty = _qty;\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\"\n              : grade?.label === \"Semi Waste\"\n          )\n            newSku.swqty = _qty;\n          const isExist = newModule.findIndex(\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\n          );\n\n          if (moduleName !== \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (grade?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\n            }\n          }\n\n          if (moduleName === \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (item.wasteType?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (item.wasteType?.label === \"Waste\")\n                newModule[isExist].wqty += _qty;\n            }\n          }\n        });\n      });\n    });\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\n    const i = newModule.findIndex((s) => s.sku === skuName);\n    newModule.forEach((sku) => {\n      if (i !== -1) {\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\n      }\n    });\n    return newModule;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { useSelector } from \"react-redux\";\nimport { next, skuListUpdateCheck } from \"./services.js\";\nimport { totalQty } from \"Page/StockEntry/GeneralServices/moduleServices\";\n\nconst ModalsConfirmation = ({\n  moduleEntry,\n  confirmation,\n  setConfirmation,\n  save,\n  submit,\n  isSuccess,\n  isLoading,\n  moveAll,\n  setAction,\n  moduleName,\n  noSkuChecking,\n  singleViewData,\n}) => {\n  const dimention = document.documentElement.clientHeight;\n  const height = dimention - 300;\n\n  let buttonName = \"Submit\";\n\n  if (confirmation.name === \"save\") buttonName = \"Save\";\n  useEffect(() => {\n    if (isSuccess) setConfirmation({ show: false, name: null });\n  }, [isSuccess]);\n  window.onkeydown = (e) =>\n    e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null;\n\n  useEffect(() => {\n    setAction(confirmation.name);\n  }, [confirmation]);\n\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry;\n\n  const areaDestinationName = module?.jobPost?.areaDestinationName;\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName;\n  const areaName = module?.jobPost?.areaName;\n\n  const skuListUpdate = skuListUpdateCheck(\n    module?.jobPost.list,\n    noSkuChecking,\n    moduleName\n  );\n  return (\n    <CRow\n      className={\"modalConfirmation \" + (confirmation.show ? null : \"d-none\")}\n    >\n      <CCol>\n        <CModal show={confirmation.show} closeOnBackdrop={false}>\n          <CModalHeader className=\"px-4 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">\n              Confirmation{\" \"}\n              <span>\n                <i className=\"em em-pray\"></i>\n              </span>\n            </CModalTitle>\n            <label\n              tabIndex=\"0\"\n              onKeyDown={(e) =>\n                e.keyCode === 13\n                  ? setConfirmation({ show: false, name: null })\n                  : false\n              }\n              onClick={() => setConfirmation({ show: false, name: null })}\n              className=\"sku-item iconU-modalClose\"\n            />\n          </CModalHeader>\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\n            <p className=\"text mb-2\">\n              <span>{`Are you sure want to ${\n                areaName == \"Waste\" ? \"update\" : \"send\"\n              } this Item `}</span>\n              <span\n                className={` ${areaDestinationName ? null : \"d-none\"}`}\n              >{` from`}</span>\n              <span\n                className={`green ${areaDestinationName ? null : \"d-none\"}`}\n              >{` ${areaName} `}</span>\n              <span>\n                {moduleName == \"outbound\"\n                  ? \"from\"\n                  : moduleName === \"repack\"\n                  ? \"\"\n                  : \"to\"}{\" \"}\n              </span>\n              <span\n                className={`green ${moduleName !== \"repack\" ? null : \"d-none\"}`}\n              >{` ${\n                moduleName === \"stockTransfer\"\n                  ? warehouseDestinationName\n                  : areaDestinationName\n                  ? areaDestinationName\n                  : areaName\n              } `}</span>\n            </p>\n            <p className=\"text\">\n              Please double check this list, this record will store to database.\n            </p>\n            <div\n              style={{\n                minHeight: height,\n                maxHeight: height,\n                overflow: \"auto\",\n                border: \"1px solid var(--lineGrey)\",\n              }}\n            >\n              <table>\n                <thead>\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Weight\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Semi Waste\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Waste\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {skuListUpdate?.map((data) => (\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                      <td style={{ maxWidth: \"160px\" }}>{data.sku}</td>\n                      <td\n                        className=\"text-right py-3\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        {`${totalQty(data?.qty)}`}\n                      </td>\n                      <td\n                        className=\"text-right text-nowrap\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        <span className=\"text-nowrap\">{`${totalQty(\n                          data?.swqty\n                        )} `}</span>\n                      </td>\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\n                        {`${totalQty(data?.wqty)}`}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? setConfirmation({ show: false, name: null })\n                    : false\n                }\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\n                onClick={() => setConfirmation({ show: false, name: null })}\n              >\n                Cancel\n              </CButton>\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? isLoading\n                      ? null\n                      : confirmation.name === \"save\"\n                      ? save()\n                      : submit()\n                    : false\n                }\n                className={`${\n                  isLoading ? \"bg-softGreen text\" : \"bg-green text-white\"\n                } no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\n                onClick={() =>\n                  isLoading\n                    ? null\n                    : confirmation.name === \"save\"\n                    ? save()\n                    : submit()\n                }\n              >\n                {isLoading ? \"Processing...\" : buttonName}\n              </CButton>{\" \"}\n            </div>\n          </CModalBody>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst ModalsCaptcha = ({\n  show = false,\n  setIsShowModal,\n  submit,\n  submitText = \"Submit\",\n}) => {\n  //random text\n  var text = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var charactersLength = characters.length;\n  var text_split = [];\n  for (var i = 0; i < 3; i++) {\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\n    text += r;\n    text_split.push(r);\n  }\n\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\n  const [isValidated, setIsValidated] = React.useState(false);\n  const [isType, setIsType] = React.useState([]);\n\n  //reset if visible = false\n  useEffect(() => {\n    if (show === true) {\n      document.getElementById(\"t1\").value = \"\";\n      document.getElementById(\"t2\").value = \"\";\n      document.getElementById(\"t3\").value = \"\";\n    }\n  }, [show]);\n\n  return (\n    <CRow className={show ? null : \"d-none\"}>\n      <CCol>\n        <CModal\n          show={show}\n          onClose={() => {\n            setIsShowModal(false);\n          }}\n          size=\"lg\"\n          style={{ height: \"400px\" }}\n        >\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\n              {selectorCsvFileName}?\n            </p>\n            <p className=\"text\">\n              Once uploaded this record will store to databases.\n            </p>\n            <p className=\"text mb-2\">\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\n            </p>\n\n            <div className=\"captcha-box\">\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 1,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t1\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[0]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 2,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t2\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input ml-0 mr-0\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[1]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 3,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t3\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[2]}\n              />\n            </div>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            <CButton\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\n              onClick={() => {\n                setIsShowModal(false);\n              }}\n            >\n              Cancel\n            </CButton>\n            <CButton\n              className={\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\n              }\n              onClick={() => {\n                submit();\n                setIsValidated(false);\n              }}\n            >\n              {submitText}\n            </CButton>{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport { ModalsConfirmation, ModalsCaptcha };\n","import React from \"react\";\nimport { CCard } from \"@coreui/react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"./bootstrapTable-style.scss\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport axios from \"axios\";\n\n//cell editable\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\n\nclass TableEditable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validateStatus: false,\n      validateResult: \"Please Wait...\",\n      globalData: this.props.globalData,\n      rowCount: 0,\n      keyy: 0,\n      triggerRender: 0\n    };  \n    this.validatePOSKUStockTransfer = this.validatePOSKUStockTransfer.bind(this);\n    this.validateSKUNumber = this.validateSKUNumber.bind(this);\n    \n  } \n  changeOutboundReason = (row) => {\n    setTimeout(() => {\n      let elem = document.getElementById(`row${row}-outboundReason`);\n      elem.classList.add(\"red\", \"tooltip-custom\");\n      elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\n    }, 300);\n  }\n\n  changeWarehouseUuid = (\n    value,\n    column,\n    columnName,\n    row,\n    warehouseCodeList,\n    warehouseUuidList,\n    warehouseNameList\n  ) => {\n    const { setCsvDataTmp, globalData } = this.props;\n    let tmpdata = globalData;\n    var index = tmpdata.findIndex((obj) => obj.id == row);\n    let i = warehouseCodeList.indexOf(value);\n    tmpdata[index][column] = warehouseUuidList[i];\n    tmpdata[index][columnName] = warehouseNameList[i];\n\n    console.clear() \n    setTimeout(async () => {\n      setCsvDataTmp(tmpdata);\n    }, 400);\n  };\n\n  validatePOSKU = async (id, row, idColumn) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;\n    if(transaction==\"additional_inbound\"){\n      return;\n    }\n\n    let tmpdata = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/stocktake/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        elem.classList.add(\"red\");\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          var index = tmpdata.findIndex((obj) => obj.id == row);\n          if (data[0] && data[0].isExist === true) {\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\n            tmpdata[index].wmsPoSkuCodeStatus = true;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = data[0].expiryDate;\n            tmpdata[index].inboundDate = data[0].inboundDate;\n            tmpdata[index].supplierName = data[0].supplierName;\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\n            tmpdata[index].uom = data[0].uom;\n            tmpdata[index].photos = data[0].photos;\n            elem.classList.remove(\"red\");\n            elem.classList.add(\"hiddenTooltip\");\n          } else {\n            tmpdata[index].wmsPoSkuCodeStatus = false;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = \"\";\n            tmpdata[index].inboundDate = \"\";\n            tmpdata[index].supplierName = \"\";\n            tmpdata[index].supplierUuid = \"\";\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\n          }\n          setCsvDataTmp(tmpdata);\n        });\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validatePOSKUStockTransfer = async (newValue, row, idColumn, key) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;  \n    let tmpdata = globalData;\n    \n    var index = tmpdata.findIndex((obj) => obj.id == row.id); \n    // console.log(tmpdata)\n    // console.log(row.id, row)\n    // console.log(index)\n\n    try {\n      const url = \"/stocktransfer/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      let payloadPO = [{\n        \"id\": row.id,\n        \"poSkuCode\": key==\"wmsPoSkuCode\" ? newValue : (row.poSkuCode?row.poSkuCode:\"\"),\n        \"skuNumber\": key==\"skuNumber\"? newValue?.skuNumber: row.skuNumber,\n        \"skuUuid\": key==\"skuNumber\"? newValue?.skuUuid:row.skuUuid,\n        \"warehouseSource\": row.warehouseSource,\n        \"areaSource\": row.areaSource,\n        \"weight\": key==\"qty\"?newValue:row.qty\n      }]; \n\n      setTimeout(async () => {\n        //setvalidate false\n        setIsValidate(false);\n\n        //elemen column\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        // elem.classList.remove(\"hiddenTooltip\");\n        // elem.classList.add(\"red\");  \n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: payloadPO },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          if (data[0]) {\n            if(data[0].isExist === true && data[0].isValid === true){\n              tmpdata[index]['rowStatus'] = true;\n              tmpdata[index]['rowReason'] = \"\";\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }else{\n              tmpdata[index]['rowStatus'] = false;\n              tmpdata[index]['rowReason'] = data[0]?.errorMessage;\n            }\n            tmpdata[index]['wmsPoSkuCode'] = data[0]?.wmsPoSkuCode ;\n            tmpdata[index]['wmsPoSkuCodeStatus'] = data[0]?.isExist && data[0]?.isValid;\n            tmpdata[index]['wmsPoSkuCodeReason'] = data[0]?.errorMessage;\n            tmpdata[index]['expiryDate'] = data[0]?.expiryDate;\n            tmpdata[index]['inboundDate'] = data[0]?.inboundDate;\n            tmpdata[index]['supplierName'] = data[0]?.supplierName;\n            tmpdata[index]['supplierUuid'] = data[0]?.supplierUuid;\n            tmpdata[index]['uom'] = data[0]?.uom;\n            tmpdata[index]['photos'] = data[0]?.photos;\n          } else {\n            tmpdata[index]['wmsPoSkuCodeStatus'] = false;\n            tmpdata[index]['wmsPoSkuCodeReason'] = response?.data?.message;\n            tmpdata[index]['expiryDate'] = \"\";\n            tmpdata[index]['inboundDate'] = \"\";\n            tmpdata[index]['supplierName'] = \"\";\n            tmpdata[index]['supplierUuid'] = \"\";\n            tmpdata[index]['rowStatus'] = false;\n            tmpdata[index]['rowReason'] = response?.data?.message;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = response?.data?.message;\n          } \n\n          if(key==\"skuNumber\"){ \n            tmpdata[index][\"skuNumber\"] = newValue.skuNumber;\n            tmpdata[index][\"skuNumberReason\"] = newValue.skuDescription;\n            tmpdata[index][\"skuNumberStatus\"] = true;\n            tmpdata[index][\"skuUuid\"] = newValue.skuUuid;\n          }\n          setCsvDataTmp(tmpdata); \n        }); \n        let tmpKey = this.state.keyy + 1; \n        this.setState({keyy: tmpKey}); \n      }, 500);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validateOutbountReason = (value, row, idColumn) => {\n    const { globalData } = this.props;\n    let tmp_data = globalData;\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\n      this.changeOutboundReason(row)\n    }\n  };\n\n  validateOutbountType = (value, row, idColumn) => {\n    const { globalData, setIsValidate } = this.props;\n    let tmp_data = globalData;\n    setIsValidate(false);\n    if (value.toUpperCase() !== \"LAINNYA\") {\n      setIsValidate(true);\n      return 0;\n    }\n\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (datax[\"outboundReason\"] == \"\") {\n      this.changeOutboundReason(row);\n    }\n  };\n\n  validateSKUNumber = async (id, row, idColumn, key, rowData = null) => {\n    const { globalData, setCsvDataTmp, setIsValidate,transaction } = this.props;\n    let tmp_data = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/oss/skuByNumbers\";\n      let elem = null;\n      let elemspan = null;\n      \n      // for validating stock transfer\n      let stats = false;\n      let newSkuData = {} \n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { skuList: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          let isSuccess = response.data.isSuccess;\n          var index = tmp_data.findIndex((obj) => obj.id == row);\n          if (isSuccess === true && data.length > 0) {\n            stats = true;\n            tmp_data[index][key] = data[0].skuNumber;\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\n            tmp_data[index][key + \"Status\"] = true;\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\n            newSkuData = {\n              skuUuid: data[0].id,\n              skuNumber: data[0].skuNumber,\n              skuDescription: data[0].skuDescription,\n              photo: data[0].photo\n            }\n\n            //custom\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = data[0].id;\n              tmp_data[index].photo = data[0].imageMd;\n            }\n\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = data[0].uom;\n            }\n            \n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = data[0].uom;\n            }\n\n            \n            if(transaction!==\"stockTransfer\"){\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }\n\n          } else {\n            stats = false;\n            tmp_data[index][key] = id;\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\n            tmp_data[index][key + \"Status\"] = false;\n            tmp_data[index][key + \"Uuid\"] = null;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"SKU Number Not Found\";\n\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = \"\";\n              tmp_data[index].photo = \"\";\n            }\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = null;\n            }\n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = \"\";\n            }\n          } \n        });\n\n        if(transaction==\"stockTransfer\" && stats === true){ \n          this.validatePOSKUStockTransfer(newSkuData, rowData, idColumn, 'skuNumber')\n        }else{\n          setCsvDataTmp(tmp_data);\n        }\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  render() {\n    const {\n      columns,\n      hiddenRows,\n      tableClass,\n      warehouseArea,\n      outboundType,\n      setCheckingCsv, \n      editable = true,\n      warehousesData = [],\n      transaction,\n      globalData\n    } = this.props;\n    let { validateStatus,  keyy } = this.state;\n    \n    //wh\n    let warehouseCodeList = [];\n    let warehouseUuidList = [];\n    let warehouseNameList = [];\n    if (warehousesData) {\n      let tmp = warehousesData?.data?.map((d) => {\n        warehouseCodeList.push(d.code);\n        warehouseUuidList.push(d.id);\n        warehouseNameList.push(d.name);\n      });\n    }\n\n    //wh area\n    let wh_area_label =\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\n    let wh_outboundtype_label = !outboundType\n      ? []\n      : outboundType.map((data) => data.label.toUpperCase());\n    let wh_outboundtype_value = !outboundType\n      ? []\n      : outboundType.map((data) => data.value);\n    const newFormat = columns.map((data, index) => {\n      data.validator = (newValue, row, column, done) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let reason = null;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n\n        let stockTransferColumnCheck = ['wmsPoSkuCode', 'qty']\n        if (stockTransferColumnCheck.includes(key) && transaction==\"stockTransfer\") {\n          this.validatePOSKUStockTransfer(newValue, row, idColumn, key);\n          stat = true;\n        }else if(key == \"wmsPoSkuCode\" ){\n          this.validatePOSKU(newValue, row.id, idColumn, key);\n          stat = true; \n        }\n\n        if (key == \"skuNumber\") {\n          this.validateSKUNumber(newValue, row.id, idColumn, key, row);\n          stat = true;\n        }\n\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type not found\";\n            checkType = false;\n            stat = false;\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        } else if (key == \"newGrade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            //if not waste or semi waste\n            if (parseInt(newValue)) {\n              //if number\n              stat = true;\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\n            } else if (newValue == \"\") {\n              row[\"newGradeUuid\"] = null;\n              row[\"newGradeUom\"] = null;\n              stat = true;\n            } else {\n              //if not number => undefined\n              reason = \"Grade Undefined\";\n              checkType = false;\n              stat = false;\n            }\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        }\n\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Outbound Type Not Found`;\n          } else {\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\n            stat = true;\n            this.validateOutbountType(newValue, row.id, idColumn);\n          }\n        }\n\n        if (key == \"outboundReason\") {\n          this.validateOutbountReason(newValue, row.id, idColumn);\n        }\n\n        if (key == \"warehouse\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseUuid\",\n              \"warehouseName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          }\n        }\n        if (key == \"warehouseDestination\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseDestinationUuid\",\n              \"warehouseDestinationName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          } \n        }\n\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Warehouse Area Not Found`;\n          } else {\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\n            if (key == \"areaNameDestination\") {\n              row[\"areaDestination\"] = wh_area_value[i];\n            } else {\n              row[\"areaSource\"] = wh_area_value[i];\n            }\n            stat = true;\n          }\n        }\n\n        if (key == \"newPack\") {\n          let checkTypenewPack = isNaN(newValue) ? false : true;\n          if (!checkTypenewPack) {\n            stat = false;\n            reason = `Pack Should be a number`;\n          } else {\n            stat = true;\n          }\n        } \n        \n\n        let checkType = null;\n        if (data.type == \"number\") {\n          checkType = isNaN(newValue) ? false : true;\n        } else {\n          checkType = true;\n        }\n        if (checkType === false) {\n          reason = `${data.text} Should be a ${data.type}`;\n        } \n\n        \n        if (key == \"wmsPoSkuCode\" && transaction == \"stockTransfer\") {\n          if(isNaN(newValue)){\n            checkType = false;\n            reason = `${data.text} Should be a number`;\n            stat = false;\n          } \n        } \n\n        //some field can null\n        let canNull = [\n          \"grade\",\n          \"outboundReason\",\n          \"ripenessLevel\",\n          \"newRipeness\",\n          \"reason\",\n          \"expiryDate\"\n        ]; \n\n        if (canNull.includes(key) && newValue === \"\") {\n          reason = \"\";\n          checkType = true;\n          stat = true;\n        } else if (key == \"grade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type Not Found\";\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //check ripenesslevel\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\n          let allowedRipenessLevel = [0, 1, 2, 3];\n          if (\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\n            newValue == \"\"\n          ) {\n            checkType = true;\n            stat = true;\n            reason = \"\";\n            if (newValue == \"\") {\n              newValue = \"\";\n            }\n          } else {\n            checkType = false;\n            stat = false;\n            reason = \"Undefined Ripeness Level\";\n          }\n        }\n\n        //check date\n        if (data.type == \"date_indo\") {\n          //checking date\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\n          if (newValue.match(regex_date)) {\n            checkType = true;\n            stat = true;\n          } else if (newValue == \"\") {\n            checkType = true;\n            stat = true;\n          } else {\n            reason = `Date format must be 'dd-mm-yyyy'`;\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //set notif\n        row[keyReason] = reason;\n        if (stat && checkType) {\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\n          if (!specialKey.includes(key)) {\n            //some key have their own checking, so if not in array do checking error\n            row[keyStatus] = true;\n            setCheckingCsv();\n          }\n        } \n         \n        return {\n          valid: stat && checkType ? true : false,\n          message: reason,\n        };\n      };\n\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n        let txt = row[keyReason];\n        \n        // if status column = false\n        // that mean there's error or not valid data in some column\n        if (row[keyStatus] === false) {\n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {txt}\n              </span>\n            </div>\n          );\n        }\n\n        // if global row status = false\n        // that mean there's wmsposkucode validation error, and makes 1 line become red colour\n        // for now is only for stock transfer  \n        if ( transaction==\"stockTransfer\" &&  row['rowStatus'] === false) { \n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {row['rowReason']}\n              </span>\n            </div>\n          );\n        }\n\n        \n        // if status column = true\n        // No problem \n        return (\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\n            {cell}\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\n              {txt}\n            </span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n    console.clear();  \n    console.log(globalData)\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={globalData}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          cellEdit={\n            editable === true\n              ? cellEditFactory({\n                  mode: \"click\",\n                  blurToSave: true,\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\n                })\n              : null\n          }\n          bordered={false}\n          hiddenRows={hiddenRows}\n          key={keyy}\n        />\n      </CCard>\n    );\n  }\n}\n\nclass TableResult extends React.Component {\n  render() {\n    const { columns, tableClass, data } = this.props;\n\n    const newFormat = columns.map((data, index) => {\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\n          return (\n            <div className=\"tooltip-custom red\">\n              {cell}\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\n            </div>\n          );\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\n          return (\n            <div className=\"green\">\n              {cell}\n              <span></span>\n            </div>\n          );\n        }\n\n        return (\n          <div>\n            {cell}\n            <span></span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={data}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          bordered={false}\n        />\n      </CCard>\n    );\n  }\n}\n\nexport { TableResult, TableEditable };\n"],"sourceRoot":""}