{"version":3,"sources":["Page/StockEntry/Movement/Upload/Review.jsx","Page/StockEntry/Movement/Upload/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/BootstrapTable/index.jsx"],"names":["withRouter","props","dispatch","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","csvData","selectorCsvField","csvField","selectorWarehouseArea","warehouseAreaCsv","selectorOutboundType","outboundTypeCsv","selectorStatus","status","submitStatus","setSubmitStatus","React","useState","isShowModal","setIsShowModal","isHiddenRows","setIsHiddenRows","isShowErrorOnly","setIsShowErrorOnly","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","setCheckingCsv","title","setTitle","msg1","setMsg1","msg2","setMsg2","cancelButtonTitle","setCancelButtonTitle","actionButtonTitle","setActionButtonTitle","isSubmitText","setIsSubmitText","actionButtonClass","setActionButtonClass","colourTitle","setColourTitle","useEffect","_ref4","undefined","stats","map","data","index","dataField","indexField","toUpperCase","checking_error","history","push","setCsvDataTmp","param","_ref3","type","STOK_TAKE_UPLOAD_JSON","setCsvData","_ref","tmp_arr_false","tmp_arr_true","stat","i","dataColumn","indexColumn","key","includes","ret","filter","x","length","showErrorsOnly","createElement","className","TableEditable","globalData","columns","tableClass","hiddenRows","warehouseArea","outboundType","style","lineHeight","onClick","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","cancelButtonClass","actionButtonEvent","ModalsCaptcha","submit","async","_ref5","newSchema","text","sort","submitText","show","next","e","isCaptcha","setIsValidated","setIsType","isType","isValidated","type_","document","getElementById","parseInt","focus","value","setSelectionRange","split","ModalsConfirmation","_module$jobPost","_module$jobPost2","_module$jobPost3","moduleEntry","confirmation","setConfirmation","save","isSuccess","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","name","window","onkeydown","keyCode","module","areaDestinationName","jobPost","warehouseDestinationName","areaName","skuListUpdate","skuListUpdateCheck","newModule","list","poList","po","itemList","item","_item$wasteType","_item$wasteType2","_item$wasteType3","_item$wasteType4","_item$wasteType5","_item$wasteType6","qty","grade","_qty","isInteger","parseFloat","_sku","skuName","wasteType","label","_toWaste","_uom","unitOfMeassures","uom","newSku","sku","wqty","swqty","isExist","findIndex","_item$wasteType7","_item$wasteType8","s","forEach","CRow","CCol","CModal","closeOnBackdrop","CModalHeader","CModalTitle","tabIndex","onKeyDown","CModalBody","minHeight","concat","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","CButton","_ref2","characters","charactersLength","text_split","r","charAt","Math","floor","random","setIsCaptcha","isCaptchaText","setIsCaptchaText","onClose","size","autocomplete","onKeyUp","id","textTransform","maxLength","placeholder","CModalFooter","Component","constructor","_this","super","this","changeOutboundReason","row","setTimeout","elem","classList","add","innerHTML","changeWarehouseUuid","column","columnName","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","obj","indexOf","console","clear","validatePOSKU","idColumn","transaction","url","elemspan","axios","method","then","response","_response$data","wmsPoSkuCode","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","expiryDate","inboundDate","supplierName","supplierUuid","photos","remove","error","validatePOSKUStockTransfer","newValue","payloadPO","poSkuCode","skuNumber","skuUuid","warehouseSource","areaSource","_response$data2","_data$2","_data$3","_data$4","_data$5","_data$6","_data$7","_data$8","_data$9","_data$10","_data$11","_data$","isValid","errorMessage","_response$data3","_response$data4","_response$data5","message","skuDescription","tmpKey","keyy","setState","validateOutbountReason","tmp_data","datax","validateOutbountType","validateSKUNumber","rowData","arguments","newSkuData","skuList","_response$data6","photo","imageMd","newGradeUom","validateStatus","validateResult","rowCount","triggerRender","bind","render","editable","warehousesData","_warehousesData$data","d","code","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","done","keyStatus","keyReason","reason","arr_grade","checkType","isNaN","regex_date","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","log","CCard","BootstrapTable","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered","TableResult"],"mappings":"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","file":"static/js/54.f5514923.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport FileUploader from \"Component/FileUploader\";\nimport { TableEditable } from \"Component/BootstrapTable\";\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\nimport \"../index.scss\";\nimport {\n  showErrorsOnly,\n  deleteErrorsField,\n  setCsvData,\n  submit,\n  checking_error\n} from \"./services.js\";\nimport PopUp from \"Component/Modal/PopUp\";\n\nconst Upload = (props) => {\n  const dispatch = useDispatch();\n\n  //selector\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const selectorCsvData = useSelector((state) => state.csvData);\n  const selectorCsvField = useSelector((state) => state.csvField);\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\n  const selectorOutboundType = useSelector((state) => state.outboundTypeCsv);\n  const selectorStatus = useSelector((state) => state.status);\n  const [submitStatus, setSubmitStatus] = React.useState(false);\n\n  //state\n  const [isShowModal, setIsShowModal] = React.useState(false);\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\n  const [isValidate, setIsValidate] = React.useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\n  const [title, setTitle] = React.useState(null);\n  const [msg1, setMsg1] = React.useState(null);\n  const [msg2, setMsg2] = React.useState(null);\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\n  const [colourTitle, setColourTitle] = React.useState(null);\n\n  useEffect(() => {\n    checking_error({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      setIsValidate,\n      setCheckingCsv\n    });\n  }, [checkingCsv]);\n\n  useEffect(() => {\n    if (submitStatus === 'success') {\n      setActionButtonTitle('Done');\n      setCancelButtonTitle('');\n      setMsg1(selectorCsvFileName + ' upload successfull. ');\n      setMsg2('Would you import another file?');\n      setTitle('Success');\n      setActionButtonClass('bg-green background ml-0');\n      setColourTitle('green');\n      setModalShow(true);\n      //props.history.push(\"/inventory-entry/movement/CSV-upload\");\n    }\n  }, [submitStatus]);\n\n  if (selectorCsvData === undefined || selectorCsvData === null) {\n    props.history.push(\"/inventory-entry/movement/CSV-upload\");\n    return 0;\n  }\n\n  const setCsvDataTmp = (param) => {\n    setCsvData({ param, dispatch, setCheckingCsv });\n    showErrorsOnly({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      isShowErrorOnly: false,\n      setIsShowErrorOnly,\n      setIsHiddenRows,\n      setCheckingCsv\n    })\n  };\n\n  return (\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\n      <TableEditable\n        globalData={selectorCsvData} //Required\n        columns={selectorCsvField} //Required\n        tableClass=\"reviewTable\"\n        hiddenRows={isHiddenRows}\n        warehouseArea={selectorWarehouseArea}\n        outboundType={selectorOutboundType}\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\n        setIsValidate={(param) => setIsValidate(param)}\n        dispatch={dispatch}\n        setCheckingCsv={setCheckingCsv}\n      />\n\n      <div className=\"row pt-3\">\n        <div className=\"col-4\">\n         \n        </div>\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\n          Review your imported file: {selectorCsvFileName} (\n          {selectorCsvData.length || 0} Lines)\n        </div>\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\n            onClick={() => props.history.goBack()}\n          >\n            Discard\n          </button>\n\n          <button\n            type=\"button\"\n            class={\n              \"btn px-5 mr-3 text-white no-shadow float-right bg-green\" \n            }\n            onClick={() => setIsShowModal(!isShowModal)}\n          >\n            Submit\n          </button>\n        </div>\n      </div>\n\n      <PopUp\n        status={selectorStatus}\n        onCloseFunction={() => {\n          setModalShow(false);\n          setSubmitStatus(false)\n        }}\n        statusDisplay={modalShow}\n        title={title}\n        cancelButtonTitle={cancelButtonTitle}\n        actionButtonTitle={actionButtonTitle}\n        colorText={colourTitle}\n        refreshOnCancel={false}\n        msg1={msg1}\n        msg2={msg2}\n        cancelButtonClass={null}\n        actionButtonClass={actionButtonClass + \" ml-0\"}\n        actionButtonEvent={() => props.history.push(\"/inventory-entry/movement/CSV-upload\")}\n      />\n      <ModalsCaptcha\n        submit={() =>\n          submit({\n            dispatch,\n            csvData: selectorCsvData,\n            csvField: selectorCsvField,\n            setIsShowModal,\n            setIsSubmitText,\n            setSubmitStatus\n          })\n        }\n        submitText={isSubmitText}\n        show={isShowModal}\n        setIsShowModal={setIsShowModal}\n      />\n    </div>\n  );\n};\n\nexport default withRouter(Upload);\n","//other\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\nimport { submitCsv } from \"apiServices\";\nimport moment from \"moment\";\n\nexport const showErrorsOnly = ({\n  csvData,\n  csvField,\n  isShowErrorOnly,\n  setIsShowErrorOnly,\n  setIsHiddenRows,\n  setCheckingCsv,\n}) => {\n  // ;\n  let tmp_arr_false = [];\n  let tmp_arr_true = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    let i = index + 1;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n\n    if (stat === false) {\n      if (!tmp_arr_false.includes(i)) {\n        tmp_arr_false.push(i);\n      }\n    } else {\n      if (!tmp_arr_true.includes(i)) {\n        tmp_arr_true.push(i);\n      }\n    }\n  });\n\n  //return array\n  let ret = [];\n  if (isShowErrorOnly === true) {\n    //true = delete all row\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\n    if (ret.length == csvData.length) {\n      return 0;\n    }\n  } else {\n    ret = [];\n  }\n  setIsHiddenRows(ret);\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\n  setCheckingCsv(true);\n};\n\nexport const deleteErrorsField = ({\n  csvData,\n  csvField,\n  dispatch,\n  setCheckingCsv,\n}) => {\n  let new_arr = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n    if (stat === true) {\n      new_arr.push(data);\n    }\n  });\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\n  setCheckingCsv(true);\n};\n\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\n  setCheckingCsv(true);\n};\n\nexport const checking_error = ({\n  csvData,\n  csvField,\n  setIsValidate,\n  setCheckingCsv,\n}) => {\n  if (csvData === undefined) {\n    return 0;\n  }\n  let stats = true;\n  csvData.map((data, index) => {\n    csvField.map((dataField, indexField) => {\n      // console.log(data[dataField + 'status']);\n      let status = data[dataField.dataField + \"Status\"];\n\n      //jika outbound type = lainya, maka harus isi outbound reason\n      if (dataField.dataField == \"outboundType\") {\n        let type = data[dataField.dataField].toUpperCase();\n        if (type == \"LAINNYA\") {\n          if (data[\"outboundReason\"] == \"\") {\n            status = false;\n          }\n        }\n      }\n\n      if (status === false) {\n        // console.log(data, dataField.dataField, data[dataField.dataField + 'Status']);\n        stats = false;\n      }\n    });\n  });\n  if (stats === false) {\n    setIsValidate(false);\n  } else {\n    setIsValidate(true);\n  }\n  setCheckingCsv(false);\n};\n\nconst setHeader = (csvData) => {\n  //get time - created at\n  let time = new Date().getTime();\n  let d = new Date(time);\n  let n = d.getMilliseconds();\n  let list_area = [];\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    //in outbound csv upload only check area source\n    if (!list_area.includes(data.areaSource)) {\n      return_data.push({\n        id: index,\n        warehouseSource: warehouse_source,\n        warehouseDestination: warehouse_source,\n        areaSource: data.areaSource,\n        areaName: data.areaName,\n        areaDestination: data.areaDestination,\n        list: [],\n        createdAt: n,\n      });\n      list_area.push(data.areaSource);\n    }\n  });\n  return return_data;\n};\n\nconst getSKU = (csvData) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.skuUuid == data.skuUuid &&\n        header.warehouseSource == data.warehouseSource &&\n        header.areaSource == data.areaSource\n      ) {\n        available = true;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        warehouseSource: warehouse_source,\n        areaSource: data.areaSource,\n        skuUuid: data.skuUuid,\n        skuNumber: data.skuNumber,\n        unitOfMeassures: data.uom,\n        photo: data.photos,\n        poList: [],\n      });\n    }\n  });\n  return return_data;\n};\n\nconst checkGrade = (value) => {\n  if (!value) {\n    return;\n  }\n  if (value.toUpperCase() == \"SEMI WASTE\") {\n    return \"semi_waste\";\n  } else if (value.toUpperCase() == \"WASTE\") {\n    return \"waste\";\n  } else {\n    return value;\n  }\n};\n\nconst groupingPO = (csvData, skuList) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    let header_index = \"\";\n\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.warehouseSource == data.warehouseSource &&\n        header.areaSource == data.areaSource &&\n        header.areaDestination == data.areaDestination &&\n        header.skuUuid == data.skuUuid &&\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\n        header.ripenessLevel == data.ripenessLevel &&\n        header.expiryDateCol == data.expiryDateCol\n      ) {\n        available = true;\n        header_index = idx;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        skuUuid: data.skuUuid || \"\",\n        areaSource: data.areaSource || \"\",\n        areaDestination: data.areaDestination || \"\",\n        warehouseSource: warehouse_source || \"\",\n        expiryDateCol: data.expiryDateCol || \"\",\n        expiryDate:\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n        inboundDate: data.inboundDate || \"\",\n        supplierId: data.supplierUuid || \"\",\n        supplierName: data.supplierName || \"\",\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\n        codeGrade: data.skuUuid || \"\",\n        ripenessLevel: data.ripenessLevel || 0,\n        itemList: [],\n      });\n      header_index = return_data.length - 1;\n    }\n    return_data[header_index].itemList.push({\n      areaSource: data.areaSource,\n      areaName: data.areaName,\n      areaNameDestination: data.areaNameDestination,\n      skuNumber: data.skuNumber,\n      wmsPoSkuCode: data.wmsPoSkuCode,\n      ripeness: {\n        label: data.ripenessLevel || \"\",\n        value: data.ripenessLevel || 0,\n      },\n      note: data.reason,\n      expiryDate:\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n      expiryDateText: data.expiryDateCol,\n      qty: data.qty || 0,\n    });\n  });\n  return return_data;\n};\n\nconst setJobPost = (header, skuList, poGroup) => {\n  //insert PO to SKUList\n  skuList.map((skuListData, skuListIdx) => {\n    poGroup.map((poGroup, poGroupIndex) => {\n      if (\n        poGroup &&\n        poGroup.areaSource == skuListData.areaSource &&\n        poGroup.warehouseSource == skuListData.warehouseSource &&\n        poGroup.skuUuid == skuListData.skuUuid\n      ) {\n        skuList[skuListIdx][\"poList\"].push(poGroup);\n      }\n    });\n  });\n\n  //insert sku to Header\n  header.map((headerData, headerIdx) => {\n    skuList.map((skuListData, skuListDataIdx) => {\n      if (\n        poGroup &&\n        headerData.areaSource == skuListData.areaSource &&\n        headerData.warehouseSource == skuListData.warehouseSource\n      ) {\n        header[headerIdx][\"list\"].push(skuListData);\n      }\n    });\n  });\n\n  return header;\n};\n\nconst setResult = (result) => {\n  let arrayResult = [];\n  let i = 1;\n  result.list.map((dataHeader, indexHeader) => {\n    dataHeader.poList.map((poHeader, indexPo) => {\n      poHeader.itemList.map((data, index) => {\n        let isStatus = \"Failed\";\n        if (data.isSuccess) {\n          isStatus = \"Success\";\n        }\n        arrayResult.push({\n          id: i,\n          uploadStatus: isStatus || \"\",\n          uploadStatusReason: data.message,\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\n          skuNumber: data.skuNumber || \"\",\n          ripenessLevel: data.ripeness?.label || \"\",\n          qty: data.qty || 0,\n          reason: data.note || \"\",\n          grade: poHeader.codeGrade || \"\",\n          areaName: data.areaName || \"\",\n          areaNameDestination: data.areaNameDestination || \"\",\n          expiryDateCol: data.expiryDateText || \"\",\n        });\n        i++;\n      });\n    });\n  });\n  return arrayResult;\n};\n\nexport const submit = async ({\n  csvData,\n  csvField,\n  dispatch,\n  selectorStatus,\n  setIsShowModal,\n  setIsSubmitText,\n  setSubmitStatus,\n}) => {\n  setIsSubmitText(\"Loading...\");\n\n  //set header\n  //let header = await setHeader(csvData);\n\n  //get list sku\n  //let skuList = await getSKU(csvData);\n\n  //grouping PO\n  //let poGroup = await groupingPO(csvData, skuList);\n\n  //set JobPost\n  //let jobPost = await setJobPost(header, skuList, poGroup);\n\n  //submit\n  // let execute = await submitCsv({\n  //   dataCsv: jobPost,\n  //   setSubmitStatus,\n  //   dispatch,\n  //   transaction: \"movement\",\n  // });\n  // if (execute == \"error\") {\n  //   return 0;\n  // }\n\n  //set result\n  // let result = await setResult(execute?.data);\n  // await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\n\n  //renew schema for result\n  let newSchema = [];\n  newSchema.push({\n    dataField: \"uploadStatus\",\n    text: \"Upload Status\",\n    type: \"string\",\n    sort: true,\n  });\n  csvField.map((data, index) => {\n    newSchema.push(data);\n  });\n  //await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\n\n  setIsShowModal(false);\n  setIsSubmitText(\"Submit\");\n  setSubmitStatus(\"success\");\n};\n\nexport const submit_old = async ({\n  csvData,\n  dispatch,\n  selectorStatus,\n  setIsShowModal,\n  setIsSubmitText,\n  setSubmitStatus,\n}) => {\n  // console.clear()\n  setIsSubmitText(\"Loading...\");\n  // console.clear();\n  let jobHeader = [];\n\n  //0 get time\n  let time = new Date().getTime();\n  let d = new Date(time);\n  let n = d.getMilliseconds();\n\n  //1. set header\n  jobHeader = [\n    {\n      jobPost: {\n        id: 0,\n        warehouseSource: csvData[0].warehouseSource || \"\",\n        warehouseDestination: csvData[0].warehouseSource || \"\",\n        areaSource: csvData[0].areaSource || \"\",\n        areaDestination: csvData[0].areaDestination || \"\",\n        list: null,\n        createdAt: n,\n      },\n    },\n  ];\n\n  //2. get sku\n  let sku_uuid_array = [];\n  let sku_data = [];\n  csvData.map((data, index) => {\n    if (!sku_uuid_array.includes(data.skuUuid)) {\n      sku_uuid_array.push(data.skuUuid);\n      sku_data.push({\n        skuNumber: data.skuNumber,\n        skuUuid: data.skuUuid,\n        uom: data.uom,\n        photo: null,\n      });\n    }\n  });\n\n  // console.clear();\n  //3. get PO per sku\n  let po_array = [];\n  sku_data.forEach((data_sku, index_sku) => {\n    if (data_sku === null || data_sku === undefined || data_sku === \"\") {\n      return false;\n    }\n\n    let tmp_po = {};\n    tmp_po.skuUuid = data_sku.skuUuid;\n    tmp_po.skuNumber = data_sku.skuNumber;\n    tmp_po.unitOfMeassures = data_sku.uom;\n    tmp_po.photo = data_sku.photo;\n    tmp_po.poList = [];\n    csvData.map((data, index) => {\n      if (data.skuNumber !== data_sku.skuNumber) {\n        return false;\n      }\n\n      let tmp_po_array = {};\n      tmp_po_array.wmsPoSkuCode = data.wmsPoSkuCode || \"\";\n      tmp_po_array.supplierUuid = data.supplierUuid || \"\";\n      tmp_po_array.supplierName = data.supplierName || \"\";\n      tmp_po_array.codeGrade = data_sku.skuUuid;\n      tmp_po_array.inboundDate = data.inboundDate || \"\";\n      tmp_po_array.expiryDate = data.expiryDate || \"\";\n\n      tmp_po_array.qty = data.qty || \"\";\n      tmp_po_array.ripeness = data.ripenessLevel || 0;\n      tmp_po_array.outboundTypeCode = data.outboundTypeCode || \"\";\n      tmp_po_array.outboundReason = data.outboundReason || \"\";\n      tmp_po_array.inboundTypeCode = data.inboundTypeCode || \"\";\n      tmp_po.poList.push(tmp_po_array);\n    });\n    po_array.push(tmp_po);\n  });\n  //\n  //\n\n  //merapikan po_array\n  let po_array_fix = [];\n  po_array.forEach((data, index) => {\n    let tmp = {};\n    let po_code = [];\n    let po_list = [];\n    data.poList.map((data_po, index_po) => {\n      if (!po_code.includes(data_po.wmsPoSkuCode)) {\n        po_code.push(data_po.wmsPoSkuCode);\n        let tmp_po_array = {};\n        tmp_po_array.wmsPoSkuCode = data_po.wmsPoSkuCode;\n        tmp_po_array.supplierId = data_po.supplierUuid;\n        tmp_po_array.supplierName = data_po.supplierName;\n        tmp_po_array.codeGrade = data_po.codeGrade;\n        tmp_po_array.ripenessLevel = data_po.ripeness;\n\n        //date\n        tmp_po_array.inboundDate = data_po.inboundDate;\n        tmp_po_array.expiryDate =\n          moment(data_po.expiryDate, \"DD-MM-YYYY\").toDate().getTime() || \"\";\n\n        tmp_po_array.itemList = [];\n        po_list.push(tmp_po_array);\n      }\n\n      let index_po_code = po_code.indexOf(data_po.wmsPoSkuCode);\n      let tmp_itemlist = {};\n      tmp_itemlist.grade = { label: data_po.grade, value: data_po.grade };\n      tmp_itemlist.ripeness = {\n        label: data_po.ripeness,\n        value: data_po.ripeness,\n      };\n      tmp_itemlist.codeOutbound = {\n        label: data_po.outboundTypeCode,\n        value: data_po.outboundTypeCode,\n      };\n      tmp_itemlist.codeInbound = {\n        label: data_po.inboundTypeCode,\n        value: data_po.inboundTypeCode,\n      };\n      tmp_itemlist.qty = parseFloat(data_po.qty) || 0;\n      tmp_itemlist.pack = parseFloat(data_po.pack) || 0;\n      tmp_itemlist.reason = data_po.outboundReason;\n      po_list[index_po_code].itemList.push(tmp_itemlist);\n    });\n    tmp.skuUuid = data.skuUuid;\n    tmp.skuNumber = data.skuNumber;\n    tmp.unitOfMeassures = data.unitOfMeassures;\n    tmp.photo = data.photo;\n    tmp.poList = po_list;\n    po_array_fix.push(tmp);\n  });\n\n  //final\n  jobHeader[0].jobPost.list = po_array_fix;\n  // let ret = await submitMovementCsv({ dataCsv: jobHeader, dispatch });\n  let ret = await submitCsv({\n    dataCsv: jobHeader,\n    setSubmitStatus,\n    dispatch,\n    transaction: \"movement\",\n  });\n  setIsShowModal(false);\n  setIsSubmitText(\"Submit\");\n\n  // setActionButtonTitle('Done');\n  // setCancelButtonTitle('');\n  // setMsg1(fileName + ' upload successfull.');\n  // setMsg2('Would you import another file?');\n  // setTitle('Success');\n  // setActionButtonClass('bg-green background ml-0');\n  // setColourTitle('green');\n  // setModalShow(true);\n};\n","import { isInteger } from \"formik\";\n\nexport const next = ({\n  e,\n  state,\n  isCaptcha,\n  setIsValidated,\n  setIsType,\n  isType,\n  isValidated,\n  submit\n}) => {\n  const key = e.key; // const {key} = event; ES6+\n  let type = [...isType];\n\n  //if press enter\n  if (key === \"Enter\"){\n    if(isValidated){\n      submit();\n    }else{\n      return;\n    }\n  }\n\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\",\"Delete\"];\n  if (arr_tmp.includes(key)) {\n    return 0;\n  } else if (key === \"Backspace\") {\n    let type_ = [...isType];\n    let state_ = type_[state];\n    if (state_ == \"\" && state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\n      type_[state - 1] = \"\";\n      type[state - 1] = \"\";\n    } \n  } else if (key === \"ArrowLeft\") {\n    if (state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) - 1))\n        .setSelectionRange(-1, -1);\n\n      return 0;\n    }\n  } else if (key === \"ArrowRight\") {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) + 1))\n        .setSelectionRange(-1, -1);\n      return 0;\n    }\n  } else {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n    }\n  }\n\n  if (key === \"Backspace\") {\n    type[state] = \"\";\n  } else {\n    type[state] = key.toUpperCase();\n  }\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\n  let allowedChar = char.split(\"\");\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\n    setIsType(type);\n  } else {\n    return 0;\n  }\n\n  let stat = true;\n  isCaptcha.map((data, index) => {\n    // if (index == 0) {\n    //   return;\n    // }\n    if (!(type[index + 1] == isCaptcha[index])) {\n      stat = false;\n    } \n  });\n  setIsValidated(stat);\n};\n\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\n  if (module?.length) {\n    let newModule = [];\n    module.map((list) => {\n      list.poList.map((po) => {\n        po.itemList.map((item) => {\n          const { qty, grade } = item;\n          const _qty = isInteger(qty)\n            ? parseInt(qty)\n            : !qty\n              ? 0\n              : parseFloat(qty);\n          const _sku = noSkuChecking\n            ? list.skuName\n            : moduleName === \"waste\"\n              ? item.wasteType?.label\n                ? item.wasteType?.label\n                : list.skuName\n              : grade?.label;\n          const _toWaste =\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\" ||\n                item.wasteType?.label === \"Waste\"\n                ? true\n                : false\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\n                ? true\n                : false;\n          const _uom = noSkuChecking\n            ? list.unitOfMeassures\n            : grade?.uom === \"gram\"\n              ? \"kg\"\n              : grade?.uom;\n          let newSku = {\n            sku: _sku,\n            qty: _qty,\n            uom: _uom,\n            wqty: 0,\n            swqty: 0,\n          };\n          if (_toWaste) {\n            newSku.qty = 0;\n            newSku.sku = list.skuName;\n          }\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Waste\"\n              : grade?.label === \"Waste\"\n          )\n            newSku.wqty = _qty;\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\"\n              : grade?.label === \"Semi Waste\"\n          )\n            newSku.swqty = _qty;\n          const isExist = newModule.findIndex(\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\n          );\n\n          if (moduleName !== \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (grade?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\n            }\n          }\n\n          if (moduleName === \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (item.wasteType?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (item.wasteType?.label === \"Waste\")\n                newModule[isExist].wqty += _qty;\n            }\n          }\n        });\n      });\n    });\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\n    const i = newModule.findIndex((s) => s.sku === skuName);\n    newModule.forEach((sku) => {\n      if (i !== -1) {\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\n      }\n    });\n    return newModule;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { useSelector } from \"react-redux\";\nimport { next, skuListUpdateCheck } from \"./services.js\";\nimport { totalQty } from \"Page/StockEntry/GeneralServices/moduleServices\";\n\nconst ModalsConfirmation = ({\n  moduleEntry,\n  confirmation,\n  setConfirmation,\n  save,\n  submit,\n  isSuccess,\n  isLoading,\n  moveAll,\n  setAction,\n  moduleName,\n  noSkuChecking,\n  singleViewData,\n}) => {\n  const dimention = document.documentElement.clientHeight;\n  const height = dimention - 300;\n\n  let buttonName = \"Submit\";\n\n  if (confirmation.name === \"save\") buttonName = \"Save\";\n  useEffect(() => {\n    if (isSuccess) setConfirmation({ show: false, name: null });\n  }, [isSuccess]);\n  window.onkeydown = (e) =>\n    e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null;\n\n  useEffect(() => {\n    setAction(confirmation.name);\n  }, [confirmation]);\n\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry;\n\n  const areaDestinationName = module?.jobPost?.areaDestinationName;\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName;\n  const areaName = module?.jobPost?.areaName;\n\n  const skuListUpdate = skuListUpdateCheck(\n    module?.jobPost.list,\n    noSkuChecking,\n    moduleName\n  );\n  return (\n    <CRow\n      className={\"modalConfirmation \" + (confirmation.show ? null : \"d-none\")}\n    >\n      <CCol>\n        <CModal show={confirmation.show} closeOnBackdrop={false}>\n          <CModalHeader className=\"px-4 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">\n              Confirmation{\" \"}\n              <span>\n                <i className=\"em em-pray\"></i>\n              </span>\n            </CModalTitle>\n            <label\n              tabIndex=\"0\"\n              onKeyDown={(e) =>\n                e.keyCode === 13\n                  ? setConfirmation({ show: false, name: null })\n                  : false\n              }\n              onClick={() => setConfirmation({ show: false, name: null })}\n              className=\"sku-item iconU-modalClose\"\n            />\n          </CModalHeader>\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\n            <p className=\"text mb-2\">\n              <span>{`Are you sure want to ${\n                areaName == \"Waste\" ? \"update\" : \"send\"\n              } this Item `}</span>\n              <span\n                className={` ${areaDestinationName ? null : \"d-none\"}`}\n              >{` from`}</span>\n              <span\n                className={`green ${areaDestinationName ? null : \"d-none\"}`}\n              >{` ${areaName} `}</span>\n              <span>\n                {moduleName == \"outbound\"\n                  ? \"from\"\n                  : moduleName === \"repack\"\n                  ? \"\"\n                  : \"to\"}{\" \"}\n              </span>\n              <span\n                className={`green ${moduleName !== \"repack\" ? null : \"d-none\"}`}\n              >{` ${\n                moduleName === \"stockTransfer\"\n                  ? warehouseDestinationName\n                  : areaDestinationName\n                  ? areaDestinationName\n                  : areaName\n              } `}</span>\n            </p>\n            <p className=\"text\">\n              Please double check this list, this record will store to database.\n            </p>\n            <div\n              style={{\n                minHeight: height,\n                maxHeight: height,\n                overflow: \"auto\",\n                border: \"1px solid var(--lineGrey)\",\n              }}\n            >\n              <table>\n                <thead>\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Weight\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Semi Waste\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Waste\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {skuListUpdate?.map((data) => (\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                      <td style={{ maxWidth: \"160px\" }}>{data.sku}</td>\n                      <td\n                        className=\"text-right py-3\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        {`${totalQty(data?.qty)}`}\n                      </td>\n                      <td\n                        className=\"text-right text-nowrap\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        <span className=\"text-nowrap\">{`${totalQty(\n                          data?.swqty\n                        )} `}</span>\n                      </td>\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\n                        {`${totalQty(data?.wqty)}`}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? setConfirmation({ show: false, name: null })\n                    : false\n                }\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\n                onClick={() => setConfirmation({ show: false, name: null })}\n              >\n                Cancel\n              </CButton>\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? isLoading\n                      ? null\n                      : confirmation.name === \"save\"\n                      ? save()\n                      : submit()\n                    : false\n                }\n                className={`${\n                  isLoading ? \"bg-softGreen text\" : \"bg-green text-white\"\n                } no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\n                onClick={() =>\n                  isLoading\n                    ? null\n                    : confirmation.name === \"save\"\n                    ? save()\n                    : submit()\n                }\n              >\n                {isLoading ? \"Processing...\" : buttonName}\n              </CButton>{\" \"}\n            </div>\n          </CModalBody>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst ModalsCaptcha = ({\n  show = false,\n  setIsShowModal,\n  submit,\n  submitText = \"Submit\",\n}) => {\n  //random text\n  var text = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var charactersLength = characters.length;\n  var text_split = [];\n  for (var i = 0; i < 3; i++) {\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\n    text += r;\n    text_split.push(r);\n  }\n\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\n  const [isValidated, setIsValidated] = React.useState(false);\n  const [isType, setIsType] = React.useState([]);\n\n  //reset if visible = false\n  useEffect(() => {\n    if (show === true) {\n      document.getElementById(\"t1\").value = \"\";\n      document.getElementById(\"t2\").value = \"\";\n      document.getElementById(\"t3\").value = \"\";\n    }\n  }, [show]);\n\n  return (\n    <CRow className={show ? null : \"d-none\"}>\n      <CCol>\n        <CModal\n          show={show}\n          onClose={() => {\n            setIsShowModal(false);\n          }}\n          size=\"lg\"\n          style={{ height: \"400px\" }}\n        >\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\n              {selectorCsvFileName}?\n            </p>\n            <p className=\"text\">\n              Once uploaded this record will store to databases.\n            </p>\n            <p className=\"text mb-2\">\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\n            </p>\n\n            <div className=\"captcha-box\">\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 1,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t1\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[0]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 2,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t2\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input ml-0 mr-0\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[1]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 3,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t3\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[2]}\n              />\n            </div>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            <CButton\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\n              onClick={() => {\n                setIsShowModal(false);\n              }}\n            >\n              Cancel\n            </CButton>\n            <CButton\n              className={\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\n              }\n              onClick={() => {\n                submit();\n                setIsValidated(false);\n              }}\n            >\n              {submitText}\n            </CButton>{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport { ModalsConfirmation, ModalsCaptcha };\n","import React from \"react\";\nimport { CCard } from \"@coreui/react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"./bootstrapTable-style.scss\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport axios from \"axios\";\n\n//cell editable\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\n\nclass TableEditable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validateStatus: false,\n      validateResult: \"Please Wait...\",\n      globalData: this.props.globalData,\n      rowCount: 0,\n      keyy: 0,\n      triggerRender: 0\n    };  \n    this.validatePOSKUStockTransfer = this.validatePOSKUStockTransfer.bind(this);\n    this.validateSKUNumber = this.validateSKUNumber.bind(this);\n    \n  } \n  changeOutboundReason = (row) => {\n    setTimeout(() => {\n      let elem = document.getElementById(`row${row}-outboundReason`);\n      elem.classList.add(\"red\", \"tooltip-custom\");\n      elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\n    }, 300);\n  }\n\n  changeWarehouseUuid = (\n    value,\n    column,\n    columnName,\n    row,\n    warehouseCodeList,\n    warehouseUuidList,\n    warehouseNameList\n  ) => {\n    const { setCsvDataTmp, globalData } = this.props;\n    let tmpdata = globalData;\n    var index = tmpdata.findIndex((obj) => obj.id == row);\n    let i = warehouseCodeList.indexOf(value);\n    tmpdata[index][column] = warehouseUuidList[i];\n    tmpdata[index][columnName] = warehouseNameList[i];\n\n    console.clear() \n    setTimeout(async () => {\n      setCsvDataTmp(tmpdata);\n    }, 400);\n  };\n\n  validatePOSKU = async (id, row, idColumn) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;\n    if(transaction==\"additional_inbound\"){\n      return;\n    }\n\n    let tmpdata = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/stocktake/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        elem.classList.add(\"red\");\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          var index = tmpdata.findIndex((obj) => obj.id == row);\n          if (data[0] && data[0].isExist === true) {\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\n            tmpdata[index].wmsPoSkuCodeStatus = true;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = data[0].expiryDate;\n            tmpdata[index].inboundDate = data[0].inboundDate;\n            tmpdata[index].supplierName = data[0].supplierName;\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\n            tmpdata[index].uom = data[0].uom;\n            tmpdata[index].photos = data[0].photos;\n            elem.classList.remove(\"red\");\n            elem.classList.add(\"hiddenTooltip\");\n          } else {\n            tmpdata[index].wmsPoSkuCodeStatus = false;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = \"\";\n            tmpdata[index].inboundDate = \"\";\n            tmpdata[index].supplierName = \"\";\n            tmpdata[index].supplierUuid = \"\";\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\n          }\n          setCsvDataTmp(tmpdata);\n        });\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validatePOSKUStockTransfer = async (newValue, row, idColumn, key) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;  \n    let tmpdata = globalData;\n    \n    var index = tmpdata.findIndex((obj) => obj.id == row.id); \n    // console.log(tmpdata)\n    // console.log(row.id, row)\n    // console.log(index)\n\n    try {\n      const url = \"/stocktransfer/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      let payloadPO = [{\n        \"id\": row.id,\n        \"poSkuCode\": key==\"wmsPoSkuCode\" ? newValue : (row.poSkuCode?row.poSkuCode:\"\"),\n        \"skuNumber\": key==\"skuNumber\"? newValue?.skuNumber: row.skuNumber,\n        \"skuUuid\": key==\"skuNumber\"? newValue?.skuUuid:row.skuUuid,\n        \"warehouseSource\": row.warehouseSource,\n        \"areaSource\": row.areaSource,\n        \"weight\": key==\"qty\"?newValue:row.qty\n      }]; \n\n      setTimeout(async () => {\n        //setvalidate false\n        setIsValidate(false);\n\n        //elemen column\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        // elem.classList.remove(\"hiddenTooltip\");\n        // elem.classList.add(\"red\");  \n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: payloadPO },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          if (data[0]) {\n            if(data[0].isExist === true && data[0].isValid === true){\n              tmpdata[index]['rowStatus'] = true;\n              tmpdata[index]['rowReason'] = \"\";\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }else{\n              tmpdata[index]['rowStatus'] = false;\n              tmpdata[index]['rowReason'] = data[0]?.errorMessage;\n            }\n            tmpdata[index]['wmsPoSkuCode'] = data[0]?.wmsPoSkuCode ;\n            tmpdata[index]['wmsPoSkuCodeStatus'] = data[0]?.isExist && data[0]?.isValid;\n            tmpdata[index]['wmsPoSkuCodeReason'] = data[0]?.errorMessage;\n            tmpdata[index]['expiryDate'] = data[0]?.expiryDate;\n            tmpdata[index]['inboundDate'] = data[0]?.inboundDate;\n            tmpdata[index]['supplierName'] = data[0]?.supplierName;\n            tmpdata[index]['supplierUuid'] = data[0]?.supplierUuid;\n            tmpdata[index]['uom'] = data[0]?.uom;\n            tmpdata[index]['photos'] = data[0]?.photos;\n          } else {\n            tmpdata[index]['wmsPoSkuCodeStatus'] = false;\n            tmpdata[index]['wmsPoSkuCodeReason'] = response?.data?.message;\n            tmpdata[index]['expiryDate'] = \"\";\n            tmpdata[index]['inboundDate'] = \"\";\n            tmpdata[index]['supplierName'] = \"\";\n            tmpdata[index]['supplierUuid'] = \"\";\n            tmpdata[index]['rowStatus'] = false;\n            tmpdata[index]['rowReason'] = response?.data?.message;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = response?.data?.message;\n          } \n\n          if(key==\"skuNumber\"){ \n            tmpdata[index][\"skuNumber\"] = newValue.skuNumber;\n            tmpdata[index][\"skuNumberReason\"] = newValue.skuDescription;\n            tmpdata[index][\"skuNumberStatus\"] = true;\n            tmpdata[index][\"skuUuid\"] = newValue.skuUuid;\n          }\n          setCsvDataTmp(tmpdata); \n        }); \n        let tmpKey = this.state.keyy + 1; \n        this.setState({keyy: tmpKey}); \n      }, 500);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validateOutbountReason = (value, row, idColumn) => {\n    const { globalData } = this.props;\n    let tmp_data = globalData;\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\n      this.changeOutboundReason(row)\n    }\n  };\n\n  validateOutbountType = (value, row, idColumn) => {\n    const { globalData, setIsValidate } = this.props;\n    let tmp_data = globalData;\n    setIsValidate(false);\n    if (value.toUpperCase() !== \"LAINNYA\") {\n      setIsValidate(true);\n      return 0;\n    }\n\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (datax[\"outboundReason\"] == \"\") {\n      this.changeOutboundReason(row);\n    }\n  };\n\n  validateSKUNumber = async (id, row, idColumn, key, rowData = null) => {\n    const { globalData, setCsvDataTmp, setIsValidate,transaction } = this.props;\n    let tmp_data = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/oss/skuByNumbers\";\n      let elem = null;\n      let elemspan = null;\n      \n      // for validating stock transfer\n      let stats = false;\n      let newSkuData = {} \n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { skuList: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          let isSuccess = response.data.isSuccess;\n          var index = tmp_data.findIndex((obj) => obj.id == row);\n          if (isSuccess === true && data.length > 0) {\n            stats = true;\n            tmp_data[index][key] = data[0].skuNumber;\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\n            tmp_data[index][key + \"Status\"] = true;\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\n            newSkuData = {\n              skuUuid: data[0].id,\n              skuNumber: data[0].skuNumber,\n              skuDescription: data[0].skuDescription,\n              photo: data[0].photo\n            }\n\n            //custom\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = data[0].id;\n              tmp_data[index].photo = data[0].imageMd;\n            }\n\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = data[0].uom;\n            }\n            \n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = data[0].uom;\n            }\n\n            \n            if(transaction!==\"stockTransfer\"){\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }\n\n          } else {\n            stats = false;\n            tmp_data[index][key] = id;\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\n            tmp_data[index][key + \"Status\"] = false;\n            tmp_data[index][key + \"Uuid\"] = null;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"SKU Number Not Found\";\n\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = \"\";\n              tmp_data[index].photo = \"\";\n            }\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = null;\n            }\n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = \"\";\n            }\n          } \n        });\n\n        if(transaction==\"stockTransfer\" && stats === true){ \n          this.validatePOSKUStockTransfer(newSkuData, rowData, idColumn, 'skuNumber')\n        }else{\n          setCsvDataTmp(tmp_data);\n        }\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  render() {\n    const {\n      columns,\n      hiddenRows,\n      tableClass,\n      warehouseArea,\n      outboundType,\n      setCheckingCsv, \n      editable = true,\n      warehousesData = [],\n      transaction,\n      globalData\n    } = this.props;\n    let { validateStatus,  keyy } = this.state;\n    \n    //wh\n    let warehouseCodeList = [];\n    let warehouseUuidList = [];\n    let warehouseNameList = [];\n    if (warehousesData) {\n      let tmp = warehousesData?.data?.map((d) => {\n        warehouseCodeList.push(d.code);\n        warehouseUuidList.push(d.id);\n        warehouseNameList.push(d.name);\n      });\n    }\n\n    //wh area\n    let wh_area_label =\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\n    let wh_outboundtype_label = !outboundType\n      ? []\n      : outboundType.map((data) => data.label.toUpperCase());\n    let wh_outboundtype_value = !outboundType\n      ? []\n      : outboundType.map((data) => data.value);\n    const newFormat = columns.map((data, index) => {\n      data.validator = (newValue, row, column, done) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let reason = null;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n\n        let stockTransferColumnCheck = ['wmsPoSkuCode', 'qty']\n        if (stockTransferColumnCheck.includes(key) && transaction==\"stockTransfer\") {\n          this.validatePOSKUStockTransfer(newValue, row, idColumn, key);\n          stat = true;\n        }else if(key == \"wmsPoSkuCode\" ){\n          this.validatePOSKU(newValue, row.id, idColumn, key);\n          stat = true; \n        }\n\n        if (key == \"skuNumber\") {\n          this.validateSKUNumber(newValue, row.id, idColumn, key, row);\n          stat = true;\n        }\n\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type not found\";\n            checkType = false;\n            stat = false;\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        } else if (key == \"newGrade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            //if not waste or semi waste\n            if (parseInt(newValue)) {\n              //if number\n              stat = true;\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\n            } else if (newValue == \"\") {\n              row[\"newGradeUuid\"] = null;\n              row[\"newGradeUom\"] = null;\n              stat = true;\n            } else {\n              //if not number => undefined\n              reason = \"Grade Undefined\";\n              checkType = false;\n              stat = false;\n            }\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        }\n\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Outbound Type Not Found`;\n          } else {\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\n            stat = true;\n            this.validateOutbountType(newValue, row.id, idColumn);\n          }\n        }\n\n        if (key == \"outboundReason\") {\n          this.validateOutbountReason(newValue, row.id, idColumn);\n        }\n\n        if (key == \"warehouse\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseUuid\",\n              \"warehouseName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          }\n        }\n        if (key == \"warehouseDestination\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseDestinationUuid\",\n              \"warehouseDestinationName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          } \n        }\n\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Warehouse Area Not Found`;\n          } else {\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\n            if (key == \"areaNameDestination\") {\n              row[\"areaDestination\"] = wh_area_value[i];\n            } else {\n              row[\"areaSource\"] = wh_area_value[i];\n            }\n            stat = true;\n          }\n        }\n\n        if (key == \"newPack\") {\n          let checkTypenewPack = isNaN(newValue) ? false : true;\n          if (!checkTypenewPack) {\n            stat = false;\n            reason = `Pack Should be a number`;\n          } else {\n            stat = true;\n          }\n        } \n        \n\n        let checkType = null;\n        if (data.type == \"number\") {\n          checkType = isNaN(newValue) ? false : true;\n        } else {\n          checkType = true;\n        }\n        if (checkType === false) {\n          reason = `${data.text} Should be a ${data.type}`;\n        } \n\n        \n        if (key == \"wmsPoSkuCode\" && transaction == \"stockTransfer\") {\n          if(isNaN(newValue)){\n            checkType = false;\n            reason = `${data.text} Should be a number`;\n            stat = false;\n          } \n        } \n\n        //some field can null\n        let canNull = [\n          \"grade\",\n          \"outboundReason\",\n          \"ripenessLevel\",\n          \"newRipeness\",\n          \"reason\",\n          \"expiryDate\"\n        ]; \n\n        if (canNull.includes(key) && newValue === \"\") {\n          reason = \"\";\n          checkType = true;\n          stat = true;\n        } else if (key == \"grade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type Not Found\";\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //check ripenesslevel\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\n          let allowedRipenessLevel = [0, 1, 2, 3];\n          if (\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\n            newValue == \"\"\n          ) {\n            checkType = true;\n            stat = true;\n            reason = \"\";\n            if (newValue == \"\") {\n              newValue = \"\";\n            }\n          } else {\n            checkType = false;\n            stat = false;\n            reason = \"Undefined Ripeness Level\";\n          }\n        }\n\n        //check date\n        if (data.type == \"date_indo\") {\n          //checking date\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\n          if (newValue.match(regex_date)) {\n            checkType = true;\n            stat = true;\n          } else if (newValue == \"\") {\n            checkType = true;\n            stat = true;\n          } else {\n            reason = `Date format must be 'dd-mm-yyyy'`;\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //set notif\n        row[keyReason] = reason;\n        if (stat && checkType) {\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\n          if (!specialKey.includes(key)) {\n            //some key have their own checking, so if not in array do checking error\n            row[keyStatus] = true;\n            setCheckingCsv();\n          }\n        } \n         \n        return {\n          valid: stat && checkType ? true : false,\n          message: reason,\n        };\n      };\n\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n        let txt = row[keyReason];\n        \n        // if status column = false\n        // that mean there's error or not valid data in some column\n        if (row[keyStatus] === false) {\n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {txt}\n              </span>\n            </div>\n          );\n        }\n\n        // if global row status = false\n        // that mean there's wmsposkucode validation error, and makes 1 line become red colour\n        // for now is only for stock transfer  \n        if ( transaction==\"stockTransfer\" &&  row['rowStatus'] === false) { \n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {row['rowReason']}\n              </span>\n            </div>\n          );\n        }\n\n        \n        // if status column = true\n        // No problem \n        return (\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\n            {cell}\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\n              {txt}\n            </span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n    console.clear();  \n    console.log(globalData)\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={globalData}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          cellEdit={\n            editable === true\n              ? cellEditFactory({\n                  mode: \"click\",\n                  blurToSave: true,\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\n                })\n              : null\n          }\n          bordered={false}\n          hiddenRows={hiddenRows}\n          key={keyy}\n        />\n      </CCard>\n    );\n  }\n}\n\nclass TableResult extends React.Component {\n  render() {\n    const { columns, tableClass, data } = this.props;\n\n    const newFormat = columns.map((data, index) => {\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\n          return (\n            <div className=\"tooltip-custom red\">\n              {cell}\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\n            </div>\n          );\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\n          return (\n            <div className=\"green\">\n              {cell}\n              <span></span>\n            </div>\n          );\n        }\n\n        return (\n          <div>\n            {cell}\n            <span></span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={data}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          bordered={false}\n        />\n      </CCard>\n    );\n  }\n}\n\nexport { TableResult, TableEditable };\n"],"sourceRoot":""}