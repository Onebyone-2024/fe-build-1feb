{"version":3,"sources":["Page/StockEntry/Movement/Upload/services.js","Page/StockEntry/Movement/Upload/Review.jsx","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/BootstrapTable/index.jsx"],"names":["showErrorsOnly","_ref","csvData","csvField","isShowErrorOnly","setIsShowErrorOnly","setIsHiddenRows","setCheckingCsv","tmp_arr_false","tmp_arr_true","map","data","index","stat","i","dataColumn","indexColumn","key","dataField","includes","push","ret","filter","x","length","submit","async","dispatch","selectorStatus","setIsShowModal","setIsSubmitText","setSubmitStatus","_ref5","header","time","Date","getTime","n","getMilliseconds","list_area","return_data","warehouse_source","warehouseSource","areaSource","id","warehouseDestination","areaName","areaDestination","list","createdAt","setHeader","skuList","available","forEach","idx","skuUuid","skuNumber","unitOfMeassures","uom","photo","photos","poList","getSKU","poGroup","groupingPO","header_index","wmsPoSkuCode","ripenessLevel","expiryDateCol","expiryDate","moment","toDate","inboundDate","supplierId","supplierUuid","supplierName","codeGrade","itemList","areaNameDestination","ripeness","label","value","note","reason","expiryDateText","qty","jobPost","setJobPost","skuListData","skuListIdx","poGroupIndex","headerData","headerIdx","skuListDataIdx","execute","submitCsv","dataCsv","transaction","result","arrayResult","dataHeader","indexHeader","poHeader","indexPo","_data$ripeness","isStatus","isSuccess","uploadStatus","uploadStatusReason","message","grade","setResult","type","STOK_TAKE_UPLOAD_JSON","csvDataResult","newSchema","text","sort","csvFieldResult","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","selectorOutboundType","outboundTypeCsv","status","submitStatus","React","useState","isShowModal","isHiddenRows","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","isSubmitText","useEffect","_ref4","undefined","stats","indexField","toUpperCase","checking_error","history","setCsvDataTmp","param","_ref3","setCsvData","createElement","className","TableEditable","globalData","columns","tableClass","hiddenRows","warehouseArea","outboundType","style","backgroundColor","onClick","_ref2","new_arr","deleteErrorsField","lineHeight","goBack","class","PopUp","onCloseFunction","statusDisplay","title","cancelButtonTitle","actionButtonTitle","colorText","refreshOnCancel","msg1","msg2","cancelButtonClass","actionButtonClass","actionButtonEvent","ModalsCaptcha","submitText","show","next","e","isCaptcha","setIsValidated","setIsType","isType","isValidated","type_","document","getElementById","parseInt","focus","setSelectionRange","split","ModalsConfirmation","_module$jobPost","_module$jobPost2","_module$jobPost3","moduleEntry","confirmation","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","name","window","onkeydown","keyCode","module","areaDestinationName","warehouseDestinationName","skuListUpdate","skuListUpdateCheck","newModule","po","item","_item$wasteType","_item$wasteType2","_item$wasteType3","_item$wasteType4","_item$wasteType5","_item$wasteType6","_qty","isInteger","parseFloat","_sku","skuName","wasteType","_toWaste","_uom","newSku","sku","wqty","swqty","isExist","findIndex","_item$wasteType7","_item$wasteType8","s","CRow","CCol","CModal","closeOnBackdrop","CModalHeader","CModalTitle","tabIndex","onKeyDown","CModalBody","minHeight","concat","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","CButton","characters","charactersLength","text_split","r","charAt","Math","floor","random","setIsCaptcha","isCaptchaText","setIsCaptchaText","onClose","size","autocomplete","onKeyUp","textTransform","maxLength","placeholder","CModalFooter","Component","constructor","_this","super","this","changeOutboundReason","row","setTimeout","elem","classList","add","innerHTML","changeWarehouseUuid","column","columnName","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","obj","indexOf","console","clear","validatePOSKU","idColumn","url","elemspan","axios","method","then","response","_response$data","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","remove","error","validatePOSKUStockTransfer","newValue","payloadPO","poSkuCode","_response$data2","_data$2","_data$3","_data$4","_data$5","_data$6","_data$7","_data$8","_data$9","_data$10","_data$11","_data$","isValid","errorMessage","_response$data3","_response$data4","_response$data5","skuDescription","tmpKey","keyy","setState","validateOutbountReason","tmp_data","datax","validateOutbountType","validateSKUNumber","rowData","arguments","newSkuData","_response$data6","imageMd","newGradeUom","validateStatus","validateResult","rowCount","triggerRender","bind","render","editable","warehousesData","_warehousesData$data","d","code","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","done","keyStatus","keyReason","arr_grade","checkType","isNaN","regex_date","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","log","CCard","BootstrapTable","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered","TableResult"],"mappings":"6RAKO,MAAMA,EAAiBC,IAOvB,IAPwB,QAC7BC,EAAO,SACPC,EAAQ,gBACRC,EAAe,mBACfC,EAAkB,gBAClBC,EAAe,eACfC,GACDN,EAEKO,EAAgB,GAChBC,EAAe,GACnBP,EAAQQ,IAAI,CAACC,EAAMC,KACjB,IAAIC,GAAO,EACPC,EAAIF,EAAQ,EAChBT,EAASO,IAAI,CAACK,EAAYC,KACxB,IAAIC,EAAMF,EAAWG,UAAY,UACf,IAAdP,EAAKM,KACPJ,GAAO,MAIE,IAATA,EACGL,EAAcW,SAASL,IAC1BN,EAAcY,KAAKN,GAGhBL,EAAaU,SAASL,IACzBL,EAAaW,KAAKN,KAMxB,IAAIO,EAAM,GACV,IAAwB,IAApBjB,GAGF,GADAiB,EAAMZ,EAAaa,OAAQC,IAAOf,EAAcW,SAASI,IACrDF,EAAIG,QAAUtB,EAAQsB,OACxB,OAAO,OAGTH,EAAM,GAERf,EAAgBe,GAChBhB,GAAoBD,GACpBG,GAAe,IA4QJkB,EAASC,UAQf,IARsB,QAC3BxB,EAAO,SACPC,EAAQ,SACRwB,EAAQ,eACRC,EAAc,eACdC,EAAc,gBACdC,EAAe,gBACfC,GACDC,EACCF,EAAgB,cAGhB,IAAIG,OAlNa/B,KAEjB,IAAIgC,GAAO,IAAIC,MAAOC,UAElBC,EADI,IAAIF,KAAKD,GACPI,kBACNC,EAAY,GACZC,EAAc,GACdC,EAAmBvC,EAAQ,GAAGwC,iBAAmB,GAkBrD,OAhBAxC,EAAQQ,IAAI,CAACC,EAAMC,KAEZ2B,EAAUpB,SAASR,EAAKgC,cAC3BH,EAAYpB,KAAK,CACfwB,GAAIhC,EACJ8B,gBAAiBD,EACjBI,qBAAsBJ,EACtBE,WAAYhC,EAAKgC,WACjBG,SAAUnC,EAAKmC,SACfC,gBAAiBpC,EAAKoC,gBACtBC,KAAM,GACNC,UAAWZ,IAEbE,EAAUnB,KAAKT,EAAKgC,eAGjBH,GAyLYU,CAAUhD,GAGzBiD,OAzLUjD,KACd,IAAIsC,EAAc,GACdC,EAAmBvC,EAAQ,GAAGwC,iBAAmB,GA2BrD,OAzBAxC,EAAQQ,IAAI,CAACC,EAAMC,KACjB,IAAIwC,GAAY,EAChBZ,EAAYa,QAAQ,CAACpB,EAAQqB,KAEzBrB,GACAA,EAAOsB,SAAW5C,EAAK4C,SACvBtB,EAAOS,iBAAmB/B,EAAK+B,iBAC/BT,EAAOU,YAAchC,EAAKgC,aAE1BS,GAAY,KAIXA,GACHZ,EAAYpB,KAAK,CACfsB,gBAAiBD,EACjBE,WAAYhC,EAAKgC,WACjBY,QAAS5C,EAAK4C,QACdC,UAAW7C,EAAK6C,UAChBC,gBAAiB9C,EAAK+C,IACtBC,MAAOhD,EAAKiD,OACZC,OAAQ,OAIPrB,GA4JasB,CAAO5D,GAGvB6D,OA/IaC,EAAC9D,EAASiD,KAC3B,IAAIX,EAAc,GACdC,EAAmBvC,EAAQ,GAAGwC,iBAAmB,GA0DrD,OAxDAxC,EAAQQ,IAAI,CAACC,EAAMC,KACjB,IAAIwC,GAAY,EACZa,EAAe,GAEnBzB,EAAYa,QAAQ,CAACpB,EAAQqB,KAEzBrB,GACAA,EAAOS,iBAAmB/B,EAAK+B,iBAC/BT,EAAOU,YAAchC,EAAKgC,YAC1BV,EAAOc,iBAAmBpC,EAAKoC,iBAC/Bd,EAAOsB,SAAW5C,EAAK4C,SACvBtB,EAAOiC,cAAgBvD,EAAKuD,cAC5BjC,EAAOkC,eAAiBxD,EAAKwD,eAC7BlC,EAAOmC,eAAiBzD,EAAKyD,gBAE7BhB,GAAY,EACZa,EAAeX,KAIdF,IACHZ,EAAYpB,KAAK,CACfmC,QAAS5C,EAAK4C,SAAW,GACzBZ,WAAYhC,EAAKgC,YAAc,GAC/BI,gBAAiBpC,EAAKoC,iBAAmB,GACzCL,gBAAiBD,GAAoB,GACrC2B,cAAezD,EAAKyD,eAAiB,GACrCC,WACEC,IAAO3D,EAAKyD,cAAe,cAAcG,SAASnC,WAAa,GACjEoC,YAAa7D,EAAK6D,aAAe,GACjCC,WAAY9D,EAAK+D,cAAgB,GACjCC,aAAchE,EAAKgE,cAAgB,GACnCT,aAAcvD,EAAKuD,cAAgB,GACnCU,UAAWjE,EAAK4C,SAAW,GAC3BY,cAAexD,EAAKwD,eAAiB,EACrCU,SAAU,KAEZZ,EAAezB,EAAYhB,OAAS,GAEtCgB,EAAYyB,GAAcY,SAASzD,KAAK,CACtCuB,WAAYhC,EAAKgC,WACjBG,SAAUnC,EAAKmC,SACfgC,oBAAqBnE,EAAKmE,oBAC1BtB,UAAW7C,EAAK6C,UAChBU,aAAcvD,EAAKuD,aACnBa,SAAU,CACRC,MAAOrE,EAAKwD,eAAiB,GAC7Bc,MAAOtE,EAAKwD,eAAiB,GAE/Be,KAAMvE,EAAKwE,OACXd,WACEC,IAAO3D,EAAKyD,cAAe,cAAcG,SAASnC,WAAa,GACjEgD,eAAgBzE,EAAKyD,cACrBiB,IAAK1E,EAAK0E,KAAO,MAGd7C,GAmFawB,CAAW9D,GAG3BoF,OAnFaC,EAACtD,EAAQkB,EAASY,KAEnCZ,EAAQzC,IAAI,CAAC8E,EAAaC,KACxB1B,EAAQrD,IAAI,CAACqD,EAAS2B,KAElB3B,GACAA,EAAQpB,YAAc6C,EAAY7C,YAClCoB,EAAQrB,iBAAmB8C,EAAY9C,iBACvCqB,EAAQR,SAAWiC,EAAYjC,SAE/BJ,EAAQsC,GAAoB,OAAErE,KAAK2C,OAMzC9B,EAAOvB,IAAI,CAACiF,EAAYC,KACtBzC,EAAQzC,IAAI,CAAC8E,EAAaK,KAEtB9B,GACA4B,EAAWhD,YAAc6C,EAAY7C,YACrCgD,EAAWjD,iBAAmB8C,EAAY9C,iBAE1CT,EAAO2D,GAAiB,KAAExE,KAAKoE,OAK9BvD,GAuDasD,CAAWtD,EAAQkB,EAASY,GAG5C+B,QAAgBC,YAAU,CAC5BC,QAASV,EACTvD,kBACAJ,WACAsE,YAAa,aAEf,GAAe,SAAXH,EACF,OAAO,EAIT,IAAII,OAlEaA,KACjB,IAAIC,EAAc,GACdrF,EAAI,EA0BR,OAzBAoF,EAAOlD,KAAKtC,IAAI,CAAC0F,EAAYC,KAC3BD,EAAWvC,OAAOnD,IAAI,CAAC4F,EAAUC,KAC/BD,EAASzB,SAASnE,IAAI,CAACC,EAAMC,KAAW,IAAD4F,EACrC,IAAIC,EAAW,SACX9F,EAAK+F,YACPD,EAAW,WAEbN,EAAY/E,KAAK,CACfwB,GAAI9B,EACJ6F,aAAcF,GAAY,GAC1BG,mBAAoBjG,EAAKkG,QACzB3C,aAAcoC,EAASpC,cAAgB,GACvCV,UAAW7C,EAAK6C,WAAa,GAC7BW,eAA4B,QAAbqC,EAAA7F,EAAKoE,gBAAQ,IAAAyB,OAAA,EAAbA,EAAexB,QAAS,GACvCK,IAAK1E,EAAK0E,KAAO,EACjBF,OAAQxE,EAAKuE,MAAQ,GACrB4B,MAAOR,EAAS1B,WAAa,GAC7B9B,SAAUnC,EAAKmC,UAAY,GAC3BgC,oBAAqBnE,EAAKmE,qBAAuB,GACjDV,cAAezD,EAAKyE,gBAAkB,KAExCtE,UAICqF,GAsCYY,CAAiB,OAAPjB,QAAO,IAAPA,OAAO,EAAPA,EAASnF,YAChCgB,EAAS,CAAEqF,KAAMC,IAAuBC,cAAehB,IAG7D,IAAIiB,EAAY,GAChBA,EAAU/F,KAAK,CACbF,UAAW,eACXkG,KAAM,gBACNJ,KAAM,SACNK,MAAM,IAERlH,EAASO,IAAI,CAACC,EAAMC,KAClBuG,EAAU/F,KAAKT,WAEXgB,EAAS,CAAEqF,KAAMC,IAAuBK,eAAgBH,IAE9DtF,GAAe,GACfC,EAAgB,UAChBC,GAAgB,I,aCzLHwF,sBAzKCC,IACd,MAAM7F,EAAW8F,cAGXC,EAAsBC,YAAaC,GAAUA,EAAMC,aACnDC,EAAkBH,YAAaC,GAAUA,EAAM1H,SAC/C6H,EAAmBJ,YAAaC,GAAUA,EAAMzH,UAChD6H,EAAwBL,YAAaC,GAAUA,EAAMK,kBACrDC,EAAuBP,YAAaC,GAAUA,EAAMO,iBACpDvG,EAAiB+F,YAAaC,GAAUA,EAAMQ,SAC7CC,EAActG,GAAmBuG,IAAMC,UAAS,IAGhDC,EAAa3G,GAAkByG,IAAMC,UAAS,IAC9CE,EAAcnI,GAAmBgI,IAAMC,SAAS,OAChDnI,EAAiBC,GAAsBiI,IAAMC,UAAS,IACtDG,EAAYC,GAAiBL,IAAMC,UAAS,IAC5CK,EAAWC,GAAgBP,IAAMC,UAAS,IAC1CO,EAAavI,GAAkB+H,IAAMC,UAAS,IAE9CQ,EAAcjH,GAAmBwG,IAAMC,SAAS,UAiBvD,GAfAS,oBAAU,KD0CkBC,KAKvB,IALwB,QAC7B/I,EAAO,SACPC,EAAQ,cACRwI,EAAa,eACbpI,GACD0I,EACC,QAAgBC,IAAZhJ,EACF,OAAO,EAET,IAAIiJ,GAAQ,EACZjJ,EAAQQ,IAAI,CAACC,EAAMC,KACjBT,EAASO,IAAI,CAACQ,EAAWkI,KAEvB,IAAIhB,EAASzH,EAAKO,EAAUA,UAAY,UAGxC,GAA2B,gBAAvBA,EAAUA,UAA6B,CAE7B,WADDP,EAAKO,EAAUA,WAAWmI,eAEL,IAA1B1I,EAAqB,iBACvByH,GAAS,IAKA,IAAXA,IAEFe,GAAQ,OAKZR,GADY,IAAVQ,GAKJ5I,GAAe,IC7Eb+I,CAAe,CACbpJ,QAAS4H,EACT3H,SAAU4H,EACVY,gBACApI,oBAED,CAACuI,IAEJE,oBAAU,MACa,IAAjBX,GACFb,EAAM+B,QAAQnI,KAAK,gDAEpB,CAACiH,SAEoBa,IAApBpB,GAAqD,OAApBA,EAEnC,OADAN,EAAM+B,QAAQnI,KAAK,wCACZ,EAGT,MAAMoI,EAAiBC,IDiBCC,KAA0C,IAAzC,MAAED,EAAK,SAAE9H,EAAQ,eAAEpB,GAAgBmJ,EAC5D/H,EAAS,CAAEqF,KAAMC,IAAuB/G,QAASuJ,IACjDlJ,GAAe,IClBboJ,CAAW,CAAEF,QAAO9H,WAAUpB,mBAC9BP,EAAe,CACbE,QAAS4H,EACT3H,SAAU4H,EACV3H,iBAAiB,EACjBC,qBACAC,kBACAC,oBAIJ,OACE+H,IAAAsB,cAAA,OAAKC,UAAU,+CACbvB,IAAAsB,cAACE,IAAa,CACZC,WAAYjC,EACZkC,QAASjC,EACTkC,WAAW,cACXC,WAAYzB,EACZ0B,cAAenC,EACfoC,aAAclC,EACdsB,cAAgBC,GAAUD,EAAcC,GACxCd,cAAgBc,GAAUd,EAAcc,GACxC9H,SAAUA,EACVpB,eAAgBA,IAGlB+H,IAAAsB,cAAA,OAAKC,UAAU,YACbvB,IAAAsB,cAAA,OAAKC,UAAU,SACbvB,IAAAsB,cAAA,UACE5C,KAAK,SACL6C,UAAU,+BACVQ,MAAO,CAAEC,gBAAiB,QAC1BC,QAASA,IACPvK,EAAe,CACbE,QAAS4H,EACT3H,SAAU4H,EACV3H,kBACAC,qBACAC,kBACAC,oBAGL,QACOH,EAAkB,cAAgB,OAG1CkI,IAAAsB,cAAA,UACE5C,KAAK,SACL6C,UAAU,gCACVQ,MAAO,CAAEC,gBAAiB,QAC1BC,QAASA,IDzDYC,KAK1B,IAL2B,QAChCtK,EAAO,SACPC,EAAQ,SACRwB,EAAQ,eACRpB,GACDiK,EACKC,EAAU,GACdvK,EAAQQ,IAAI,CAACC,EAAMC,KACjB,IAAIC,GAAO,EACXV,EAASO,IAAI,CAACK,EAAYC,KACxB,IAAIC,EAAMF,EAAWG,UAAY,UACf,IAAdP,EAAKM,KACPJ,GAAO,MAGE,IAATA,GACF4J,EAAQrJ,KAAKT,KAGjBgB,EAAS,CAAEqF,KAAMC,IAAuB/G,QAASuK,IACjDlK,GAAe,ICsCHmK,CAAkB,CAChBxK,QAAS4H,EACT3H,SAAU4H,EACVpG,WACApB,oBAGL,wBAIH+H,IAAAsB,cAAA,OAAKC,UAAU,QAAQQ,MAAO,CAAEM,WAAY,SAAU,8BACxBjD,EAAoB,KAC/CI,EAAgBtG,QAAU,EAAE,WAE/B8G,IAAAsB,cAAA,OAAKC,UAAU,SACbvB,IAAAsB,cAAA,UACE5C,KAAK,SACL6C,UAAU,mDACVU,QAASA,IAAM/C,EAAM+B,QAAQqB,UAC9B,WAIDtC,IAAAsB,cAAA,UACE5C,KAAK,SACL6D,MACE,oDACkB,IAAfnC,IAAsC,OAAfZ,QAAe,IAAfA,OAAe,EAAfA,EAAiBtG,QAAS,EAAI,WAAa,2BAEvE+I,QAASA,IAAM1I,GAAgB2G,IAEhC,YAMLF,IAAAsB,cAACkB,IAAK,CACJ1C,OAAQxG,EACRmJ,gBAAiBA,KACflC,GAAa,GACb9G,GAAgB,IAElBiJ,cAAepC,EACfqC,MAAO,KACPC,kBAAmB,KACnBC,kBAAmB,KACnBC,UAAW,KACXC,iBAAiB,EACjBC,KAAM,KACNC,KAAM,KACNC,kBAAmB,KACnBC,kBAAmB,YACnBC,kBAAmBA,IAAMlE,EAAM+B,QAAQnI,KAAK,qCAE9CkH,IAAAsB,cAAC+B,IAAa,CACZlK,OAAQA,IACNA,EAAO,CACLE,WACAzB,QAAS4H,EACT3H,SAAU4H,EACVlG,iBACAC,kBACAC,oBAGJ6J,WAAY7C,EACZ8C,KAAMrD,EACN3G,eAAgBA,Q,kLClLjB,MAAMiK,EAAO7L,IASb,IATc,EACnB8L,EAAC,MACDnE,EAAK,UACLoE,EAAS,eACTC,EAAc,UACdC,EAAS,OACTC,EAAM,YACNC,EAAW,OACX3K,GACDxB,EACC,MAAMgB,EAAM8K,EAAE9K,IACd,IAAI+F,EAAO,IAAImF,GAGf,GAAY,UAARlL,EAAgB,CAClB,IAAGmL,EAGD,OAFA3K,IAOJ,GADc,CAAC,UAAW,YAAa,MAAM,UACjCN,SAASF,GACnB,OAAO,EACF,GAAY,cAARA,EAAqB,CAC9B,IAAIoL,EAAQ,IAAIF,GAEF,IADDE,EAAMzE,IACW,IAAVA,IAClB0E,SAASC,eAAe,KAAOC,SAAS5E,GAAS,IAAI6E,QACrDH,SAASC,eAAe,KAAOC,SAAS5E,GAAS,IAAI3C,MAAQ,GAC7DoH,EAAMzE,EAAQ,GAAK,GACnBZ,EAAKY,EAAQ,GAAK,SAEf,GAAY,cAAR3G,GACT,GAAc,IAAV2G,EAMF,OALA0E,SAASC,eAAe,KAAOC,SAAS5E,GAAS,IAAI6E,QACrDH,SACGC,eAAe,KAAOC,SAAS5E,GAAS,IACxC8E,mBAAmB,GAAI,GAEnB,OAEJ,GAAY,eAARzL,GACT,GAAc,IAAV2G,EAKF,OAJA0E,SAASC,eAAe,KAAOC,SAAS5E,GAAS,IAAI6E,QACrDH,SACGC,eAAe,KAAOC,SAAS5E,GAAS,IACxC8E,mBAAmB,GAAI,GACnB,OAGK,IAAV9E,GACF0E,SAASC,eAAe,KAAOC,SAAS5E,GAAS,IAAI6E,QAKvDzF,EAAKY,GADK,cAAR3G,EACY,GAEAA,EAAIoI,cAIpB,IAFW,uCACYsD,MAAM,IACbxL,SAASF,EAAIoI,gBAAiC,IAAfrC,EAAKY,GAIlD,OAAO,EAHP0E,SAASC,eAAe,IAAMC,SAAS5E,IAAQ3C,MAAQ+B,EAAKY,GAC5DsE,EAAUlF,GAKZ,IAAInG,GAAO,EACXmL,EAAUtL,IAAI,CAACC,EAAMC,KAIboG,EAAKpG,EAAQ,IAAMoL,EAAUpL,KACjCC,GAAO,KAGXoL,EAAepL,I,aClEjB,MAAM+L,EAAqB3M,IAapB,IAAD4M,EAAAC,EAAAC,EAAA,IAbsB,YAC1BC,EAAW,aACXC,EAAY,gBACZC,EAAe,KACfC,EAAI,OACJ1L,EAAM,UACNiF,EAAS,UACT0G,EAAS,QACTC,EAAO,UACPC,EAAS,WACTC,EAAU,cACVC,EAAa,eACbC,GACDxN,EACC,MACMyN,EADYpB,SAASqB,gBAAgBC,aAChB,IAE3B,IAAIC,EAAa,SAES,SAAtBZ,EAAaa,OAAiBD,EAAa,QAC/C7E,oBAAU,KACJtC,GAAWwG,EAAgB,CAAErB,MAAM,EAAOiC,KAAM,QACnD,CAACpH,IACJqH,OAAOC,UAAajC,GACJ,KAAdA,EAAEkC,QAAiBf,EAAgB,CAAErB,MAAM,EAAOiC,KAAM,OAAU,KAEpE9E,oBAAU,KACRsE,EAAUL,EAAaa,OACtB,CAACb,IAEJ,IAAIiB,EAAST,IAAmBJ,EAAUI,EAAiBT,EAE3D,MAAMmB,EAA4B,OAAND,QAAM,IAANA,GAAe,QAATrB,EAANqB,EAAQ5I,eAAO,IAAAuH,OAAT,EAANA,EAAiBsB,oBACvCC,EAAiC,OAANF,QAAM,IAANA,GAAe,QAATpB,EAANoB,EAAQ5I,eAAO,IAAAwH,OAAT,EAANA,EAAiBsB,yBAC5CtL,EAAiB,OAANoL,QAAM,IAANA,GAAe,QAATnB,EAANmB,EAAQ5I,eAAO,IAAAyH,OAAT,EAANA,EAAiBjK,SAE5BuL,EDiC0BC,EAACJ,EAAQV,EAAeD,KACxD,GAAU,OAANW,QAAM,IAANA,OAAM,EAANA,EAAQ1M,OAAQ,CAClB,IAAI+M,EAAY,GAChBL,EAAOxN,IAAKsC,IACVA,EAAKa,OAAOnD,IAAK8N,IACfA,EAAG3J,SAASnE,IAAK+N,IAAU,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACxB,MAAM,IAAE1J,EAAG,MAAEyB,GAAU2H,EACjBO,EAAOC,YAAU5J,GACnBmH,SAASnH,GACRA,EAEC6J,WAAW7J,GADX,EAEA8J,EAAO3B,EACTxK,EAAKoM,QACU,UAAf7B,GACgB,QAAdmB,EAAAD,EAAKY,iBAAS,IAAAX,OAAA,EAAdA,EAAgB1J,OACA,QADK2J,EACnBF,EAAKY,iBAAS,IAAAV,OAAA,EAAdA,EAAgB3J,MAChBhC,EAAKoM,QACF,OAALtI,QAAK,IAALA,OAAK,EAALA,EAAO9B,MACPsK,EACW,UAAf/B,EAC8B,gBAAZ,QAAdqB,EAAAH,EAAKY,iBAAS,IAAAT,OAAA,EAAdA,EAAgB5J,QACU,WAAZ,QAAd6J,EAAAJ,EAAKY,iBAAS,IAAAR,OAAA,EAAdA,EAAgB7J,OAGC,WAAZ,OAAL8B,QAAK,IAALA,OAAK,EAALA,EAAO9B,QAAsC,gBAAZ,OAAL8B,QAAK,IAALA,OAAK,EAALA,EAAO9B,OAGnCuK,EAAO/B,EACTxK,EAAKS,gBACU,UAAV,OAALqD,QAAK,IAALA,OAAK,EAALA,EAAOpD,KACL,KACK,OAALoD,QAAK,IAALA,OAAK,EAALA,EAAOpD,IACb,IAAI8L,EAAS,CACXC,IAAKN,EACL9J,IAAK2J,EACLtL,IAAK6L,EACLG,KAAM,EACNC,MAAO,GAELL,IACFE,EAAOnK,IAAM,EACbmK,EAAOC,IAAMzM,EAAKoM,UAGH,UAAf7B,EAC8B,WAAZ,QAAduB,EAAAL,EAAKY,iBAAS,IAAAP,OAAA,EAAdA,EAAgB9J,OACC,WAAZ,OAAL8B,QAAK,IAALA,OAAK,EAALA,EAAO9B,UAEXwK,EAAOE,KAAOV,IAEC,UAAfzB,EAC8B,gBAAZ,QAAdwB,EAAAN,EAAKY,iBAAS,IAAAN,OAAA,EAAdA,EAAgB/J,OACC,gBAAZ,OAAL8B,QAAK,IAALA,OAAK,EAALA,EAAO9B,UAEXwK,EAAOG,MAAQX,GACjB,MAAMY,EAAUrB,EAAUsB,UACvBJ,IAAW,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKA,QAASH,EAAWtM,EAAKoM,QAAUD,IAe5B,IAADW,EAAAC,GAZH,UAAfxC,KACe,IAAbqC,GAAgBrB,EAAUnN,KAAKoO,IAClB,IAAbI,IACGN,IAAUf,EAAUqB,GAASvK,KAAO2J,GACpB,gBAAZ,OAALlI,QAAK,IAALA,OAAK,EAALA,EAAO9B,SACTuJ,EAAUqB,GAASD,OAASX,GACT,WAAZ,OAALlI,QAAK,IAALA,OAAK,EAALA,EAAO9B,SAAmBuJ,EAAUqB,GAASF,MAAQV,KAI1C,UAAfzB,MACe,IAAbqC,GAAgBrB,EAAUnN,KAAKoO,IAClB,IAAbI,IACGN,IAAUf,EAAUqB,GAASvK,KAAO2J,GACX,gBAAZ,QAAdc,EAAArB,EAAKY,iBAAS,IAAAS,OAAA,EAAdA,EAAgB9K,SAClBuJ,EAAUqB,GAASD,OAASX,GACA,WAAZ,QAAde,EAAAtB,EAAKY,iBAAS,IAAAU,OAAA,EAAdA,EAAgB/K,SAClBuJ,EAAUqB,GAASF,MAAQV,WAMvC,MAAMI,EAAUlB,EAAO1M,OAAS0M,EAAO,GAAGkB,QAAU,SAC9CtO,EAAIyN,EAAUsB,UAAWG,GAAMA,EAAEP,MAAQL,GAO/C,OANAb,EAAUlL,QAASoM,KACN,IAAP3O,IACc,UAAZ2O,EAAIA,MAAiBlB,EAAUzN,GAAG4O,KAAOD,EAAIpK,KACjC,eAAZoK,EAAIA,MAAsBlB,EAAUzN,GAAG6O,MAAQF,EAAIpK,QAGpDkJ,IC5HaD,CACd,OAANJ,QAAM,IAANA,OAAM,EAANA,EAAQ5I,QAAQtC,KAChBwK,EACAD,GAEF,OACEjF,IAAAsB,cAACqG,IAAI,CACHpG,UAAW,sBAAwBoD,EAAapB,KAAO,KAAO,WAE9DvD,IAAAsB,cAACsG,IAAI,KACH5H,IAAAsB,cAACuG,IAAM,CAACtE,KAAMoB,EAAapB,KAAMuE,iBAAiB,GAChD9H,IAAAsB,cAACyG,IAAY,CAACxG,UAAU,yBACtBvB,IAAAsB,cAAC0G,IAAW,CAACzG,UAAU,iBAAgB,eACxB,IACbvB,IAAAsB,cAAA,YACEtB,IAAAsB,cAAA,KAAGC,UAAU,iBAGjBvB,IAAAsB,cAAA,SACE2G,SAAS,IACTC,UAAYzE,GACI,KAAdA,EAAEkC,SACEf,EAAgB,CAAErB,MAAM,EAAOiC,KAAM,OAG3CvD,QAASA,IAAM2C,EAAgB,CAAErB,MAAM,EAAOiC,KAAM,OACpDjE,UAAU,+BAGdvB,IAAAsB,cAAC6G,IAAU,CAAC5G,UAAU,YAAYQ,MAAO,CAAEqG,UAAWhD,IACpDpF,IAAAsB,cAAA,KAAGC,UAAU,aACXvB,IAAAsB,cAAA,oCAAA+G,OACc,SAAZ7N,EAAsB,SAAW,OAAM,gBAEzCwF,IAAAsB,cAAA,QACEC,UAAS,IAAA8G,OAAMxC,EAAsB,KAAO,WAAW,SAEzD7F,IAAAsB,cAAA,QACEC,UAAS,SAAA8G,OAAWxC,EAAsB,KAAO,WAAW,IAAAwC,OACxD7N,EAAQ,MACdwF,IAAAsB,cAAA,YACiB,YAAd2D,EACG,OACe,WAAfA,EACA,GACA,KAAM,KAEZjF,IAAAsB,cAAA,QACEC,UAAS,SAAA8G,OAA0B,WAAfpD,EAA0B,KAAO,WAAW,IAAAoD,OAEjD,kBAAfpD,EACIa,EACAD,GAEArL,EAAQ,OAGhBwF,IAAAsB,cAAA,KAAGC,UAAU,QAAO,sEAGpBvB,IAAAsB,cAAA,OACES,MAAO,CACLqG,UAAWhD,EACXkD,UAAWlD,EACXmD,SAAU,OACVC,OAAQ,8BAGVxI,IAAAsB,cAAA,aACEtB,IAAAsB,cAAA,aACEtB,IAAAsB,cAAA,MAAIS,MAAO,CAAE0G,aAAc,8BACzBzI,IAAAsB,cAAA,MAAIS,MAAO,CAAE2G,MAAO,0BAA2B,YAC/C1I,IAAAsB,cAAA,MACES,MAAO,CACL4G,UAAW,QACXD,MAAO,0BAEV,UAGD1I,IAAAsB,cAAA,MACES,MAAO,CACL4G,UAAW,QACXD,MAAO,0BAEV,cAGD1I,IAAAsB,cAAA,MACES,MAAO,CACL4G,UAAW,QACXD,MAAO,0BAEV,WAKL1I,IAAAsB,cAAA,aACgB,OAAbyE,QAAa,IAAbA,OAAa,EAAbA,EAAe3N,IAAKC,GACnB2H,IAAAsB,cAAA,MAAIS,MAAO,CAAE0G,aAAc,8BACzBzI,IAAAsB,cAAA,MAAIS,MAAO,CAAE6G,SAAU,UAAYvQ,EAAK8O,KACxCnH,IAAAsB,cAAA,MACEC,UAAU,kBACVQ,MAAO,CAAE4G,UAAW,UAAU,GAAAN,OAE1BQ,YAAa,OAAJxQ,QAAI,IAAJA,OAAI,EAAJA,EAAM0E,OAErBiD,IAAAsB,cAAA,MACEC,UAAU,yBACVQ,MAAO,CAAE4G,UAAW,UAEpB3I,IAAAsB,cAAA,QAAMC,UAAU,eAAa,GAAA8G,OAAKQ,YAC5B,OAAJxQ,QAAI,IAAJA,OAAI,EAAJA,EAAMgP,OACP,OAEHrH,IAAAsB,cAAA,MAAIC,UAAU,aAAaQ,MAAO,CAAE4G,UAAW,UAAU,GAAAN,OACnDQ,YAAa,OAAJxQ,QAAI,IAAJA,OAAI,EAAJA,EAAM+O,aAQ/BpH,IAAAsB,cAAA,OAAKC,UAAU,oDACbvB,IAAAsB,cAACwH,IAAO,CACNb,SAAS,IACTC,UAAYzE,GACI,KAAdA,EAAEkC,SACEf,EAAgB,CAAErB,MAAM,EAAOiC,KAAM,OAG3CjE,UAAU,4DACVU,QAASA,IAAM2C,EAAgB,CAAErB,MAAM,EAAOiC,KAAM,QACrD,UAGDxF,IAAAsB,cAACwH,IAAO,CACNb,SAAS,IACTC,UAAYzE,GACI,KAAdA,EAAEkC,UACEb,EACE,KACsB,SAAtBH,EAAaa,KACbX,IACA1L,KAGRoI,UAAS,GAAA8G,OACPvD,EAAY,oBAAsB,sBAAqB,gDAEzD7C,QAASA,IACP6C,EACI,KACsB,SAAtBH,EAAaa,KACbX,IACA1L,KAGL2L,EAAY,gBAAkBS,GACtB,UASnBlC,EAAgBnB,IAKf,IALgB,KACrBqB,GAAO,EAAK,eACZhK,EAAc,OACdJ,EAAM,WACNmK,EAAa,UACdpB,EAMC,IAJA,IAAIpD,EAAO,GACPiK,EAAa,uCACbC,EAAmBD,EAAW7P,OAC9B+P,EAAa,GACRzQ,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAI0Q,EAAIH,EAAWI,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IACrDlK,GAAQoK,EACRD,EAAWnQ,KAAKoQ,GAGlB,MAAM9J,EAAsBC,YAAaC,GAAUA,EAAMC,cAClDmE,EAAW6F,GAAgBvJ,IAAMC,SAASgJ,IAC1CO,EAAeC,GAAoBzJ,IAAMC,SAASnB,IAClDgF,EAAaH,GAAkB3D,IAAMC,UAAS,IAC9C4D,EAAQD,GAAa5D,IAAMC,SAAS,IAW3C,OARAS,oBAAU,MACK,IAAT6C,IACFS,SAASC,eAAe,MAAMtH,MAAQ,GACtCqH,SAASC,eAAe,MAAMtH,MAAQ,GACtCqH,SAASC,eAAe,MAAMtH,MAAQ,KAEvC,CAAC4G,IAGFvD,IAAAsB,cAACqG,IAAI,CAACpG,UAAWgC,EAAO,KAAO,UAC7BvD,IAAAsB,cAACsG,IAAI,KACH5H,IAAAsB,cAACuG,IAAM,CACLtE,KAAMA,EACNmG,QAASA,KACPnQ,GAAe,IAEjBoQ,KAAK,KACL5H,MAAO,CAAEqD,OAAQ,UAEjBpF,IAAAsB,cAACyG,IAAY,CAACxG,UAAU,yBACtBvB,IAAAsB,cAAC0G,IAAW,CAACzG,UAAU,iBAAgB,iBAEzCvB,IAAAsB,cAAC6G,IAAU,CAAC5G,UAAU,aACpBvB,IAAAsB,cAAA,KAAGC,UAAU,aAAY,+BACKvB,IAAAsB,cAAA,QAAMC,UAAU,SAAQ,UAAc,IACjEnC,EAAoB,KAEvBY,IAAAsB,cAAA,KAAGC,UAAU,QAAO,sDAGpBvB,IAAAsB,cAAA,KAAGC,UAAU,aAAY,qBACTiI,EAAc,6CAG9BxJ,IAAAsB,cAAA,OAAKC,UAAU,eACbvB,IAAAsB,cAAA,SACEsI,aAAa,MACbC,QAAUpG,IACRD,EAAK,CACHC,IACAnE,MAAO,EACPoE,YACAC,iBACAC,YACAC,SACAC,cACA3K,YAGJmB,GAAG,KACHoE,KAAK,OACLqD,MAAO,CAAE+H,cAAe,aACxBvI,UAAU,gBACVwI,UAAU,IACVC,YAAatG,EAAU,KAEzB1D,IAAAsB,cAAA,SACEsI,aAAa,MACbC,QAAUpG,IACRD,EAAK,CACHC,IACAnE,MAAO,EACPoE,YACAC,iBACAC,YACAC,SACAC,cACA3K,YAGJmB,GAAG,KACHoE,KAAK,OACLqD,MAAO,CAAE+H,cAAe,aACxBvI,UAAU,0BACVwI,UAAU,IACVC,YAAatG,EAAU,KAEzB1D,IAAAsB,cAAA,SACEsI,aAAa,MACbC,QAAUpG,IACRD,EAAK,CACHC,IACAnE,MAAO,EACPoE,YACAC,iBACAC,YACAC,SACAC,cACA3K,YAGJmB,GAAG,KACHoE,KAAK,OACLqD,MAAO,CAAE+H,cAAe,aACxBvI,UAAU,gBACVwI,UAAU,IACVC,YAAatG,EAAU,OAK7B1D,IAAAsB,cAAC2I,IAAY,CAAC1I,UAAU,oDACtBvB,IAAAsB,cAACwH,IAAO,CACNvH,UAAU,mDACVU,QAASA,KACP1I,GAAe,KAElB,UAGDyG,IAAAsB,cAACwH,IAAO,CACNvH,WACGuC,EAAc,WAAa,8BAC5B,sCAEF7B,QAASA,KACP9I,IACAwK,GAAe,KAGhBL,GACQ,U,iCC/WvB,sKAWA,MAAM9B,UAAsBxB,IAAMkK,UAChCC,YAAYjL,GAAQ,IAADkL,EACjBC,MAAMnL,GAAMkL,EAAAE,KAAC,KAafC,qBAAwBC,IACtBC,WAAW,KACT,IAAIC,EAAO1G,SAASC,eAAe,MAADoE,OAAOmC,EAAG,oBAC5CE,EAAKC,UAAUC,IAAI,MAAO,kBAC1BF,EAAKG,UAAS,gIACb,MACJ,KAEDC,oBAAsB,CACpBnO,EACAoO,EACAC,EACAR,EACAS,EACAC,EACAC,KAEA,MAAM,cAAEjK,EAAa,WAAEO,GAAe6I,KAAKpL,MAC3C,IAAIkM,EAAU3J,EACd,IAAInJ,EAAQ8S,EAAQ7D,UAAW8D,GAAQA,EAAI/Q,IAAMkQ,GACjD,IAAIhS,EAAIyS,EAAkBK,QAAQ3O,GAClCyO,EAAQ9S,GAAOyS,GAAUG,EAAkB1S,GAC3C4S,EAAQ9S,GAAO0S,GAAcG,EAAkB3S,GAE/C+S,QAAQC,QACRf,WAAWrR,UACT8H,EAAckK,IACb,MACH,KAEFK,cAAgBrS,MAAOkB,EAAIkQ,EAAKkB,KAC9B,MAAM,cAAExK,EAAa,WAAEO,EAAU,cAAEpB,EAAa,YAAE1C,GAAgB2M,KAAKpL,MACvE,GAAgB,sBAAbvB,EACD,OAGF,IAAIyN,EAAU3J,EACd,IACEpB,GAAc,GACd,MAAMsL,EAAM,iCACZ,IAAIjB,EAAO,KACPkB,EAAW,KACfnB,WAAWrR,UAGT,GAFAsR,EAAO1G,SAASC,eAAe,GAADoE,OAAIqD,IAClCE,EAAW5H,SAASC,eAAe,GAADoE,OAAIqD,EAAQ,SACjC,OAAThB,QAA0B9J,IAAT8J,EACnB,OAAO,EAETkB,EAASf,UAAY,aACrBH,EAAKC,UAAUC,IAAI,aACbiB,IAAM,CACVC,OAAQ,OACRH,IAAKA,EACLtT,KAAM,CAAEA,KAAM,CAACiC,MACdyR,MAAK,SAAUC,GAAW,IAADC,EAC1B,IAAI5T,EAAe,OAAR2T,QAAQ,IAARA,GAAc,QAANC,EAARD,EAAU3T,YAAI,IAAA4T,OAAN,EAARA,EAAgB5T,KAC3B,IAAIC,EAAQ8S,EAAQ7D,UAAW8D,GAAQA,EAAI/Q,IAAMkQ,GAC7CnS,EAAK,KAA0B,IAApBA,EAAK,GAAGiP,SACrB8D,EAAQ9S,GAAOsD,aAAevD,EAAK,GAAGuD,aACtCwP,EAAQ9S,GAAO4T,oBAAqB,EACpCd,EAAQ9S,GAAO6T,mBAAqB,wBACpCf,EAAQ9S,GAAOyD,WAAa1D,EAAK,GAAG0D,WACpCqP,EAAQ9S,GAAO4D,YAAc7D,EAAK,GAAG6D,YACrCkP,EAAQ9S,GAAO+D,aAAehE,EAAK,GAAGgE,aACtC+O,EAAQ9S,GAAO8D,aAAe/D,EAAK,GAAG+D,aACtCgP,EAAQ9S,GAAO8C,IAAM/C,EAAK,GAAG+C,IAC7BgQ,EAAQ9S,GAAOgD,OAASjD,EAAK,GAAGiD,OAChCoP,EAAKC,UAAUyB,OAAO,OACtB1B,EAAKC,UAAUC,IAAI,mBAEnBQ,EAAQ9S,GAAO4T,oBAAqB,EACpCd,EAAQ9S,GAAO6T,mBAAqB,wBACpCf,EAAQ9S,GAAOyD,WAAa,GAC5BqP,EAAQ9S,GAAO4D,YAAc,GAC7BkP,EAAQ9S,GAAO+D,aAAe,GAC9B+O,EAAQ9S,GAAO8D,aAAe,GAC9BsO,EAAKC,UAAUC,IAAI,OACnBF,EAAKC,UAAUyB,OAAO,iBACtBR,EAASf,UAAY,yBAEvB3J,EAAckK,OAEf,KACH,MAAOiB,GACP,OAAO,IAET,KAEFC,2BAA6BlT,MAAOmT,EAAU/B,EAAKkB,EAAU/S,KAC3D,MAAM,cAAEuI,EAAa,WAAEO,EAAU,cAAEpB,EAAa,YAAE1C,GAAgB2M,KAAKpL,MACvE,IAAIkM,EAAU3J,EAEd,IAAInJ,EAAQ8S,EAAQ7D,UAAW8D,GAAQA,EAAI/Q,IAAMkQ,EAAIlQ,IAKrD,IACE,MAAMqR,EAAM,qCACZ,IAAIjB,EAAO,KACPkB,EAAW,KACXY,EAAY,CAAC,CACf,GAAMhC,EAAIlQ,GACV,UAAkB,gBAAL3B,EAAsB4T,EAAY/B,EAAIiC,UAAUjC,EAAIiC,UAAU,GAC3E,UAAkB,aAAL9T,EAA0B,OAAR4T,QAAQ,IAARA,OAAQ,EAARA,EAAUrR,UAAWsP,EAAItP,UACxD,QAAgB,aAALvC,EAA0B,OAAR4T,QAAQ,IAARA,OAAQ,EAARA,EAAUtR,QAAQuP,EAAIvP,QACnD,gBAAmBuP,EAAIpQ,gBACvB,WAAcoQ,EAAInQ,WAClB,OAAe,OAAL1B,EAAW4T,EAAS/B,EAAIzN,MAGpC0N,WAAWrR,UAQT,GANAiH,GAAc,GAGdqK,EAAO1G,SAASC,eAAe,GAADoE,OAAIqD,IAClCE,EAAW5H,SAASC,eAAe,GAADoE,OAAIqD,EAAQ,SAEjC,OAAThB,QAA0B9J,IAAT8J,EACnB,OAAO,EAETkB,EAASf,UAAY,mBAGfgB,IAAM,CACVC,OAAQ,OACRH,IAAKA,EACLtT,KAAM,CAAEA,KAAMmU,KACbT,MAAK,SAAUC,GAAW,IAADU,EAC1B,IAAIrU,EAAe,OAAR2T,QAAQ,IAARA,GAAc,QAANU,EAARV,EAAU3T,YAAI,IAAAqU,OAAN,EAARA,EAAgBrU,KAC3B,GAAIA,EAAK,GAAI,CAAC,IAADsU,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAMNC,EALL,IAAuB,IAApBhV,EAAK,GAAGiP,UAAwC,IAApBjP,EAAK,GAAGiV,QACrClC,EAAQ9S,GAAkB,WAAI,EAC9B8S,EAAQ9S,GAAkB,UAAI,GAC9BoS,EAAKC,UAAUyB,OAAO,OACtB1B,EAAKC,UAAUC,IAAI,sBAEnBQ,EAAQ9S,GAAkB,WAAI,EAC9B8S,EAAQ9S,GAAkB,UAAW,QAAV+U,EAAGhV,EAAK,UAAE,IAAAgV,OAAA,EAAPA,EAASE,aAEzCnC,EAAQ9S,GAAqB,aAAW,QAAVqU,EAAGtU,EAAK,UAAE,IAAAsU,OAAA,EAAPA,EAAS/Q,aAC1CwP,EAAQ9S,GAA2B,oBAAW,QAAPsU,EAAAvU,EAAK,UAAE,IAAAuU,OAAA,EAAPA,EAAStF,WAAkB,QAAXuF,EAAIxU,EAAK,UAAE,IAAAwU,OAAA,EAAPA,EAASS,SACpElC,EAAQ9S,GAA2B,mBAAW,QAAVwU,EAAGzU,EAAK,UAAE,IAAAyU,OAAA,EAAPA,EAASS,aAChDnC,EAAQ9S,GAAmB,WAAW,QAAVyU,EAAG1U,EAAK,UAAE,IAAA0U,OAAA,EAAPA,EAAShR,WACxCqP,EAAQ9S,GAAoB,YAAW,QAAV0U,EAAG3U,EAAK,UAAE,IAAA2U,OAAA,EAAPA,EAAS9Q,YACzCkP,EAAQ9S,GAAqB,aAAW,QAAV2U,EAAG5U,EAAK,UAAE,IAAA4U,OAAA,EAAPA,EAAS5Q,aAC1C+O,EAAQ9S,GAAqB,aAAW,QAAV4U,EAAG7U,EAAK,UAAE,IAAA6U,OAAA,EAAPA,EAAS9Q,aAC1CgP,EAAQ9S,GAAY,IAAW,QAAV6U,EAAG9U,EAAK,UAAE,IAAA8U,OAAA,EAAPA,EAAS/R,IACjCgQ,EAAQ9S,GAAe,OAAW,QAAV8U,EAAG/U,EAAK,UAAE,IAAA+U,OAAA,EAAPA,EAAS9R,WAC/B,CAAC,IAADkS,EAAAC,EAAAC,EACLtC,EAAQ9S,GAA2B,oBAAI,EACvC8S,EAAQ9S,GAA2B,mBAAY,OAAR0T,QAAQ,IAARA,GAAc,QAANwB,EAARxB,EAAU3T,YAAI,IAAAmV,OAAN,EAARA,EAAgBjP,QACvD6M,EAAQ9S,GAAmB,WAAI,GAC/B8S,EAAQ9S,GAAoB,YAAI,GAChC8S,EAAQ9S,GAAqB,aAAI,GACjC8S,EAAQ9S,GAAqB,aAAI,GACjC8S,EAAQ9S,GAAkB,WAAI,EAC9B8S,EAAQ9S,GAAkB,UAAY,OAAR0T,QAAQ,IAARA,GAAc,QAANyB,EAARzB,EAAU3T,YAAI,IAAAoV,OAAN,EAARA,EAAgBlP,QAC9CmM,EAAKC,UAAUC,IAAI,OACnBF,EAAKC,UAAUyB,OAAO,iBACtBR,EAASf,UAAoB,OAARmB,QAAQ,IAARA,GAAc,QAAN0B,EAAR1B,EAAU3T,YAAI,IAAAqV,OAAN,EAARA,EAAgBnP,QAG/B,aAAL5F,IACDyS,EAAQ9S,GAAkB,UAAIiU,EAASrR,UACvCkQ,EAAQ9S,GAAwB,gBAAIiU,EAASoB,eAC7CvC,EAAQ9S,GAAwB,iBAAI,EACpC8S,EAAQ9S,GAAgB,QAAIiU,EAAStR,SAEvCiG,EAAckK,MAEhB,IAAIwC,EAAStD,KAAKhL,MAAMuO,KAAO,EAC/BvD,KAAKwD,SAAS,CAACD,KAAMD,KACpB,KACH,MAAOvB,GACP,OAAO,IAET,KAEF0B,uBAAyB,CAACpR,EAAO6N,EAAKkB,KACpC,MAAM,WAAEjK,GAAe6I,KAAKpL,MAC5B,IAAI8O,EAAWvM,EACf,IAAInJ,EAAQ0V,EAASzG,UAAW8D,GAAQA,EAAI/Q,IAAMkQ,GAClD,IAAIyD,EAAQD,EAAS1V,GACR,IAATqE,GAAsD,WAAvCsR,EAAoB,aAAElN,eACvCuJ,KAAKC,qBAAqBC,IAE5B,KAEF0D,qBAAuB,CAACvR,EAAO6N,EAAKkB,KAClC,MAAM,WAAEjK,EAAU,cAAEpB,GAAkBiK,KAAKpL,MAC3C,IAAI8O,EAAWvM,EAEf,GADApB,GAAc,GACc,YAAxB1D,EAAMoE,cAER,OADAV,GAAc,GACP,EAGT,IAAI/H,EAAQ0V,EAASzG,UAAW8D,GAAQA,EAAI/Q,IAAMkQ,GAEnB,IADnBwD,EAAS1V,GACK,gBACxBgS,KAAKC,qBAAqBC,IAE5B,KAEF2D,kBAAoB/U,eAAOkB,EAAIkQ,EAAKkB,EAAU/S,GAAyB,IAApByV,EAAOC,UAAAnV,OAAA,QAAA0H,IAAAyN,UAAA,GAAAA,UAAA,GAAG,KAC3D,MAAM,WAAE5M,EAAU,cAAEP,EAAa,cAAEb,EAAa,YAAC1C,GAAgByM,EAAKlL,MACtE,IAAI8O,EAAWvM,EACf,IACEpB,GAAc,GACd,MAAMsL,EAAM,oBACZ,IAAIjB,EAAO,KACPkB,EAAW,KAGX/K,GAAQ,EACRyN,EAAa,GACjB7D,WAAWrR,UAGT,GAFAsR,EAAO1G,SAASC,eAAe,GAADoE,OAAIqD,IAClCE,EAAW5H,SAASC,eAAe,GAADoE,OAAIqD,EAAQ,SACjC,OAAThB,QAA0B9J,IAAT8J,EACnB,OAAO,EAETkB,EAASf,UAAY,mBACfgB,IAAM,CACVC,OAAQ,OACRH,IAAKA,EACLtT,KAAM,CAAEwC,QAAS,CAACP,MACjByR,MAAK,SAAUC,GAAW,IAADuC,EAC1B,IAAIlW,EAAe,OAAR2T,QAAQ,IAARA,GAAc,QAANuC,EAARvC,EAAU3T,YAAI,IAAAkW,OAAN,EAARA,EAAgBlW,KACvB+F,EAAY4N,EAAS3T,KAAK+F,UAC9B,IAAI9F,EAAQ0V,EAASzG,UAAW8D,GAAQA,EAAI/Q,IAAMkQ,IAChC,IAAdpM,GAAsB/F,EAAKa,OAAS,GACtC2H,GAAQ,EACRmN,EAAS1V,GAAOK,GAAON,EAAK,GAAG6C,UAC/B8S,EAAS1V,GAAOK,EAAM,UAAYN,EAAK,GAAGsV,eAC1CK,EAAS1V,GAAOK,EAAM,WAAY,EAClCqV,EAAS1V,GAAOK,EAAM,QAAUN,EAAK,GAAGiC,GACxCgU,EAAa,CACXrT,QAAS5C,EAAK,GAAGiC,GACjBY,UAAW7C,EAAK,GAAG6C,UACnByS,eAAgBtV,EAAK,GAAGsV,eACxBtS,MAAOhD,EAAK,GAAGgD,OAIN,aAAP1C,IACFqV,EAAS1V,GAAO2C,QAAU5C,EAAK,GAAGiC,GAClC0T,EAAS1V,GAAO+C,MAAQhD,EAAK,GAAGmW,SAGvB,YAAP7V,IACFqV,EAAS1V,GAAOmW,YAAcpW,EAAK,GAAG+C,KAGxB,sBAAbuC,IACDqQ,EAAS1V,GAAO8C,IAAM/C,EAAK,GAAG+C,KAIf,kBAAduC,IACD+M,EAAKC,UAAUyB,OAAO,OACtB1B,EAAKC,UAAUC,IAAI,oBAIrB/J,GAAQ,EACRmN,EAAS1V,GAAOK,GAAO2B,EACvB0T,EAAS1V,GAAOK,EAAM,UAAY,uBAClCqV,EAAS1V,GAAOK,EAAM,WAAY,EAClCqV,EAAS1V,GAAOK,EAAM,QAAU,KAChC+R,EAAKC,UAAUC,IAAI,OACnBF,EAAKC,UAAUyB,OAAO,iBACtBR,EAASf,UAAY,uBAEV,aAAPlS,IACFqV,EAAS1V,GAAO2C,QAAU,GAC1B+S,EAAS1V,GAAO+C,MAAQ,IAEf,YAAP1C,IACFqV,EAAS1V,GAAOmW,YAAc,MAEhB,sBAAb9Q,IACDqQ,EAAS1V,GAAO8C,IAAM,QAKZ,iBAAbuC,IAA0C,IAAVkD,EACjCuJ,EAAKkC,2BAA2BgC,EAAYF,EAAS1C,EAAU,aAE/DxK,EAAc8M,IAEf,KACH,MAAO3B,GACP,OAAO,IApTT/B,KAAKhL,MAAQ,CACXoP,gBAAgB,EAChBC,eAAgB,iBAChBlN,WAAY6I,KAAKpL,MAAMuC,WACvBmN,SAAU,EACVf,KAAM,EACNgB,cAAe,GAEjBvE,KAAKgC,2BAA6BhC,KAAKgC,2BAA2BwC,KAAKxE,MACvEA,KAAK6D,kBAAoB7D,KAAK6D,kBAAkBW,KAAKxE,MA+SvDyE,SACE,MAAM,QACJrN,EAAO,WACPE,EAAU,WACVD,EAAU,cACVE,EAAa,aACbC,EAAY,eACZ7J,EAAc,SACd+W,GAAW,EAAI,eACfC,EAAiB,GAAE,YACnBtR,EAAW,WACX8D,GACE6I,KAAKpL,MACT,IAAI,eAAEwP,EAAc,KAAGb,GAASvD,KAAKhL,MAGjC2L,EAAoB,GACpBC,EAAoB,GACpBC,EAAoB,GACH,IAAD+D,EAAhBD,IACsB,OAAdA,QAAc,IAAdA,GAAoB,QAANC,EAAdD,EAAgB5W,YAAI,IAAA6W,GAApBA,EAAsB9W,IAAK+W,IACnClE,EAAkBnS,KAAKqW,EAAEC,MACzBlE,EAAkBpS,KAAKqW,EAAE7U,IACzB6Q,EAAkBrS,KAAKqW,EAAE3J,SAK7B,IAAI6J,EACFxN,EAAczJ,IAAKC,GAASA,EAAKqE,MAAMqE,gBAAkB,GACvDuO,EAAgBzN,EAAczJ,IAAKC,GAASA,EAAKsE,QAAU,GAC3D4S,EAAyBzN,EAEzBA,EAAa1J,IAAKC,GAASA,EAAKqE,MAAMqE,eADtC,GAEAyO,EAAyB1N,EAEzBA,EAAa1J,IAAKC,GAASA,EAAKsE,OADhC,GAEJ,MAAM8S,EAAY/N,EAAQtJ,IAAI,CAACC,EAAMC,KACnCD,EAAKqX,UAAY,CAACnD,EAAU/B,EAAKO,EAAQ4E,KACvC,IAAIhX,EAAMN,EAAKO,UACXgX,EAAYjX,EAAM,SAClBkX,EAAYlX,EAAM,SAClBJ,GAAO,EACPsE,EAAS,KACT6O,EAAW,MAAQlB,EAAQ,GAAI,IAAM7R,EAEV,CAAC,eAAgB,OACnBE,SAASF,IAAqB,iBAAbgF,GAC5C2M,KAAKgC,2BAA2BC,EAAU/B,EAAKkB,EAAU/S,GACzDJ,GAAO,GACO,gBAAPI,IACP2R,KAAKmB,cAAcc,EAAU/B,EAAIlQ,GAAIoR,EAAU/S,GAC/CJ,GAAO,GAGE,aAAPI,IACF2R,KAAK6D,kBAAkB5B,EAAU/B,EAAIlQ,GAAIoR,EAAU/S,EAAK6R,GACxDjS,GAAO,GAGT,IAAIuX,EAAY,CAAC,QAAS,cAiC1B,GAhCW,YAAPnX,GAA+C,SAA1B2R,KAAKpL,MAAMvB,YAC7BmS,EAAUjX,SAAS0T,EAASxL,gBAK/ByJ,EAAkB,aAAI+B,EACtB/B,EAAiB,YAAI,OALrB3N,EAAS,uBACTkT,GAAY,EACZxX,GAAO,GAKO,YAAPI,IACJmX,EAAUjX,SAAS0T,EAASxL,gBAiB/ByJ,EAAkB,aAAI+B,EACtB/B,EAAiB,YAAI,MAhBjBtG,SAASqI,IAEXhU,GAAO,EACP+R,KAAK6D,kBAAkB5B,EAAU/B,EAAIlQ,GAAIoR,EAAU/S,IAC9B,IAAZ4T,GACT/B,EAAkB,aAAI,KACtBA,EAAiB,YAAI,KACrBjS,GAAO,IAGPsE,EAAS,kBACTkT,GAAY,EACZxX,GAAO,IAQF,gBAAPI,GAAyB6W,EAAsBtW,OAAS,EAC1D,GAAKqW,EAAsB1W,SAAS0T,EAASxL,eAGtC,CACL,IAAIvI,EAAI+W,EAAsBjE,QAAQiB,EAASxL,eAC/CyJ,EAAsB,iBAAIgF,EAAsBhX,GAChDD,GAAO,EACP+R,KAAK4D,qBAAqB3B,EAAU/B,EAAIlQ,GAAIoR,QAN5CnT,GAAO,EACPsE,EAAM,0BAgDV,GAvCW,kBAAPlE,GACF2R,KAAKyD,uBAAuBxB,EAAU/B,EAAIlQ,GAAIoR,GAGrC,aAAP/S,IACGsS,EAAkBpS,SAAS0T,IAI9BhU,GAAO,EACP+R,KAAKQ,oBACHyB,EACA,gBACA,gBACA/B,EAAIlQ,GACJ2Q,EACAC,EACAC,KAXF5S,GAAO,EACPsE,EAAM,wBAcC,wBAAPlE,IACGsS,EAAkBpS,SAAS0T,IAI9BhU,GAAO,EACP+R,KAAKQ,oBACHyB,EACA,2BACA,2BACA/B,EAAIlQ,GACJ2Q,EACAC,EACAC,KAXF5S,GAAO,EACPsE,EAAM,wBAeC,YAAPlE,GAA4B,uBAAPA,EACvB,GAAK0W,EAAcxW,SAAS0T,EAASxL,eAG9B,CACL,IAAIvI,EAAI6W,EAAc/D,QAAQiB,EAASxL,eAC5B,uBAAPpI,EACF6R,EAAqB,gBAAI8E,EAAc9W,GAEvCgS,EAAgB,WAAI8E,EAAc9W,GAEpCD,GAAO,OATPA,GAAO,EACPsE,EAAM,2BAYV,GAAW,WAAPlE,EAAkB,EACGqX,MAAMzD,GAK3BhU,GAAO,GAHPA,GAAO,EACPsE,EAAM,2BAOV,IAAIkT,EAAY,KAEdA,EADe,UAAb1X,EAAKqG,OACKsR,MAAMzD,IAIF,IAAdwD,IACFlT,EAAM,GAAAwL,OAAMhQ,EAAKyG,KAAI,iBAAAuJ,OAAgBhQ,EAAKqG,OAIjC,gBAAP/F,GAAwC,iBAAfgF,GACxBqS,MAAMzD,KACPwD,GAAY,EACZlT,EAAM,GAAAwL,OAAMhQ,EAAKyG,KAAI,uBACrBvG,GAAO,GA2BX,GAtBc,CACZ,QACA,iBACA,gBACA,cACA,SACA,cAGUM,SAASF,IAAqB,KAAb4T,GAC3B1P,EAAS,GACTkT,GAAY,EACZxX,GAAO,GACS,SAAPI,IACJmX,EAAUjX,SAAS0T,EAASxL,iBAC/BlE,EAAS,uBACTkT,GAAY,EACZxX,GAAO,IAKA,iBAAPI,GAAiC,eAAPA,EAAsB,CACvB,CAAC,EAAG,EAAG,EAAG,GAEdE,SAASqL,SAASqI,KAC3B,IAAZA,GAEAwD,GAAY,EACZxX,GAAO,EACPsE,EAAS,GACO,IAAZ0P,IACFA,EAAW,MAGbwD,GAAY,EACZxX,GAAO,EACPsE,EAAS,4BAKb,GAAiB,aAAbxE,EAAKqG,KAAqB,CAE5B,IAAIuR,EAAa,6DACb1D,EAAS2D,MAAMD,IAGI,IAAZ1D,GAFTwD,GAAY,EACZxX,GAAO,IAKPsE,EAAM,mCACNkT,GAAY,EACZxX,GAAO,GAMX,GADAiS,EAAIqF,GAAahT,EACbtE,GAAQwX,EAAW,CACJ,CAAC,eAAgB,aAClBlX,SAASF,KAEvB6R,EAAIoF,IAAa,EACjB3X,KAIJ,MAAO,CACLkY,SAAO5X,IAAQwX,GACfxR,QAAS1B,IAIbxE,EAAK+X,UAAY,CAACC,EAAM7F,EAAKlS,KAC3B,IAAIK,EAAMN,EAAKO,UACXgX,EAAYjX,EAAM,SAClBkX,EAAYlX,EAAM,SAClBJ,GAAO,EACPmT,EAAW,MAAQlB,EAAQ,GAAI,IAAM7R,EACrC2X,EAAM9F,EAAIqF,GAId,OAAuB,IAAnBrF,EAAIoF,IACNlB,GAAiB,EACjBnW,GAAO,EAELyH,IAAAsB,cAAA,OAAKhH,GAAIoR,EAAUnK,UAAU,sBAC1B8O,EACDrQ,IAAAsB,cAAA,QAAMhH,GAAIoR,EAAW,OAAQnK,UAAU,eACpC+O,KASS,iBAAb3S,IAAsD,IAArB6M,EAAe,WACnDkE,GAAiB,EACjBnW,GAAO,EAELyH,IAAAsB,cAAA,OAAKhH,GAAIoR,EAAUnK,UAAU,sBAC1B8O,EACDrQ,IAAAsB,cAAA,QAAMhH,GAAIoR,EAAW,OAAQnK,UAAU,eACpCiJ,EAAe,aAUtBxK,IAAAsB,cAAA,OAAKhH,GAAIoR,EAAUnK,UAAU,gCAC1B8O,EACDrQ,IAAAsB,cAAA,QAAMhH,GAAIoR,EAAW,OAAQnK,UAAU,eACpC+O,KAKFjY,IAGHkY,EAAa,CAEjBC,SAAUlG,KAAKkG,SAEfC,UAAWA,CAACC,EAAO3F,IACZ2F,EACc,QAAVA,EACA1Q,IAAAsB,cAAA,KAAGC,UAAU,+BACH,SAAVmP,EACA1Q,IAAAsB,cAAA,KAAGC,UAAU,kCACf,KALYvB,IAAAsB,cAAA,KAAGC,UAAU,iCAUpC,OAFAgK,QAAQC,QACRD,QAAQoF,IAAIlP,GAEVzB,IAAAsB,cAACsP,IAAK,CAACrP,UAAU,oBACfvB,IAAAsB,cAACuP,IAAc,CACbC,SAAS,KACTzY,KAAMoJ,EACNC,QAAS+N,EACT1Q,KAAMwR,EACNQ,QAASpP,GAAc,KACvBqP,UACe,IAAbhC,EACIiC,IAAgB,CACdC,KAAM,QACNC,YAAY,EACZC,gBAAiBA,IAAM9G,KAAKpL,MAAMmS,eAAiB,KAErD,KAENC,UAAU,EACV1P,WAAYA,EACZjJ,IAAKkV,MAOf,MAAM0D,UAAoBvR,IAAMkK,UAC9B6E,SACE,MAAM,QAAErN,EAAO,WAAEC,EAAU,KAAEtJ,GAASiS,KAAKpL,MAErCuQ,EAAY/N,EAAQtJ,IAAI,CAACC,EAAMC,KACnCD,EAAK+X,UAAY,CAACC,EAAM7F,EAAKlS,KAC3B,IAAIK,EAAMN,EAAKO,UACf,MAAW,gBAAPD,GAAiD,WAAxB6R,EAAkB,aAE3CxK,IAAAsB,cAAA,OAAKC,UAAU,sBACZ8O,EACDrQ,IAAAsB,cAAA,QAAMC,UAAU,eAAeiJ,EAAwB,qBAG3C,gBAAP7R,GAAiD,YAAxB6R,EAAkB,aAElDxK,IAAAsB,cAAA,OAAKC,UAAU,SACZ8O,EACDrQ,IAAAsB,cAAA,cAMJtB,IAAAsB,cAAA,WACG+O,EACDrQ,IAAAsB,cAAA,eAICjJ,IAGHkY,EAAa,CAEjBC,SAAUlG,KAAKkG,SAEfC,UAAWA,CAACC,EAAO3F,IACZ2F,EACc,QAAVA,EACA1Q,IAAAsB,cAAA,KAAGC,UAAU,+BACH,SAAVmP,EACA1Q,IAAAsB,cAAA,KAAGC,UAAU,kCACf,KALYvB,IAAAsB,cAAA,KAAGC,UAAU,iCASpC,OACEvB,IAAAsB,cAACsP,IAAK,CAACrP,UAAU,oBACfvB,IAAAsB,cAACuP,IAAc,CACbC,SAAS,KACTzY,KAAMA,EACNqJ,QAAS+N,EACT1Q,KAAMwR,EACNQ,QAASpP,GAAc,KACvB2P,UAAU,Q","file":"static/js/54.6c012a4a.chunk.js","sourcesContent":["//other\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\nimport { submitCsv } from \"apiServices\";\nimport moment from \"moment\";\n\nexport const showErrorsOnly = ({\n  csvData,\n  csvField,\n  isShowErrorOnly,\n  setIsShowErrorOnly,\n  setIsHiddenRows,\n  setCheckingCsv,\n}) => {\n  // ;\n  let tmp_arr_false = [];\n  let tmp_arr_true = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    let i = index + 1;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n\n    if (stat === false) {\n      if (!tmp_arr_false.includes(i)) {\n        tmp_arr_false.push(i);\n      }\n    } else {\n      if (!tmp_arr_true.includes(i)) {\n        tmp_arr_true.push(i);\n      }\n    }\n  });\n\n  //return array\n  let ret = [];\n  if (isShowErrorOnly === true) {\n    //true = delete all row\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\n    if (ret.length == csvData.length) {\n      return 0;\n    }\n  } else {\n    ret = [];\n  }\n  setIsHiddenRows(ret);\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\n  setCheckingCsv(true);\n};\n\nexport const deleteErrorsField = ({\n  csvData,\n  csvField,\n  dispatch,\n  setCheckingCsv,\n}) => {\n  let new_arr = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n    if (stat === true) {\n      new_arr.push(data);\n    }\n  });\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\n  setCheckingCsv(true);\n};\n\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\n  setCheckingCsv(true);\n};\n\nexport const checking_error = ({\n  csvData,\n  csvField,\n  setIsValidate,\n  setCheckingCsv,\n}) => {\n  if (csvData === undefined) {\n    return 0;\n  }\n  let stats = true;\n  csvData.map((data, index) => {\n    csvField.map((dataField, indexField) => {\n      // console.log(data[dataField + 'status']);\n      let status = data[dataField.dataField + \"Status\"];\n\n      //jika outbound type = lainya, maka harus isi outbound reason\n      if (dataField.dataField == \"outboundType\") {\n        let type = data[dataField.dataField].toUpperCase();\n        if (type == \"LAINNYA\") {\n          if (data[\"outboundReason\"] == \"\") {\n            status = false;\n          }\n        }\n      }\n\n      if (status === false) {\n        // console.log(data, dataField.dataField, data[dataField.dataField + 'Status']);\n        stats = false;\n      }\n    });\n  });\n  if (stats === false) {\n    setIsValidate(false);\n  } else {\n    setIsValidate(true);\n  }\n  setCheckingCsv(false);\n};\n\nconst setHeader = (csvData) => {\n  //get time - created at\n  let time = new Date().getTime();\n  let d = new Date(time);\n  let n = d.getMilliseconds();\n  let list_area = [];\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    //in outbound csv upload only check area source\n    if (!list_area.includes(data.areaSource)) {\n      return_data.push({\n        id: index,\n        warehouseSource: warehouse_source,\n        warehouseDestination: warehouse_source,\n        areaSource: data.areaSource,\n        areaName: data.areaName,\n        areaDestination: data.areaDestination,\n        list: [],\n        createdAt: n,\n      });\n      list_area.push(data.areaSource);\n    }\n  });\n  return return_data;\n};\n\nconst getSKU = (csvData) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.skuUuid == data.skuUuid &&\n        header.warehouseSource == data.warehouseSource &&\n        header.areaSource == data.areaSource\n      ) {\n        available = true;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        warehouseSource: warehouse_source,\n        areaSource: data.areaSource,\n        skuUuid: data.skuUuid,\n        skuNumber: data.skuNumber,\n        unitOfMeassures: data.uom,\n        photo: data.photos,\n        poList: [],\n      });\n    }\n  });\n  return return_data;\n};\n\nconst checkGrade = (value) => {\n  if (!value) {\n    return;\n  }\n  if (value.toUpperCase() == \"SEMI WASTE\") {\n    return \"semi_waste\";\n  } else if (value.toUpperCase() == \"WASTE\") {\n    return \"waste\";\n  } else {\n    return value;\n  }\n};\n\nconst groupingPO = (csvData, skuList) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    let header_index = \"\";\n\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.warehouseSource == data.warehouseSource &&\n        header.areaSource == data.areaSource &&\n        header.areaDestination == data.areaDestination &&\n        header.skuUuid == data.skuUuid &&\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\n        header.ripenessLevel == data.ripenessLevel &&\n        header.expiryDateCol == data.expiryDateCol\n      ) {\n        available = true;\n        header_index = idx;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        skuUuid: data.skuUuid || \"\",\n        areaSource: data.areaSource || \"\",\n        areaDestination: data.areaDestination || \"\",\n        warehouseSource: warehouse_source || \"\",\n        expiryDateCol: data.expiryDateCol || \"\",\n        expiryDate:\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n        inboundDate: data.inboundDate || \"\",\n        supplierId: data.supplierUuid || \"\",\n        supplierName: data.supplierName || \"\",\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\n        codeGrade: data.skuUuid || \"\",\n        ripenessLevel: data.ripenessLevel || 0,\n        itemList: [],\n      });\n      header_index = return_data.length - 1;\n    }\n    return_data[header_index].itemList.push({\n      areaSource: data.areaSource,\n      areaName: data.areaName,\n      areaNameDestination: data.areaNameDestination,\n      skuNumber: data.skuNumber,\n      wmsPoSkuCode: data.wmsPoSkuCode,\n      ripeness: {\n        label: data.ripenessLevel || \"\",\n        value: data.ripenessLevel || 0,\n      },\n      note: data.reason,\n      expiryDate:\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n      expiryDateText: data.expiryDateCol,\n      qty: data.qty || 0,\n    });\n  });\n  return return_data;\n};\n\nconst setJobPost = (header, skuList, poGroup) => {\n  //insert PO to SKUList\n  skuList.map((skuListData, skuListIdx) => {\n    poGroup.map((poGroup, poGroupIndex) => {\n      if (\n        poGroup &&\n        poGroup.areaSource == skuListData.areaSource &&\n        poGroup.warehouseSource == skuListData.warehouseSource &&\n        poGroup.skuUuid == skuListData.skuUuid\n      ) {\n        skuList[skuListIdx][\"poList\"].push(poGroup);\n      }\n    });\n  });\n\n  //insert sku to Header\n  header.map((headerData, headerIdx) => {\n    skuList.map((skuListData, skuListDataIdx) => {\n      if (\n        poGroup &&\n        headerData.areaSource == skuListData.areaSource &&\n        headerData.warehouseSource == skuListData.warehouseSource\n      ) {\n        header[headerIdx][\"list\"].push(skuListData);\n      }\n    });\n  });\n\n  return header;\n};\n\nconst setResult = (result) => {\n  let arrayResult = [];\n  let i = 1;\n  result.list.map((dataHeader, indexHeader) => {\n    dataHeader.poList.map((poHeader, indexPo) => {\n      poHeader.itemList.map((data, index) => {\n        let isStatus = \"Failed\";\n        if (data.isSuccess) {\n          isStatus = \"Success\";\n        }\n        arrayResult.push({\n          id: i,\n          uploadStatus: isStatus || \"\",\n          uploadStatusReason: data.message,\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\n          skuNumber: data.skuNumber || \"\",\n          ripenessLevel: data.ripeness?.label || \"\",\n          qty: data.qty || 0,\n          reason: data.note || \"\",\n          grade: poHeader.codeGrade || \"\",\n          areaName: data.areaName || \"\",\n          areaNameDestination: data.areaNameDestination || \"\",\n          expiryDateCol: data.expiryDateText || \"\",\n        });\n        i++;\n      });\n    });\n  });\n  return arrayResult;\n};\n\nexport const submit = async ({\n  csvData,\n  csvField,\n  dispatch,\n  selectorStatus,\n  setIsShowModal,\n  setIsSubmitText,\n  setSubmitStatus,\n}) => {\n  setIsSubmitText(\"Loading...\");\n\n  //set header\n  let header = await setHeader(csvData);\n\n  //get list sku\n  let skuList = await getSKU(csvData);\n\n  //grouping PO\n  let poGroup = await groupingPO(csvData, skuList);\n\n  //set JobPost\n  let jobPost = await setJobPost(header, skuList, poGroup);\n\n  //submit\n  let execute = await submitCsv({\n    dataCsv: jobPost,\n    setSubmitStatus,\n    dispatch,\n    transaction: \"movement\",\n  });\n  if (execute == \"error\") {\n    return 0;\n  }\n\n  //set result\n  let result = await setResult(execute?.data);\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\n\n  //renew schema for result\n  let newSchema = [];\n  newSchema.push({\n    dataField: \"uploadStatus\",\n    text: \"Upload Status\",\n    type: \"string\",\n    sort: true,\n  });\n  csvField.map((data, index) => {\n    newSchema.push(data);\n  });\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\n\n  setIsShowModal(false);\n  setIsSubmitText(\"Submit\");\n  setSubmitStatus(true);\n};\n\nexport const submit_old = async ({\n  csvData,\n  dispatch,\n  selectorStatus,\n  setIsShowModal,\n  setIsSubmitText,\n  setSubmitStatus,\n}) => {\n  // console.clear()\n  setIsSubmitText(\"Loading...\");\n  // console.clear();\n  let jobHeader = [];\n\n  //0 get time\n  let time = new Date().getTime();\n  let d = new Date(time);\n  let n = d.getMilliseconds();\n\n  //1. set header\n  jobHeader = [\n    {\n      jobPost: {\n        id: 0,\n        warehouseSource: csvData[0].warehouseSource || \"\",\n        warehouseDestination: csvData[0].warehouseSource || \"\",\n        areaSource: csvData[0].areaSource || \"\",\n        areaDestination: csvData[0].areaDestination || \"\",\n        list: null,\n        createdAt: n,\n      },\n    },\n  ];\n\n  //2. get sku\n  let sku_uuid_array = [];\n  let sku_data = [];\n  csvData.map((data, index) => {\n    if (!sku_uuid_array.includes(data.skuUuid)) {\n      sku_uuid_array.push(data.skuUuid);\n      sku_data.push({\n        skuNumber: data.skuNumber,\n        skuUuid: data.skuUuid,\n        uom: data.uom,\n        photo: null,\n      });\n    }\n  });\n\n  // console.clear();\n  //3. get PO per sku\n  let po_array = [];\n  sku_data.forEach((data_sku, index_sku) => {\n    if (data_sku === null || data_sku === undefined || data_sku === \"\") {\n      return false;\n    }\n\n    let tmp_po = {};\n    tmp_po.skuUuid = data_sku.skuUuid;\n    tmp_po.skuNumber = data_sku.skuNumber;\n    tmp_po.unitOfMeassures = data_sku.uom;\n    tmp_po.photo = data_sku.photo;\n    tmp_po.poList = [];\n    csvData.map((data, index) => {\n      if (data.skuNumber !== data_sku.skuNumber) {\n        return false;\n      }\n\n      let tmp_po_array = {};\n      tmp_po_array.wmsPoSkuCode = data.wmsPoSkuCode || \"\";\n      tmp_po_array.supplierUuid = data.supplierUuid || \"\";\n      tmp_po_array.supplierName = data.supplierName || \"\";\n      tmp_po_array.codeGrade = data_sku.skuUuid;\n      tmp_po_array.inboundDate = data.inboundDate || \"\";\n      tmp_po_array.expiryDate = data.expiryDate || \"\";\n\n      tmp_po_array.qty = data.qty || \"\";\n      tmp_po_array.ripeness = data.ripenessLevel || 0;\n      tmp_po_array.outboundTypeCode = data.outboundTypeCode || \"\";\n      tmp_po_array.outboundReason = data.outboundReason || \"\";\n      tmp_po_array.inboundTypeCode = data.inboundTypeCode || \"\";\n      tmp_po.poList.push(tmp_po_array);\n    });\n    po_array.push(tmp_po);\n  });\n  //\n  //\n\n  //merapikan po_array\n  let po_array_fix = [];\n  po_array.forEach((data, index) => {\n    let tmp = {};\n    let po_code = [];\n    let po_list = [];\n    data.poList.map((data_po, index_po) => {\n      if (!po_code.includes(data_po.wmsPoSkuCode)) {\n        po_code.push(data_po.wmsPoSkuCode);\n        let tmp_po_array = {};\n        tmp_po_array.wmsPoSkuCode = data_po.wmsPoSkuCode;\n        tmp_po_array.supplierId = data_po.supplierUuid;\n        tmp_po_array.supplierName = data_po.supplierName;\n        tmp_po_array.codeGrade = data_po.codeGrade;\n        tmp_po_array.ripenessLevel = data_po.ripeness;\n\n        //date\n        tmp_po_array.inboundDate = data_po.inboundDate;\n        tmp_po_array.expiryDate =\n          moment(data_po.expiryDate, \"DD-MM-YYYY\").toDate().getTime() || \"\";\n\n        tmp_po_array.itemList = [];\n        po_list.push(tmp_po_array);\n      }\n\n      let index_po_code = po_code.indexOf(data_po.wmsPoSkuCode);\n      let tmp_itemlist = {};\n      tmp_itemlist.grade = { label: data_po.grade, value: data_po.grade };\n      tmp_itemlist.ripeness = {\n        label: data_po.ripeness,\n        value: data_po.ripeness,\n      };\n      tmp_itemlist.codeOutbound = {\n        label: data_po.outboundTypeCode,\n        value: data_po.outboundTypeCode,\n      };\n      tmp_itemlist.codeInbound = {\n        label: data_po.inboundTypeCode,\n        value: data_po.inboundTypeCode,\n      };\n      tmp_itemlist.qty = parseFloat(data_po.qty) || 0;\n      tmp_itemlist.pack = parseFloat(data_po.pack) || 0;\n      tmp_itemlist.reason = data_po.outboundReason;\n      po_list[index_po_code].itemList.push(tmp_itemlist);\n    });\n    tmp.skuUuid = data.skuUuid;\n    tmp.skuNumber = data.skuNumber;\n    tmp.unitOfMeassures = data.unitOfMeassures;\n    tmp.photo = data.photo;\n    tmp.poList = po_list;\n    po_array_fix.push(tmp);\n  });\n\n  //final\n  jobHeader[0].jobPost.list = po_array_fix;\n  // let ret = await submitMovementCsv({ dataCsv: jobHeader, dispatch });\n  let ret = await submitCsv({\n    dataCsv: jobHeader,\n    setSubmitStatus,\n    dispatch,\n    transaction: \"movement\",\n  });\n  setIsShowModal(false);\n  setIsSubmitText(\"Submit\");\n\n  // setActionButtonTitle('Done');\n  // setCancelButtonTitle('');\n  // setMsg1(fileName + ' upload successfull.');\n  // setMsg2('Would you import another file?');\n  // setTitle('Success');\n  // setActionButtonClass('bg-green background ml-0');\n  // setColourTitle('green');\n  // setModalShow(true);\n};\n","import React, { useEffect, useState } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport FileUploader from \"Component/FileUploader\";\nimport { TableEditable } from \"Component/BootstrapTable\";\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\nimport \"../index.scss\";\nimport {\n  showErrorsOnly,\n  deleteErrorsField,\n  setCsvData,\n  submit,\n  checking_error\n} from \"./services.js\";\nimport PopUp from \"Component/Modal/PopUp\";\n\nconst Upload = (props) => {\n  const dispatch = useDispatch();\n\n  //selector\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const selectorCsvData = useSelector((state) => state.csvData);\n  const selectorCsvField = useSelector((state) => state.csvField);\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\n  const selectorOutboundType = useSelector((state) => state.outboundTypeCsv);\n  const selectorStatus = useSelector((state) => state.status);\n  const [submitStatus, setSubmitStatus] = React.useState(false);\n\n  //state\n  const [isShowModal, setIsShowModal] = React.useState(false);\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\n  const [isValidate, setIsValidate] = React.useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\n  \n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\n\n  useEffect(() => {\n    checking_error({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      setIsValidate,\n      setCheckingCsv\n    });\n  }, [checkingCsv]);\n\n  useEffect(() => {\n    if (submitStatus === true) {\n      props.history.push(\"/inventory-entry/movement/CSV-upload/result\");\n    }\n  }, [submitStatus]);\n\n  if (selectorCsvData === undefined || selectorCsvData === null) {\n    props.history.push(\"/inventory-entry/movement/CSV-upload\");\n    return 0;\n  }\n\n  const setCsvDataTmp = (param) => {\n    setCsvData({ param, dispatch, setCheckingCsv });\n    showErrorsOnly({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      isShowErrorOnly: false,\n      setIsShowErrorOnly,\n      setIsHiddenRows,\n      setCheckingCsv\n    })\n  };\n\n  return (\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\n      <TableEditable\n        globalData={selectorCsvData} //Required\n        columns={selectorCsvField} //Required\n        tableClass=\"reviewTable\"\n        hiddenRows={isHiddenRows}\n        warehouseArea={selectorWarehouseArea}\n        outboundType={selectorOutboundType}\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\n        setIsValidate={(param) => setIsValidate(param)}\n        dispatch={dispatch}\n        setCheckingCsv={setCheckingCsv}\n      />\n\n      <div className=\"row pt-3\">\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-3 mr-3 text no-shadow\"\n            style={{ backgroundColor: \"#fff\" }}\n            onClick={() =>\n              showErrorsOnly({\n                csvData: selectorCsvData,\n                csvField: selectorCsvField,\n                isShowErrorOnly,\n                setIsShowErrorOnly,\n                setIsHiddenRows,\n                setCheckingCsv\n              })\n            }\n          >\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn px-3 mr-3  text no-shadow\"\n            style={{ backgroundColor: \"#fff\" }}\n            onClick={() =>\n              deleteErrorsField({\n                csvData: selectorCsvData,\n                csvField: selectorCsvField,\n                dispatch,\n                setCheckingCsv\n              })\n            }\n          >\n            Delete Errors Field\n          </button>\n        </div>\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\n          Review your imported file: {selectorCsvFileName} (\n          {selectorCsvData.length || 0} Lines)\n        </div>\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\n            onClick={() => props.history.goBack()}\n          >\n            Discard\n          </button>\n\n          <button\n            type=\"button\"\n            class={\n              \"btn px-5 mr-3 text-white no-shadow float-right \"\n              + (isValidate === true && selectorCsvData?.length > 0 ? \"bg-green\" : \"bg-primaryGrey disabled\")\n            }\n            onClick={() => setIsShowModal(!isShowModal)}\n\n          >\n            Submit\n          </button>\n        </div>\n      </div>\n\n      <PopUp\n        status={selectorStatus}\n        onCloseFunction={() => {\n          setModalShow(false);\n          setSubmitStatus(false)\n        }}\n        statusDisplay={modalShow}\n        title={null}\n        cancelButtonTitle={null}\n        actionButtonTitle={null}\n        colorText={null}\n        refreshOnCancel={false}\n        msg1={null}\n        msg2={null}\n        cancelButtonClass={null}\n        actionButtonClass={null + \" ml-0\"}\n        actionButtonEvent={() => props.history.push(\"/stockentry/movement/CSV-upload\")}\n      />\n      <ModalsCaptcha\n        submit={() =>\n          submit({\n            dispatch,\n            csvData: selectorCsvData,\n            csvField: selectorCsvField,\n            setIsShowModal,\n            setIsSubmitText,\n            setSubmitStatus\n          })\n        }\n        submitText={isSubmitText}\n        show={isShowModal}\n        setIsShowModal={setIsShowModal}\n      />\n    </div>\n  );\n};\n\nexport default withRouter(Upload);\n","import { isInteger } from \"formik\";\n\nexport const next = ({\n  e,\n  state,\n  isCaptcha,\n  setIsValidated,\n  setIsType,\n  isType,\n  isValidated,\n  submit\n}) => {\n  const key = e.key; // const {key} = event; ES6+\n  let type = [...isType];\n\n  //if press enter\n  if (key === \"Enter\"){\n    if(isValidated){\n      submit();\n    }else{\n      return;\n    }\n  }\n\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\",\"Delete\"];\n  if (arr_tmp.includes(key)) {\n    return 0;\n  } else if (key === \"Backspace\") {\n    let type_ = [...isType];\n    let state_ = type_[state];\n    if (state_ == \"\" && state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\n      type_[state - 1] = \"\";\n      type[state - 1] = \"\";\n    } \n  } else if (key === \"ArrowLeft\") {\n    if (state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) - 1))\n        .setSelectionRange(-1, -1);\n\n      return 0;\n    }\n  } else if (key === \"ArrowRight\") {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) + 1))\n        .setSelectionRange(-1, -1);\n      return 0;\n    }\n  } else {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n    }\n  }\n\n  if (key === \"Backspace\") {\n    type[state] = \"\";\n  } else {\n    type[state] = key.toUpperCase();\n  }\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\n  let allowedChar = char.split(\"\");\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\n    setIsType(type);\n  } else {\n    return 0;\n  }\n\n  let stat = true;\n  isCaptcha.map((data, index) => {\n    // if (index == 0) {\n    //   return;\n    // }\n    if (!(type[index + 1] == isCaptcha[index])) {\n      stat = false;\n    } \n  });\n  setIsValidated(stat);\n};\n\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\n  if (module?.length) {\n    let newModule = [];\n    module.map((list) => {\n      list.poList.map((po) => {\n        po.itemList.map((item) => {\n          const { qty, grade } = item;\n          const _qty = isInteger(qty)\n            ? parseInt(qty)\n            : !qty\n              ? 0\n              : parseFloat(qty);\n          const _sku = noSkuChecking\n            ? list.skuName\n            : moduleName === \"waste\"\n              ? item.wasteType?.label\n                ? item.wasteType?.label\n                : list.skuName\n              : grade?.label;\n          const _toWaste =\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\" ||\n                item.wasteType?.label === \"Waste\"\n                ? true\n                : false\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\n                ? true\n                : false;\n          const _uom = noSkuChecking\n            ? list.unitOfMeassures\n            : grade?.uom === \"gram\"\n              ? \"kg\"\n              : grade?.uom;\n          let newSku = {\n            sku: _sku,\n            qty: _qty,\n            uom: _uom,\n            wqty: 0,\n            swqty: 0,\n          };\n          if (_toWaste) {\n            newSku.qty = 0;\n            newSku.sku = list.skuName;\n          }\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Waste\"\n              : grade?.label === \"Waste\"\n          )\n            newSku.wqty = _qty;\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\"\n              : grade?.label === \"Semi Waste\"\n          )\n            newSku.swqty = _qty;\n          const isExist = newModule.findIndex(\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\n          );\n\n          if (moduleName !== \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (grade?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\n            }\n          }\n\n          if (moduleName === \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (item.wasteType?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (item.wasteType?.label === \"Waste\")\n                newModule[isExist].wqty += _qty;\n            }\n          }\n        });\n      });\n    });\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\n    const i = newModule.findIndex((s) => s.sku === skuName);\n    newModule.forEach((sku) => {\n      if (i !== -1) {\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\n      }\n    });\n    return newModule;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { useSelector } from \"react-redux\";\nimport { next, skuListUpdateCheck } from \"./services.js\";\nimport { totalQty } from \"Page/StockEntry/GeneralServices/moduleServices\";\n\nconst ModalsConfirmation = ({\n  moduleEntry,\n  confirmation,\n  setConfirmation,\n  save,\n  submit,\n  isSuccess,\n  isLoading,\n  moveAll,\n  setAction,\n  moduleName,\n  noSkuChecking,\n  singleViewData,\n}) => {\n  const dimention = document.documentElement.clientHeight;\n  const height = dimention - 300;\n\n  let buttonName = \"Submit\";\n\n  if (confirmation.name === \"save\") buttonName = \"Save\";\n  useEffect(() => {\n    if (isSuccess) setConfirmation({ show: false, name: null });\n  }, [isSuccess]);\n  window.onkeydown = (e) =>\n    e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null;\n\n  useEffect(() => {\n    setAction(confirmation.name);\n  }, [confirmation]);\n\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry;\n\n  const areaDestinationName = module?.jobPost?.areaDestinationName;\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName;\n  const areaName = module?.jobPost?.areaName;\n\n  const skuListUpdate = skuListUpdateCheck(\n    module?.jobPost.list,\n    noSkuChecking,\n    moduleName\n  );\n  return (\n    <CRow\n      className={\"modalConfirmation \" + (confirmation.show ? null : \"d-none\")}\n    >\n      <CCol>\n        <CModal show={confirmation.show} closeOnBackdrop={false}>\n          <CModalHeader className=\"px-4 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">\n              Confirmation{\" \"}\n              <span>\n                <i className=\"em em-pray\"></i>\n              </span>\n            </CModalTitle>\n            <label\n              tabIndex=\"0\"\n              onKeyDown={(e) =>\n                e.keyCode === 13\n                  ? setConfirmation({ show: false, name: null })\n                  : false\n              }\n              onClick={() => setConfirmation({ show: false, name: null })}\n              className=\"sku-item iconU-modalClose\"\n            />\n          </CModalHeader>\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\n            <p className=\"text mb-2\">\n              <span>{`Are you sure want to ${\n                areaName == \"Waste\" ? \"update\" : \"send\"\n              } this Item `}</span>\n              <span\n                className={` ${areaDestinationName ? null : \"d-none\"}`}\n              >{` from`}</span>\n              <span\n                className={`green ${areaDestinationName ? null : \"d-none\"}`}\n              >{` ${areaName} `}</span>\n              <span>\n                {moduleName == \"outbound\"\n                  ? \"from\"\n                  : moduleName === \"repack\"\n                  ? \"\"\n                  : \"to\"}{\" \"}\n              </span>\n              <span\n                className={`green ${moduleName !== \"repack\" ? null : \"d-none\"}`}\n              >{` ${\n                moduleName === \"stockTransfer\"\n                  ? warehouseDestinationName\n                  : areaDestinationName\n                  ? areaDestinationName\n                  : areaName\n              } `}</span>\n            </p>\n            <p className=\"text\">\n              Please double check this list, this record will store to database.\n            </p>\n            <div\n              style={{\n                minHeight: height,\n                maxHeight: height,\n                overflow: \"auto\",\n                border: \"1px solid var(--lineGrey)\",\n              }}\n            >\n              <table>\n                <thead>\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Weight\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Semi Waste\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Waste\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {skuListUpdate?.map((data) => (\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                      <td style={{ maxWidth: \"160px\" }}>{data.sku}</td>\n                      <td\n                        className=\"text-right py-3\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        {`${totalQty(data?.qty)}`}\n                      </td>\n                      <td\n                        className=\"text-right text-nowrap\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        <span className=\"text-nowrap\">{`${totalQty(\n                          data?.swqty\n                        )} `}</span>\n                      </td>\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\n                        {`${totalQty(data?.wqty)}`}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? setConfirmation({ show: false, name: null })\n                    : false\n                }\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\n                onClick={() => setConfirmation({ show: false, name: null })}\n              >\n                Cancel\n              </CButton>\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? isLoading\n                      ? null\n                      : confirmation.name === \"save\"\n                      ? save()\n                      : submit()\n                    : false\n                }\n                className={`${\n                  isLoading ? \"bg-softGreen text\" : \"bg-green text-white\"\n                } no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\n                onClick={() =>\n                  isLoading\n                    ? null\n                    : confirmation.name === \"save\"\n                    ? save()\n                    : submit()\n                }\n              >\n                {isLoading ? \"Processing...\" : buttonName}\n              </CButton>{\" \"}\n            </div>\n          </CModalBody>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst ModalsCaptcha = ({\n  show = false,\n  setIsShowModal,\n  submit,\n  submitText = \"Submit\",\n}) => {\n  //random text\n  var text = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var charactersLength = characters.length;\n  var text_split = [];\n  for (var i = 0; i < 3; i++) {\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\n    text += r;\n    text_split.push(r);\n  }\n\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\n  const [isValidated, setIsValidated] = React.useState(false);\n  const [isType, setIsType] = React.useState([]);\n\n  //reset if visible = false\n  useEffect(() => {\n    if (show === true) {\n      document.getElementById(\"t1\").value = \"\";\n      document.getElementById(\"t2\").value = \"\";\n      document.getElementById(\"t3\").value = \"\";\n    }\n  }, [show]);\n\n  return (\n    <CRow className={show ? null : \"d-none\"}>\n      <CCol>\n        <CModal\n          show={show}\n          onClose={() => {\n            setIsShowModal(false);\n          }}\n          size=\"lg\"\n          style={{ height: \"400px\" }}\n        >\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\n              {selectorCsvFileName}?\n            </p>\n            <p className=\"text\">\n              Once uploaded this record will store to databases.\n            </p>\n            <p className=\"text mb-2\">\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\n            </p>\n\n            <div className=\"captcha-box\">\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 1,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t1\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[0]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 2,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t2\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input ml-0 mr-0\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[1]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 3,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t3\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[2]}\n              />\n            </div>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            <CButton\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\n              onClick={() => {\n                setIsShowModal(false);\n              }}\n            >\n              Cancel\n            </CButton>\n            <CButton\n              className={\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\n              }\n              onClick={() => {\n                submit();\n                setIsValidated(false);\n              }}\n            >\n              {submitText}\n            </CButton>{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport { ModalsConfirmation, ModalsCaptcha };\n","import React from \"react\";\nimport { CCard } from \"@coreui/react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"./bootstrapTable-style.scss\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport axios from \"axios\";\n\n//cell editable\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\n\nclass TableEditable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validateStatus: false,\n      validateResult: \"Please Wait...\",\n      globalData: this.props.globalData,\n      rowCount: 0,\n      keyy: 0,\n      triggerRender: 0\n    };  \n    this.validatePOSKUStockTransfer = this.validatePOSKUStockTransfer.bind(this);\n    this.validateSKUNumber = this.validateSKUNumber.bind(this);\n    \n  } \n  changeOutboundReason = (row) => {\n    setTimeout(() => {\n      let elem = document.getElementById(`row${row}-outboundReason`);\n      elem.classList.add(\"red\", \"tooltip-custom\");\n      elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\n    }, 300);\n  }\n\n  changeWarehouseUuid = (\n    value,\n    column,\n    columnName,\n    row,\n    warehouseCodeList,\n    warehouseUuidList,\n    warehouseNameList\n  ) => {\n    const { setCsvDataTmp, globalData } = this.props;\n    let tmpdata = globalData;\n    var index = tmpdata.findIndex((obj) => obj.id == row);\n    let i = warehouseCodeList.indexOf(value);\n    tmpdata[index][column] = warehouseUuidList[i];\n    tmpdata[index][columnName] = warehouseNameList[i];\n\n    console.clear() \n    setTimeout(async () => {\n      setCsvDataTmp(tmpdata);\n    }, 400);\n  };\n\n  validatePOSKU = async (id, row, idColumn) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;\n    if(transaction==\"additional_inbound\"){\n      return;\n    }\n\n    let tmpdata = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/stocktake/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        elem.classList.add(\"red\");\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          var index = tmpdata.findIndex((obj) => obj.id == row);\n          if (data[0] && data[0].isExist === true) {\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\n            tmpdata[index].wmsPoSkuCodeStatus = true;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = data[0].expiryDate;\n            tmpdata[index].inboundDate = data[0].inboundDate;\n            tmpdata[index].supplierName = data[0].supplierName;\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\n            tmpdata[index].uom = data[0].uom;\n            tmpdata[index].photos = data[0].photos;\n            elem.classList.remove(\"red\");\n            elem.classList.add(\"hiddenTooltip\");\n          } else {\n            tmpdata[index].wmsPoSkuCodeStatus = false;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = \"\";\n            tmpdata[index].inboundDate = \"\";\n            tmpdata[index].supplierName = \"\";\n            tmpdata[index].supplierUuid = \"\";\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\n          }\n          setCsvDataTmp(tmpdata);\n        });\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validatePOSKUStockTransfer = async (newValue, row, idColumn, key) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;  \n    let tmpdata = globalData;\n    \n    var index = tmpdata.findIndex((obj) => obj.id == row.id); \n    // console.log(tmpdata)\n    // console.log(row.id, row)\n    // console.log(index)\n\n    try {\n      const url = \"/stocktransfer/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      let payloadPO = [{\n        \"id\": row.id,\n        \"poSkuCode\": key==\"wmsPoSkuCode\" ? newValue : (row.poSkuCode?row.poSkuCode:\"\"),\n        \"skuNumber\": key==\"skuNumber\"? newValue?.skuNumber: row.skuNumber,\n        \"skuUuid\": key==\"skuNumber\"? newValue?.skuUuid:row.skuUuid,\n        \"warehouseSource\": row.warehouseSource,\n        \"areaSource\": row.areaSource,\n        \"weight\": key==\"qty\"?newValue:row.qty\n      }]; \n\n      setTimeout(async () => {\n        //setvalidate false\n        setIsValidate(false);\n\n        //elemen column\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        // elem.classList.remove(\"hiddenTooltip\");\n        // elem.classList.add(\"red\");  \n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: payloadPO },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          if (data[0]) {\n            if(data[0].isExist === true && data[0].isValid === true){\n              tmpdata[index]['rowStatus'] = true;\n              tmpdata[index]['rowReason'] = \"\";\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }else{\n              tmpdata[index]['rowStatus'] = false;\n              tmpdata[index]['rowReason'] = data[0]?.errorMessage;\n            }\n            tmpdata[index]['wmsPoSkuCode'] = data[0]?.wmsPoSkuCode ;\n            tmpdata[index]['wmsPoSkuCodeStatus'] = data[0]?.isExist && data[0]?.isValid;\n            tmpdata[index]['wmsPoSkuCodeReason'] = data[0]?.errorMessage;\n            tmpdata[index]['expiryDate'] = data[0]?.expiryDate;\n            tmpdata[index]['inboundDate'] = data[0]?.inboundDate;\n            tmpdata[index]['supplierName'] = data[0]?.supplierName;\n            tmpdata[index]['supplierUuid'] = data[0]?.supplierUuid;\n            tmpdata[index]['uom'] = data[0]?.uom;\n            tmpdata[index]['photos'] = data[0]?.photos;\n          } else {\n            tmpdata[index]['wmsPoSkuCodeStatus'] = false;\n            tmpdata[index]['wmsPoSkuCodeReason'] = response?.data?.message;\n            tmpdata[index]['expiryDate'] = \"\";\n            tmpdata[index]['inboundDate'] = \"\";\n            tmpdata[index]['supplierName'] = \"\";\n            tmpdata[index]['supplierUuid'] = \"\";\n            tmpdata[index]['rowStatus'] = false;\n            tmpdata[index]['rowReason'] = response?.data?.message;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = response?.data?.message;\n          } \n\n          if(key==\"skuNumber\"){ \n            tmpdata[index][\"skuNumber\"] = newValue.skuNumber;\n            tmpdata[index][\"skuNumberReason\"] = newValue.skuDescription;\n            tmpdata[index][\"skuNumberStatus\"] = true;\n            tmpdata[index][\"skuUuid\"] = newValue.skuUuid;\n          }\n          setCsvDataTmp(tmpdata); \n        }); \n        let tmpKey = this.state.keyy + 1; \n        this.setState({keyy: tmpKey}); \n      }, 500);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validateOutbountReason = (value, row, idColumn) => {\n    const { globalData } = this.props;\n    let tmp_data = globalData;\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\n      this.changeOutboundReason(row)\n    }\n  };\n\n  validateOutbountType = (value, row, idColumn) => {\n    const { globalData, setIsValidate } = this.props;\n    let tmp_data = globalData;\n    setIsValidate(false);\n    if (value.toUpperCase() !== \"LAINNYA\") {\n      setIsValidate(true);\n      return 0;\n    }\n\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (datax[\"outboundReason\"] == \"\") {\n      this.changeOutboundReason(row);\n    }\n  };\n\n  validateSKUNumber = async (id, row, idColumn, key, rowData = null) => {\n    const { globalData, setCsvDataTmp, setIsValidate,transaction } = this.props;\n    let tmp_data = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/oss/skuByNumbers\";\n      let elem = null;\n      let elemspan = null;\n      \n      // for validating stock transfer\n      let stats = false;\n      let newSkuData = {} \n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { skuList: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          let isSuccess = response.data.isSuccess;\n          var index = tmp_data.findIndex((obj) => obj.id == row);\n          if (isSuccess === true && data.length > 0) {\n            stats = true;\n            tmp_data[index][key] = data[0].skuNumber;\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\n            tmp_data[index][key + \"Status\"] = true;\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\n            newSkuData = {\n              skuUuid: data[0].id,\n              skuNumber: data[0].skuNumber,\n              skuDescription: data[0].skuDescription,\n              photo: data[0].photo\n            }\n\n            //custom\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = data[0].id;\n              tmp_data[index].photo = data[0].imageMd;\n            }\n\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = data[0].uom;\n            }\n            \n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = data[0].uom;\n            }\n\n            \n            if(transaction!==\"stockTransfer\"){\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }\n\n          } else {\n            stats = false;\n            tmp_data[index][key] = id;\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\n            tmp_data[index][key + \"Status\"] = false;\n            tmp_data[index][key + \"Uuid\"] = null;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"SKU Number Not Found\";\n\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = \"\";\n              tmp_data[index].photo = \"\";\n            }\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = null;\n            }\n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = \"\";\n            }\n          } \n        });\n\n        if(transaction==\"stockTransfer\" && stats === true){ \n          this.validatePOSKUStockTransfer(newSkuData, rowData, idColumn, 'skuNumber')\n        }else{\n          setCsvDataTmp(tmp_data);\n        }\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  render() {\n    const {\n      columns,\n      hiddenRows,\n      tableClass,\n      warehouseArea,\n      outboundType,\n      setCheckingCsv, \n      editable = true,\n      warehousesData = [],\n      transaction,\n      globalData\n    } = this.props;\n    let { validateStatus,  keyy } = this.state;\n    \n    //wh\n    let warehouseCodeList = [];\n    let warehouseUuidList = [];\n    let warehouseNameList = [];\n    if (warehousesData) {\n      let tmp = warehousesData?.data?.map((d) => {\n        warehouseCodeList.push(d.code);\n        warehouseUuidList.push(d.id);\n        warehouseNameList.push(d.name);\n      });\n    }\n\n    //wh area\n    let wh_area_label =\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\n    let wh_outboundtype_label = !outboundType\n      ? []\n      : outboundType.map((data) => data.label.toUpperCase());\n    let wh_outboundtype_value = !outboundType\n      ? []\n      : outboundType.map((data) => data.value);\n    const newFormat = columns.map((data, index) => {\n      data.validator = (newValue, row, column, done) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let reason = null;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n\n        let stockTransferColumnCheck = ['wmsPoSkuCode', 'qty']\n        if (stockTransferColumnCheck.includes(key) && transaction==\"stockTransfer\") {\n          this.validatePOSKUStockTransfer(newValue, row, idColumn, key);\n          stat = true;\n        }else if(key == \"wmsPoSkuCode\" ){\n          this.validatePOSKU(newValue, row.id, idColumn, key);\n          stat = true; \n        }\n\n        if (key == \"skuNumber\") {\n          this.validateSKUNumber(newValue, row.id, idColumn, key, row);\n          stat = true;\n        }\n\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type not found\";\n            checkType = false;\n            stat = false;\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        } else if (key == \"newGrade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            //if not waste or semi waste\n            if (parseInt(newValue)) {\n              //if number\n              stat = true;\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\n            } else if (newValue == \"\") {\n              row[\"newGradeUuid\"] = null;\n              row[\"newGradeUom\"] = null;\n              stat = true;\n            } else {\n              //if not number => undefined\n              reason = \"Grade Undefined\";\n              checkType = false;\n              stat = false;\n            }\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        }\n\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Outbound Type Not Found`;\n          } else {\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\n            stat = true;\n            this.validateOutbountType(newValue, row.id, idColumn);\n          }\n        }\n\n        if (key == \"outboundReason\") {\n          this.validateOutbountReason(newValue, row.id, idColumn);\n        }\n\n        if (key == \"warehouse\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseUuid\",\n              \"warehouseName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          }\n        }\n        if (key == \"warehouseDestination\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseDestinationUuid\",\n              \"warehouseDestinationName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          } \n        }\n\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Warehouse Area Not Found`;\n          } else {\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\n            if (key == \"areaNameDestination\") {\n              row[\"areaDestination\"] = wh_area_value[i];\n            } else {\n              row[\"areaSource\"] = wh_area_value[i];\n            }\n            stat = true;\n          }\n        }\n\n        if (key == \"newPack\") {\n          let checkTypenewPack = isNaN(newValue) ? false : true;\n          if (!checkTypenewPack) {\n            stat = false;\n            reason = `Pack Should be a number`;\n          } else {\n            stat = true;\n          }\n        } \n        \n\n        let checkType = null;\n        if (data.type == \"number\") {\n          checkType = isNaN(newValue) ? false : true;\n        } else {\n          checkType = true;\n        }\n        if (checkType === false) {\n          reason = `${data.text} Should be a ${data.type}`;\n        } \n\n        \n        if (key == \"wmsPoSkuCode\" && transaction == \"stockTransfer\") {\n          if(isNaN(newValue)){\n            checkType = false;\n            reason = `${data.text} Should be a number`;\n            stat = false;\n          } \n        } \n\n        //some field can null\n        let canNull = [\n          \"grade\",\n          \"outboundReason\",\n          \"ripenessLevel\",\n          \"newRipeness\",\n          \"reason\",\n          \"expiryDate\"\n        ]; \n\n        if (canNull.includes(key) && newValue === \"\") {\n          reason = \"\";\n          checkType = true;\n          stat = true;\n        } else if (key == \"grade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type Not Found\";\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //check ripenesslevel\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\n          let allowedRipenessLevel = [0, 1, 2, 3];\n          if (\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\n            newValue == \"\"\n          ) {\n            checkType = true;\n            stat = true;\n            reason = \"\";\n            if (newValue == \"\") {\n              newValue = \"\";\n            }\n          } else {\n            checkType = false;\n            stat = false;\n            reason = \"Undefined Ripeness Level\";\n          }\n        }\n\n        //check date\n        if (data.type == \"date_indo\") {\n          //checking date\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\n          if (newValue.match(regex_date)) {\n            checkType = true;\n            stat = true;\n          } else if (newValue == \"\") {\n            checkType = true;\n            stat = true;\n          } else {\n            reason = `Date format must be 'dd-mm-yyyy'`;\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //set notif\n        row[keyReason] = reason;\n        if (stat && checkType) {\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\n          if (!specialKey.includes(key)) {\n            //some key have their own checking, so if not in array do checking error\n            row[keyStatus] = true;\n            setCheckingCsv();\n          }\n        } \n         \n        return {\n          valid: stat && checkType ? true : false,\n          message: reason,\n        };\n      };\n\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n        let txt = row[keyReason];\n        \n        // if status column = false\n        // that mean there's error or not valid data in some column\n        if (row[keyStatus] === false) {\n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {txt}\n              </span>\n            </div>\n          );\n        }\n\n        // if global row status = false\n        // that mean there's wmsposkucode validation error, and makes 1 line become red colour\n        // for now is only for stock transfer  \n        if ( transaction==\"stockTransfer\" &&  row['rowStatus'] === false) { \n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {row['rowReason']}\n              </span>\n            </div>\n          );\n        }\n\n        \n        // if status column = true\n        // No problem \n        return (\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\n            {cell}\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\n              {txt}\n            </span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n    console.clear();  \n    console.log(globalData)\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={globalData}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          cellEdit={\n            editable === true\n              ? cellEditFactory({\n                  mode: \"click\",\n                  blurToSave: true,\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\n                })\n              : null\n          }\n          bordered={false}\n          hiddenRows={hiddenRows}\n          key={keyy}\n        />\n      </CCard>\n    );\n  }\n}\n\nclass TableResult extends React.Component {\n  render() {\n    const { columns, tableClass, data } = this.props;\n\n    const newFormat = columns.map((data, index) => {\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\n          return (\n            <div className=\"tooltip-custom red\">\n              {cell}\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\n            </div>\n          );\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\n          return (\n            <div className=\"green\">\n              {cell}\n              <span></span>\n            </div>\n          );\n        }\n\n        return (\n          <div>\n            {cell}\n            <span></span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={data}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          bordered={false}\n        />\n      </CCard>\n    );\n  }\n}\n\nexport { TableResult, TableEditable };\n"],"sourceRoot":""}