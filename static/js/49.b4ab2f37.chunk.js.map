{"version":3,"sources":["Page/StockEntry/Repacking/UploadTargetRepack/services.js","Page/StockEntry/Repacking/UploadTargetRepack/Review.jsx","Component/Modal/PopUp/index.jsx","Component/Modal/PopUp/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/BootstrapTable/index.jsx"],"names":["showErrorsOnly","_ref","csvData","csvField","isShowErrorOnly","setIsShowErrorOnly","setIsHiddenRows","setCheckingCsv","tmp_arr_false","tmp_arr_true","map","data","index","stat","i","dataColumn","indexColumn","key","dataField","includes","push","ret","filter","x","length","withRouter","props","dispatch","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","selectorStatus","status","warehousesData","warehouseData","isShowModal","setIsShowModal","React","useState","isHiddenRows","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","submitStatus","setSubmitStatus","title","setTitle","msg1","setMsg1","msg2","setMsg2","cancelButtonTitle","setCancelButtonTitle","actionButtonTitle","setActionButtonTitle","isSubmitText","setIsSubmitText","actionButtonClass","setActionButtonClass","colourTitle","setColourTitle","newCsvData","setNewCsvData","rowDouble","setRowDouble","console","log","useEffect","_ref4","undefined","stats","indexField","toUpperCase","checking_error","_ref6","skuNumberArray","skuData","csvDataValidated","idx","skuNumber","objName","dataArraySku","pushData","d","deliveryDate","slot","warehouse","id","warehouseStatus","deliveryDateStatus","slotStatus","skuNumberStatus","warehouseReason","deliveryDateReason","slotReason","skuNumberReason","tmp","validasiDouble","history","setCsvDataTmp","param","_ref3","type","STOK_TAKE_UPLOAD_JSON","setCsvData","createElement","className","TableEditable","globalData","columns","tableClass","hiddenRows","warehouseArea","dataDoubleRow","style","backgroundColor","onClick","_ref2","new_arr","deleteErrorsField","lineHeight","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","cancelButtonClass","actionButtonEvent","ModalsCaptcha","submit","async","_ref5","params","warehouseUuid","skuUuid","skuName","skuDescription","targetDate","moment","format","targetUos","parseFloat","uos","targetUom","parseInt","uom","execute","submitCsvTargetRepack","isSuccess","message","submitText","show","refresh","icon","setIsSuccess","code","setShow","window","onkeydown","e","keyCode","CRow","concat","CCol","CModal","closeOnBackdrop","onClose","success","name","STATUS","size","minHeight","bodyOpenClassName","CModalHeader","CModalTitle","CModalBody","CModalFooter","CButton","location","reload","refreshPage","parentOncCloseFunction","next","isCaptcha","setIsValidated","setIsType","isType","isValidated","type_","document","getElementById","focus","value","setSelectionRange","split","ModalsConfirmation","_module$jobPost","_module$jobPost2","_module$jobPost3","moduleEntry","confirmation","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","module","areaDestinationName","jobPost","warehouseDestinationName","areaName","skuListUpdate","skuListUpdateCheck","newModule","list","poList","po","itemList","item","_item$wasteType","_item$wasteType2","_item$wasteType3","_item$wasteType4","_item$wasteType5","_item$wasteType6","qty","grade","_qty","isInteger","_sku","wasteType","label","_toWaste","_uom","unitOfMeassures","newSku","sku","wqty","swqty","isExist","findIndex","_item$wasteType7","_item$wasteType8","s","forEach","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","text","characters","charactersLength","text_split","r","charAt","Math","floor","random","setIsCaptcha","isCaptchaText","setIsCaptchaText","autocomplete","onKeyUp","textTransform","maxLength","placeholder","Component","constructor","_this","super","this","changeOutboundReason","row","setTimeout","elem","classList","add","innerHTML","changeWarehouseUuid","column","columnName","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","obj","indexOf","clear","validatePOSKU","idColumn","transaction","url","elemspan","axios","method","then","response","_response$data","wmsPoSkuCode","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","expiryDate","inboundDate","supplierName","supplierUuid","photos","remove","error","validatePOSKUStockTransfer","newValue","payloadPO","poSkuCode","warehouseSource","areaSource","_response$data2","_data$2","_data$3","_data$4","_data$5","_data$6","_data$7","_data$8","_data$9","_data$10","_data$11","_data$","isValid","errorMessage","_response$data3","_response$data4","_response$data5","tmpKey","keyy","setState","validateOutbountReason","tmp_data","datax","validateOutbountType","validateSKUNumber","rowData","arguments","newSkuData","skuList","_response$data6","photo","imageMd","newGradeUom","validateStatus","validateResult","rowCount","triggerRender","bind","render","outboundType","editable","_warehousesData$data","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","done","keyStatus","keyReason","reason","arr_grade","checkType","isNaN","regex_date","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","CCard","BootstrapTable","keyField","sort","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","bordered","TableResult"],"mappings":"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","file":"static/js/49.b4ab2f37.chunk.js","sourcesContent":["//other\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\nimport { submitCsvTargetRepack } from \"apiServices\";\nimport moment from \"moment\";\n\nexport const showErrorsOnly = ({\n  csvData,\n  csvField,\n  isShowErrorOnly,\n  setIsShowErrorOnly,\n  setIsHiddenRows,\n  setCheckingCsv,\n}) => {\n  // ;\n  let tmp_arr_false = [];\n  let tmp_arr_true = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    let i = index + 1;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n\n    if (stat === false) {\n      if (!tmp_arr_false.includes(i)) {\n        tmp_arr_false.push(i);\n      }\n    } else {\n      if (!tmp_arr_true.includes(i)) {\n        tmp_arr_true.push(i);\n      }\n    }\n  });\n\n  //return array\n  let ret = [];\n  if (isShowErrorOnly === true) {\n    //true = delete all row\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\n    if (ret.length == csvData.length) {\n      return 0;\n    }\n  } else {\n    ret = [];\n  }\n  setIsHiddenRows(ret);\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\n  setCheckingCsv(true);\n};\n\nexport const deleteErrorsField = ({\n  csvData,\n  csvField,\n  dispatch,\n  setCheckingCsv,\n}) => {\n  let new_arr = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n    if (stat === true) {\n      new_arr.push(data);\n    }\n  });\n\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\n  setCheckingCsv(true);\n};\n\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\n  setCheckingCsv(true);\n};\n\nexport const checking_error = ({\n  csvData,\n  csvField,\n  setIsValidate,\n  setCheckingCsv,\n}) => {\n  if (csvData === undefined) {\n    return 0;\n  }\n\n  let stats = true;\n  csvData.map((data, index) => {\n    csvField.map((dataField, indexField) => {\n      // console.log(data[dataField + 'status']);\n      let status = data[dataField.dataField + \"Status\"];\n\n      //jika outbound type = lainya, maka harus isi outbound reason\n      if (dataField.dataField == \"outboundType\") {\n        let type = data[dataField.dataField].toUpperCase();\n        if (type == \"LAINNYA\") {\n          if (data[\"outboundReason\"] == \"\") {\n            status = false;\n          }\n        }\n      }\n\n      if (status === false) {\n        // console.log(data, dataField.dataField, data[dataField.dataField + 'Status']);\n        stats = false;\n      }\n    });\n  });\n  if (stats === false) {\n    setIsValidate(false);\n  } else {\n    setIsValidate(true);\n  }\n  setCheckingCsv(false);\n};\n\nconst setHeader = (csvData) => {\n  //get time - created at\n  let time = new Date().getTime();\n  let d = new Date(time);\n  let n = d.getMilliseconds();\n  let list_area = [];\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    //in outbound csv upload only check area source\n    if (!list_area.includes(data.areaSource)) {\n      return_data.push({\n        id: index,\n        warehouseSource: warehouse_source,\n        warehouseDestination: warehouse_source,\n        areaSource: data.areaSource,\n        areaDestination: data.areaSource,\n        list: [],\n        createdAt: n,\n      });\n      list_area.push(data.areaSource);\n    }\n  });\n  return return_data;\n};\n\nconst getSKU = (csvData) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.skuUuid == data.skuUuid &&\n        header.warehouseSource == data.warehouseSource &&\n        header.areaSource == data.areaSource\n      ) {\n        available = true;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        warehouseSource: warehouse_source,\n        areaSource: data.areaSource,\n        skuUuid: data.skuUuid,\n        skuNumber: data.skuNumber,\n        unitOfMeassures: data.uom,\n        photo: data.photos,\n        poList: [],\n      });\n    }\n  });\n  return return_data;\n};\n\nconst checkGrade = (value) => {\n  if (!value) {\n    return;\n  }\n\n  if (value.toUpperCase() == \"SEMI WASTE\") {\n    return \"semi_waste\";\n  } else if (value.toUpperCase() == \"WASTE\") {\n    return \"waste\";\n  } else {\n    return value;\n  }\n};\n\nconst groupingPO = (csvData, skuList) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    let header_index = \"\";\n\n    //cheking grade\n    let newGrade = checkGrade(data.newGradeUuid);\n    if (!newGrade) {\n      newGrade = data.skuUuid;\n    }\n    //end checking grade\n\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.areaSource == data.areaSource &&\n        header.warehouseSource == data.warehouseSource &&\n        header.skuUuid == data.skuUuid &&\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\n        header.ripenessLevel == data.ripenessLevel &&\n        header.expiryDateCol == data.expiryDateCol\n      ) {\n        available = true;\n        header_index = idx;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        skuUuid: data.skuUuid || \"\",\n        areaSource: data.areaSource || \"\",\n        warehouseSource: warehouse_source || \"\",\n        expiryDateCol: data.expiryDateCol || \"\",\n        expiryDate:\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n        inboundDate: data.inboundDate || \"\",\n        supplierId: data.supplierUuid || \"\",\n        supplierName: data.supplierName || \"\",\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\n        codeGrade: data.skuUuid || \"\",\n        ripenessLevel: data.ripenessLevel || 0,\n        itemList: [],\n      });\n      header_index = return_data.length - 1;\n    }\n    return_data[header_index].itemList.push({\n      qty: data.qty || 0,\n      areaSource: data.areaSource,\n      skuNumber: data.skuNumber,\n      ripeness: {\n        label: data.ripenessLevel || \"\",\n        value: data.ripenessLevel || 0,\n      },\n      expiryDate:\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n      expiryDateText: data.expiryDateCol,\n      grade: { label: data.newGrade, value: newGrade || data.skuUuid },\n      codeOutbound: {\n        label: data.outboundTypeCode || \"\",\n        value: data.outboundTypeCode || \"\",\n      },\n      note: data.reason || \"\",\n      areaName: data.areaName || \"\",\n      pack: data.inputPack || 0,\n      unitOfMeassures: data.uom || \"\",\n    });\n  });\n  return return_data;\n};\n\nconst setJobPost = (header, skuList, poGroup) => {\n  //insert PO to SKUList\n  skuList.map((skuListData, skuListIdx) => {\n    poGroup.map((poGroup, poGroupIndex) => {\n      if (\n        poGroup &&\n        poGroup.areaSource == skuListData.areaSource &&\n        poGroup.warehouseSource == skuListData.warehouseSource &&\n        poGroup.skuUuid == skuListData.skuUuid\n      ) {\n        skuList[skuListIdx][\"poList\"].push(poGroup);\n      }\n    });\n  });\n\n  //insert sku to Header\n  header.map((headerData, headerIdx) => {\n    skuList.map((skuListData, skuListDataIdx) => {\n      if (\n        poGroup &&\n        headerData.areaSource == skuListData.areaSource &&\n        headerData.warehouseSource == skuListData.warehouseSource\n      ) {\n        header[headerIdx][\"list\"].push(skuListData);\n      }\n    });\n  });\n\n  return header;\n};\n\nconst setResult = (result) => {\n  let arrayResult = [];\n  let i = 1;\n  result.jobPost.list.map((dataHeader, indexHeader) => {\n    dataHeader.poList.map((poHeader, indexPo) => {\n      poHeader.itemList.map((data, index) => {\n        let isStatus = \"Failed\";\n        if (data.isSuccess) {\n          isStatus = \"Success\";\n        }\n        arrayResult.push({\n          id: i,\n          uploadStatus: isStatus || \"\",\n          uploadStatusReason: data.message,\n          skuNumber: data.skuNumber || \"\",\n          ripenessLevel: data.ripeness?.label || \"\",\n          qty: data.qty || 0,\n          reason: data.note || \"\",\n          grade: poHeader.codeGrade || \"\",\n          newGrade: data.grade.label || \"\",\n          areaName: data.areaName || \"\",\n          inputPack: data.pack || 0,\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\n          expiryDateCol: data.expiryDateText || \"\",\n        });\n        i++;\n      });\n    });\n  });\n  return arrayResult;\n};\n\nexport const submit = async ({\n  csvData,\n  dispatch,\n  setIsSubmitText,\n  setSubmitStatus,\n  setMsg1,\n  setIsShowModal,\n}) => {\n  console.log(csvData);\n  setIsSubmitText(\"Loading...\");\n\n  // set body param\n  const params = csvData?.map((d, i) => {\n    return {\n      warehouse: d.warehouseUuid,\n      skuUuid: d.skuUuid,\n      skuName: d.skuDescription,\n      targetDate: moment(d.deliveryDate, \"DD-MM-YYYY\").format(\"YYYY-MM-DD\"),\n      targetUos: parseFloat(d.uos),\n      targetUom: parseInt(d.uom),\n      slot: parseInt(d.slot),\n    };\n  });\n\n  //submit\n  let execute = await submitCsvTargetRepack({\n    data: params,\n    setSubmitStatus,\n    dispatch,\n  });\n\n  setIsShowModal(false);\n  setIsSubmitText(\"Submit\");\n  if (execute?.isSuccess) {\n    setMsg1(execute?.message);\n  }\n};\n\nexport const validasiDouble = ({\n  selectorCsvData,\n  setNewCsvData,\n  setRowDouble,\n  dispatch,\n}) => {\n  let skuNumberArray = [];\n  let skuData = {};\n  let csvDataValidated = [];\n  let rowDouble = [];\n  const y = selectorCsvData?.map((data, idx) => {\n    if (!skuNumberArray.includes(data.skuNumber)) {\n      skuNumberArray.push(data.skuNumber);\n    }\n\n    let objName = \"sku_\" + data.skuNumber;\n    if (!skuData[objName]) {\n      let tmp = {\n        warehouse: data.warehouse,\n        deliveryDate: data.deliveryDate,\n        skuNumber: data.skuNumber,\n        slot: data.slot,\n      };\n      skuData[objName] = [tmp];\n    } else {\n      let dataArraySku = skuData[objName];\n      let pushData = true;\n      dataArraySku.map((d, i) => {\n        if (\n          d.deliveryDate == data.deliveryDate &&\n          d.skuNumber == data.skuNumber &&\n          d.slot == data.slot &&\n          d.warehouse == data.warehouse\n        ) {\n          //data sama, tidak di push\n          pushData = false;\n          rowDouble.push(data.id);\n\n          //set to red\n          data.warehouseStatus = false;\n          data.deliveryDateStatus = false;\n          data.slotStatus = false;\n          data.skuNumberStatus = false;\n          data.warehouseReason = \"Data Duplicated\";\n          data.deliveryDateReason = \"Data Duplicated\";\n          data.slotReason = \"Data Duplicated\";\n          data.skuNumberReason = \"Data Duplicated\";\n        }\n      });\n      if (pushData) {\n        let tmp = {\n          warehouse: data.warehouse,\n          deliveryDate: data.deliveryDate,\n          skuNumber: data.skuNumber,\n          slot: data.slot,\n        };\n        skuData[objName].push(tmp);\n      }\n    }\n\n    console.log(\"data\", data);\n    csvDataValidated.push(data);\n  });\n\n  console.log(csvDataValidated);\n  // setRowDouble([3]);\n  // dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: csvDataValidated });\n  // return { data: csvDataValidated, doubleRow: rowDouble };\n  setNewCsvData(csvDataValidated);\n  setRowDouble(rowDouble);\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { TableEditable } from \"Component/BootstrapTable\";\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\nimport \"../index.scss\";\nimport {\n  showErrorsOnly,\n  deleteErrorsField,\n  setCsvData,\n  submit,\n  checking_error,\n  validasiDouble,\n} from \"./services.js\";\nimport PopUp from \"Component/Modal/PopUp\";\n\nconst Upload = (props) => {\n  const dispatch = useDispatch();\n\n  //selector\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const selectorCsvData = useSelector((state) => state.csvData);\n  const selectorCsvField = useSelector((state) => state.csvField);\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\n  const selectorStatus = useSelector((state) => state.status); //wh\n  const warehousesData = useSelector((state) => state.warehouseData);\n\n  //state\n  const [isShowModal, setIsShowModal] = React.useState(false);\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\n  const [isValidate, setIsValidate] = React.useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\n  const [submitStatus, setSubmitStatus] = React.useState(false);\n\n  const [title, setTitle] = React.useState(null);\n  const [msg1, setMsg1] = React.useState(null);\n  const [msg2, setMsg2] = React.useState(null);\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\n  const [colourTitle, setColourTitle] = React.useState(null);\n  const [newCsvData, setNewCsvData] = React.useState([]);\n  const [rowDouble, setRowDouble] = React.useState([]);\n  console.log(\"rowwsss\", rowDouble);\n  useEffect(() => {\n    // validasiDouble({ selectorCsvData, dispatch });\n    setCheckingCsv(false);\n    checking_error({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      setIsValidate,\n      setCheckingCsv,\n    });\n  }, [checkingCsv]);\n\n  useEffect(() => {\n    validasiDouble({\n      selectorCsvData,\n      dispatch,\n      setNewCsvData,\n      setRowDouble,\n    });\n  }, [selectorCsvData]);\n\n  useEffect(() => {\n    if (submitStatus == \"success\") {\n      setTitle(\"Success!\");\n      setMsg2(\"Would you import another file?\");\n      setCancelButtonTitle(\"Cancel\");\n      setActionButtonTitle(\"Import new file\");\n      setActionButtonClass(\"bg-green background\");\n      setColourTitle(\"green\");\n      setModalShow(true);\n    } else if (submitStatus == \"failed\") {\n      setColourTitle(\"red\");\n      setTitle(\"Failed!\");\n      setActionButtonClass(\"bg-red background\");\n      setMsg1(selectorCsvFileName + \" failed to upload\");\n      setMsg2(\"Do you want to retry?\");\n      setCancelButtonTitle(\"Cancel\");\n      setActionButtonTitle(\"Retry\");\n      setModalShow(true);\n    }\n  }, [submitStatus]);\n\n  if (selectorCsvData === undefined || selectorCsvData === null) {\n    props.history.push(\"/inventory-entry/repacking/upload-target-repack\");\n    return 0;\n  }\n\n  const setCsvDataTmp = (param) => {\n    setCsvData({ param, dispatch, setCheckingCsv });\n    showErrorsOnly({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      isShowErrorOnly: false,\n      setIsShowErrorOnly,\n      setIsHiddenRows,\n      setCheckingCsv,\n    });\n  };\n\n  // const newCsvData = validasiDouble({\n  //   selectorCsvData,\n  //   dispatch,\n  // });\n\n  return (\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\n      <TableEditable\n        globalData={newCsvData} //Required\n        columns={selectorCsvField} //Required\n        tableClass=\"reviewTable\"\n        hiddenRows={isHiddenRows}\n        warehouseArea={selectorWarehouseArea}\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\n        setIsValidate={(param) => setIsValidate(param)}\n        dispatch={dispatch}\n        setCheckingCsv={setCheckingCsv}\n        warehousesData={warehousesData}\n        dataDoubleRow={rowDouble}\n      />\n\n      <div className=\"row pt-3\">\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-3 mr-3 text no-shadow\"\n            style={{ backgroundColor: \"#fff\" }}\n            onClick={() =>\n              showErrorsOnly({\n                csvData: newCsvData,\n                csvField: selectorCsvField,\n                isShowErrorOnly,\n                setIsShowErrorOnly,\n                setIsHiddenRows,\n                setCheckingCsv,\n              })\n            }\n          >\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn px-3 mr-3  text no-shadow\"\n            style={{ backgroundColor: \"#fff\" }}\n            onClick={() =>\n              deleteErrorsField({\n                csvData: selectorCsvData,\n                csvField: selectorCsvField,\n                dispatch,\n                setCheckingCsv,\n              })\n            }\n          >\n            Delete Errors Field\n          </button>\n        </div>\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\n          Review your imported file: {selectorCsvFileName} (\n          {selectorCsvData.length || 0} Lines)\n        </div>\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\n            onClick={() => props.history.goBack()}\n          >\n            Discard\n          </button>\n\n          <button\n            type=\"button\"\n            class={\n              \"btn px-5 mr-3 text-white no-shadow float-right \" +\n              (isValidate === true && selectorCsvData?.length > 0\n                ? \"bg-green\"\n                : \"bg-primaryGrey disabled\")\n            }\n            onClick={() => setIsShowModal(!isShowModal)}\n          >\n            Submit\n          </button>\n        </div>\n      </div>\n\n      <PopUp\n        status={selectorStatus}\n        onCloseFunction={() => {\n          setModalShow(false);\n          setSubmitStatus(false);\n          props.history.push(\"/inventory-entry/repacking\");\n        }}\n        statusDisplay={modalShow}\n        title={title}\n        cancelButtonTitle={cancelButtonTitle}\n        actionButtonTitle={actionButtonTitle}\n        colorText={colourTitle}\n        refreshOnCancel={false}\n        msg1={msg1}\n        msg2={msg2}\n        cancelButtonClass={null}\n        actionButtonClass={actionButtonClass + \" ml-0\"}\n        actionButtonEvent={() =>\n          props.history.push(\"/inventory-entry/repacking/upload-target-repack\")\n        }\n      />\n      <ModalsCaptcha\n        submit={() =>\n          submit({\n            dispatch,\n            csvData: selectorCsvData,\n            setIsShowModal,\n            setIsSubmitText,\n            setSubmitStatus,\n            setMsg1,\n          })\n        }\n        submitText={isSubmitText}\n        show={isShowModal}\n        setIsShowModal={setIsShowModal}\n      />\n    </div>\n  );\n};\n\nexport default withRouter(Upload);\n","import React, { useState, useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { onClose, refreshPage } from \"./services.js\";\nimport { useDispatch } from \"react-redux\";\nimport { STATUS } from \"apiServices/action\";\n\nconst PopUp = ({\n  refresh,\n  status,\n  icon,\n  statusDisplay = false,\n  title = \"\",\n  cancelButtonTitle = \"Cancel\",\n  actionButtonTitle = \"Submit\",\n  cancelButtonClass = \"bg-background\",\n  actionButtonClass = \"bg-background\",\n  actionButtonEvent = null,\n  colorText = \"red\",\n  msg1 = null,\n  msg2 = null,\n  onCloseFunction = null,\n  refreshOnCancel = true,\n  setIsSuccess\n}) => {\n  const dispatch = useDispatch();\n  if (status?.code === 500 ) {\n    icon = \"em-pensive\"\n    title = \"Server Error\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = true;\n  }\n  if (status?.code === 408 ) {\n    icon = \"em-alarm_clock\"\n    title = \"Request Timeout\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = true;\n  }\n  if (status?.code === 400 ) {\n    icon = \"em-alarm_clock\"\n    title = \"Server Error\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = false;\n  }\n  if (status?.code === 404) {\n    title = \"Something wrong with the application\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = false;\n  }\n\n  const [show, setShow] = useState(statusDisplay);\n\n  useEffect(() => {\n    //from outside change\n    setShow(statusDisplay);\n  }, [statusDisplay]);\n\n  useEffect(() => {\n  }, [show]);\n\n  window.onkeydown = e => e.keyCode === 27 ? setShow(false) : null\n  return (\n    <CRow className={`${show ? null : \"d-none\"}`}>\n      <CCol>\n        <CModal\n          show={show}\n          closeOnBackdrop={false}\n          onClose={() => {\n            setShow(false)\n            if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\n            dispatch({ type: STATUS, status: null });\n            if (onCloseFunction) {\n              onCloseFunction()\n            }\n          }}\n          size=\"lg\"\n          style={{ minHeight: \"280px\" }}\n          bodyOpenClassName=\"p-3\"\n        >\n          {/* <div className='d-flex flex-row-reverse'>\n            <i className='pr-2 pt-2 iconU-modalClose' onClick={() => setShow(false)}></i>\n          </div>\n          <CModalHeader className=\"px-5 pt-3 border-none\">\n              <CModalTitle className={`text LatoBold ${colorText}`}>\n                {title}\n              </CModalTitle> */}\n\n          <div className=\"d-flex flex-row-reverse\">\n            <i\n              className=\"pr-3 pt-3 iconU-modalClose\"\n              onClick={() => {\n                setShow(false)\n                if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\n                dispatch({ type: STATUS, status: null });\n                if (onCloseFunction) {\n                  onCloseFunction()\n                }\n              }}\n            ></i>\n          </div>\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className={`text LatoBold ${colorText}`}>\n              {title} <span><i className={`em ${icon}`}></i></span>\n            </CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">{msg1}</p>\n            <p className=\"text\">{msg2}</p>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            {cancelButtonTitle ? (\n              <CButton\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\n                onClick={() => {\n                  if (refreshOnCancel) {\n                    if (typeof (refresh) === 'function') refresh()\n                    else refreshPage({ refresh: true });\n                  } else {\n                    onClose({\n                      setShow,\n                      parentOncCloseFunction: onCloseFunction,\n                    });\n                  }\n                  dispatch({ type: STATUS, status: null });\n                }}\n              >\n                {cancelButtonTitle}\n              </CButton>\n            ) : null}\n            {actionButtonTitle ? (\n              <CButton\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\n                onClick={() => {\n                  if (actionButtonEvent) {\n                    actionButtonEvent();\n                    setShow(false);\n                  } else {\n                    setShow(false)\n                  }\n                }\n                }\n              >\n                {actionButtonTitle}\n              </CButton>\n            ) : null}{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default PopUp;\n","export const onClose = ({ setShow, parentOncCloseFunction }) => {\n  setShow(false);\n  if (parentOncCloseFunction) {\n    parentOncCloseFunction();\n  }\n\n};\n\nexport const refreshPage = ({ refresh = true }) => {\n  if (refresh === true) {\n    window.location.reload(false);\n  }\n};\n","import { isInteger } from \"formik\";\n\nexport const next = ({\n  e,\n  state,\n  isCaptcha,\n  setIsValidated,\n  setIsType,\n  isType,\n  isValidated,\n  submit\n}) => {\n  const key = e.key; // const {key} = event; ES6+\n  let type = [...isType];\n\n  //if press enter\n  if (key === \"Enter\"){\n    if(isValidated){\n      submit();\n    }else{\n      return;\n    }\n  }\n\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\",\"Delete\"];\n  if (arr_tmp.includes(key)) {\n    return 0;\n  } else if (key === \"Backspace\") {\n    let type_ = [...isType];\n    let state_ = type_[state];\n    if (state_ == \"\" && state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\n      type_[state - 1] = \"\";\n      type[state - 1] = \"\";\n    } \n  } else if (key === \"ArrowLeft\") {\n    if (state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) - 1))\n        .setSelectionRange(-1, -1);\n\n      return 0;\n    }\n  } else if (key === \"ArrowRight\") {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) + 1))\n        .setSelectionRange(-1, -1);\n      return 0;\n    }\n  } else {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n    }\n  }\n\n  if (key === \"Backspace\") {\n    type[state] = \"\";\n  } else {\n    type[state] = key.toUpperCase();\n  }\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\n  let allowedChar = char.split(\"\");\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\n    setIsType(type);\n  } else {\n    return 0;\n  }\n\n  let stat = true;\n  isCaptcha.map((data, index) => {\n    // if (index == 0) {\n    //   return;\n    // }\n    if (!(type[index + 1] == isCaptcha[index])) {\n      stat = false;\n    } \n  });\n  setIsValidated(stat);\n};\n\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\n  if (module?.length) {\n    let newModule = [];\n    module.map((list) => {\n      list.poList.map((po) => {\n        po.itemList.map((item) => {\n          const { qty, grade } = item;\n          const _qty = isInteger(qty)\n            ? parseInt(qty)\n            : !qty\n              ? 0\n              : parseFloat(qty);\n          const _sku = noSkuChecking\n            ? list.skuName\n            : moduleName === \"waste\"\n              ? item.wasteType?.label\n                ? item.wasteType?.label\n                : list.skuName\n              : grade?.label;\n          const _toWaste =\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\" ||\n                item.wasteType?.label === \"Waste\"\n                ? true\n                : false\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\n                ? true\n                : false;\n          const _uom = noSkuChecking\n            ? list.unitOfMeassures\n            : grade?.uom === \"gram\"\n              ? \"kg\"\n              : grade?.uom;\n          let newSku = {\n            sku: _sku,\n            qty: _qty,\n            uom: _uom,\n            wqty: 0,\n            swqty: 0,\n          };\n          if (_toWaste) {\n            newSku.qty = 0;\n            newSku.sku = list.skuName;\n          }\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Waste\"\n              : grade?.label === \"Waste\"\n          )\n            newSku.wqty = _qty;\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\"\n              : grade?.label === \"Semi Waste\"\n          )\n            newSku.swqty = _qty;\n          const isExist = newModule.findIndex(\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\n          );\n\n          if (moduleName !== \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (grade?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\n            }\n          }\n\n          if (moduleName === \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (item.wasteType?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (item.wasteType?.label === \"Waste\")\n                newModule[isExist].wqty += _qty;\n            }\n          }\n        });\n      });\n    });\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\n    const i = newModule.findIndex((s) => s.sku === skuName);\n    newModule.forEach((sku) => {\n      if (i !== -1) {\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\n      }\n    });\n    return newModule;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { useSelector } from \"react-redux\";\nimport { next, skuListUpdateCheck } from \"./services.js\";\nimport { totalQty } from \"Page/StockEntry/GeneralServices/moduleServices\";\n\nconst ModalsConfirmation = ({\n  moduleEntry,\n  confirmation,\n  setConfirmation,\n  save,\n  submit,\n  isSuccess,\n  isLoading,\n  moveAll,\n  setAction,\n  moduleName,\n  noSkuChecking,\n  singleViewData,\n}) => {\n  const dimention = document.documentElement.clientHeight;\n  const height = dimention - 300;\n\n  let buttonName = \"Submit\";\n\n  if (confirmation.name === \"save\") buttonName = \"Save\";\n  useEffect(() => {\n    if (isSuccess) setConfirmation({ show: false, name: null });\n  }, [isSuccess]);\n  window.onkeydown = (e) =>\n    e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null;\n\n  useEffect(() => {\n    setAction(confirmation.name);\n  }, [confirmation]);\n\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry;\n\n  const areaDestinationName = module?.jobPost?.areaDestinationName;\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName;\n  const areaName = module?.jobPost?.areaName;\n\n  const skuListUpdate = skuListUpdateCheck(\n    module?.jobPost.list,\n    noSkuChecking,\n    moduleName\n  );\n  return (\n    <CRow\n      className={\"modalConfirmation \" + (confirmation.show ? null : \"d-none\")}\n    >\n      <CCol>\n        <CModal show={confirmation.show} closeOnBackdrop={false}>\n          <CModalHeader className=\"px-4 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">\n              Confirmation{\" \"}\n              <span>\n                <i className=\"em em-pray\"></i>\n              </span>\n            </CModalTitle>\n            <label\n              tabIndex=\"0\"\n              onKeyDown={(e) =>\n                e.keyCode === 13\n                  ? setConfirmation({ show: false, name: null })\n                  : false\n              }\n              onClick={() => setConfirmation({ show: false, name: null })}\n              className=\"sku-item iconU-modalClose\"\n            />\n          </CModalHeader>\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\n            <p className=\"text mb-2\">\n              <span>{`Are you sure want to ${\n                areaName == \"Waste\" ? \"update\" : \"send\"\n              } this Item `}</span>\n              <span\n                className={` ${areaDestinationName ? null : \"d-none\"}`}\n              >{` from`}</span>\n              <span\n                className={`green ${areaDestinationName ? null : \"d-none\"}`}\n              >{` ${areaName} `}</span>\n              <span>\n                {moduleName == \"outbound\"\n                  ? \"from\"\n                  : moduleName === \"repack\"\n                  ? \"\"\n                  : \"to\"}{\" \"}\n              </span>\n              <span\n                className={`green ${moduleName !== \"repack\" ? null : \"d-none\"}`}\n              >{` ${\n                moduleName === \"stockTransfer\"\n                  ? warehouseDestinationName\n                  : areaDestinationName\n                  ? areaDestinationName\n                  : areaName\n              } `}</span>\n            </p>\n            <p className=\"text\">\n              Please double check this list, this record will store to database.\n            </p>\n            <div\n              style={{\n                minHeight: height,\n                maxHeight: height,\n                overflow: \"auto\",\n                border: \"1px solid var(--lineGrey)\",\n              }}\n            >\n              <table>\n                <thead>\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Weight\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Semi Waste\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Waste\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {skuListUpdate?.map((data) => (\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                      <td style={{ maxWidth: \"160px\" }}>{data.sku}</td>\n                      <td\n                        className=\"text-right py-3\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        {`${totalQty(data?.qty)}`}\n                      </td>\n                      <td\n                        className=\"text-right text-nowrap\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        <span className=\"text-nowrap\">{`${totalQty(\n                          data?.swqty\n                        )} `}</span>\n                      </td>\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\n                        {`${totalQty(data?.wqty)}`}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? setConfirmation({ show: false, name: null })\n                    : false\n                }\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\n                onClick={() => setConfirmation({ show: false, name: null })}\n              >\n                Cancel\n              </CButton>\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? isLoading\n                      ? null\n                      : confirmation.name === \"save\"\n                      ? save()\n                      : submit()\n                    : false\n                }\n                className={`${\n                  isLoading ? \"bg-softGreen text\" : \"bg-green text-white\"\n                } no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\n                onClick={() =>\n                  isLoading\n                    ? null\n                    : confirmation.name === \"save\"\n                    ? save()\n                    : submit()\n                }\n              >\n                {isLoading ? \"Processing...\" : buttonName}\n              </CButton>{\" \"}\n            </div>\n          </CModalBody>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst ModalsCaptcha = ({\n  show = false,\n  setIsShowModal,\n  submit,\n  submitText = \"Submit\",\n}) => {\n  //random text\n  var text = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var charactersLength = characters.length;\n  var text_split = [];\n  for (var i = 0; i < 3; i++) {\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\n    text += r;\n    text_split.push(r);\n  }\n\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\n  const [isValidated, setIsValidated] = React.useState(false);\n  const [isType, setIsType] = React.useState([]);\n\n  //reset if visible = false\n  useEffect(() => {\n    if (show === true) {\n      document.getElementById(\"t1\").value = \"\";\n      document.getElementById(\"t2\").value = \"\";\n      document.getElementById(\"t3\").value = \"\";\n    }\n  }, [show]);\n\n  return (\n    <CRow className={show ? null : \"d-none\"}>\n      <CCol>\n        <CModal\n          show={show}\n          onClose={() => {\n            setIsShowModal(false);\n          }}\n          size=\"lg\"\n          style={{ height: \"400px\" }}\n        >\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\n              {selectorCsvFileName}?\n            </p>\n            <p className=\"text\">\n              Once uploaded this record will store to databases.\n            </p>\n            <p className=\"text mb-2\">\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\n            </p>\n\n            <div className=\"captcha-box\">\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 1,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t1\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[0]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 2,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t2\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input ml-0 mr-0\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[1]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 3,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t3\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[2]}\n              />\n            </div>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            <CButton\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\n              onClick={() => {\n                setIsShowModal(false);\n              }}\n            >\n              Cancel\n            </CButton>\n            <CButton\n              className={\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\n              }\n              onClick={() => {\n                submit();\n                setIsValidated(false);\n              }}\n            >\n              {submitText}\n            </CButton>{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport { ModalsConfirmation, ModalsCaptcha };\n","import React from \"react\";\nimport { CCard } from \"@coreui/react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"./bootstrapTable-style.scss\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport axios from \"axios\";\n\n//cell editable\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\n\nclass TableEditable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validateStatus: false,\n      validateResult: \"Please Wait...\",\n      globalData: this.props.globalData,\n      rowCount: 0,\n      keyy: 0,\n      triggerRender: 0\n    };  \n    this.validatePOSKUStockTransfer = this.validatePOSKUStockTransfer.bind(this);\n    this.validateSKUNumber = this.validateSKUNumber.bind(this);\n    \n  } \n  changeOutboundReason = (row) => {\n    setTimeout(() => {\n      let elem = document.getElementById(`row${row}-outboundReason`);\n      elem.classList.add(\"red\", \"tooltip-custom\");\n      elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\n    }, 300);\n  }\n\n  changeWarehouseUuid = (\n    value,\n    column,\n    columnName,\n    row,\n    warehouseCodeList,\n    warehouseUuidList,\n    warehouseNameList\n  ) => {\n    const { setCsvDataTmp, globalData } = this.props;\n    let tmpdata = globalData;\n    var index = tmpdata.findIndex((obj) => obj.id == row);\n    let i = warehouseCodeList.indexOf(value);\n    tmpdata[index][column] = warehouseUuidList[i];\n    tmpdata[index][columnName] = warehouseNameList[i];\n\n    console.clear() \n    setTimeout(async () => {\n      setCsvDataTmp(tmpdata);\n    }, 400);\n  };\n\n  validatePOSKU = async (id, row, idColumn) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;\n    if(transaction==\"additional_inbound\"){\n      return;\n    }\n\n    let tmpdata = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/stocktake/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        elem.classList.add(\"red\");\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          var index = tmpdata.findIndex((obj) => obj.id == row);\n          if (data[0] && data[0].isExist === true) {\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\n            tmpdata[index].wmsPoSkuCodeStatus = true;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = data[0].expiryDate;\n            tmpdata[index].inboundDate = data[0].inboundDate;\n            tmpdata[index].supplierName = data[0].supplierName;\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\n            tmpdata[index].uom = data[0].uom;\n            tmpdata[index].photos = data[0].photos;\n            elem.classList.remove(\"red\");\n            elem.classList.add(\"hiddenTooltip\");\n          } else {\n            tmpdata[index].wmsPoSkuCodeStatus = false;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = \"\";\n            tmpdata[index].inboundDate = \"\";\n            tmpdata[index].supplierName = \"\";\n            tmpdata[index].supplierUuid = \"\";\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\n          }\n          setCsvDataTmp(tmpdata);\n        });\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validatePOSKUStockTransfer = async (newValue, row, idColumn, key) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;  \n    let tmpdata = globalData;\n    \n    var index = tmpdata.findIndex((obj) => obj.id == row.id); \n    // console.log(tmpdata)\n    // console.log(row.id, row)\n    // console.log(index)\n\n    try {\n      const url = \"/stocktransfer/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      let payloadPO = [{\n        \"id\": row.id,\n        \"poSkuCode\": key==\"wmsPoSkuCode\" ? newValue : (row.poSkuCode?row.poSkuCode:\"\"),\n        \"skuNumber\": key==\"skuNumber\"? newValue?.skuNumber: row.skuNumber,\n        \"skuUuid\": key==\"skuNumber\"? newValue?.skuUuid:row.skuUuid,\n        \"warehouseSource\": row.warehouseSource,\n        \"areaSource\": row.areaSource,\n        \"weight\": key==\"qty\"?newValue:row.qty\n      }]; \n\n      setTimeout(async () => {\n        //setvalidate false\n        setIsValidate(false);\n\n        //elemen column\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        // elem.classList.remove(\"hiddenTooltip\");\n        // elem.classList.add(\"red\");  \n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: payloadPO },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          if (data[0]) {\n            if(data[0].isExist === true && data[0].isValid === true){\n              tmpdata[index]['rowStatus'] = true;\n              tmpdata[index]['rowReason'] = \"\";\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }else{\n              tmpdata[index]['rowStatus'] = false;\n              tmpdata[index]['rowReason'] = data[0]?.errorMessage;\n            }\n            tmpdata[index]['wmsPoSkuCode'] = data[0]?.wmsPoSkuCode ;\n            tmpdata[index]['wmsPoSkuCodeStatus'] = data[0]?.isExist && data[0]?.isValid;\n            tmpdata[index]['wmsPoSkuCodeReason'] = data[0]?.errorMessage;\n            tmpdata[index]['expiryDate'] = data[0]?.expiryDate;\n            tmpdata[index]['inboundDate'] = data[0]?.inboundDate;\n            tmpdata[index]['supplierName'] = data[0]?.supplierName;\n            tmpdata[index]['supplierUuid'] = data[0]?.supplierUuid;\n            tmpdata[index]['uom'] = data[0]?.uom;\n            tmpdata[index]['photos'] = data[0]?.photos;\n          } else {\n            tmpdata[index]['wmsPoSkuCodeStatus'] = false;\n            tmpdata[index]['wmsPoSkuCodeReason'] = response?.data?.message;\n            tmpdata[index]['expiryDate'] = \"\";\n            tmpdata[index]['inboundDate'] = \"\";\n            tmpdata[index]['supplierName'] = \"\";\n            tmpdata[index]['supplierUuid'] = \"\";\n            tmpdata[index]['rowStatus'] = false;\n            tmpdata[index]['rowReason'] = response?.data?.message;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = response?.data?.message;\n          } \n\n          if(key==\"skuNumber\"){ \n            tmpdata[index][\"skuNumber\"] = newValue.skuNumber;\n            tmpdata[index][\"skuNumberReason\"] = newValue.skuDescription;\n            tmpdata[index][\"skuNumberStatus\"] = true;\n            tmpdata[index][\"skuUuid\"] = newValue.skuUuid;\n          }\n          setCsvDataTmp(tmpdata); \n        }); \n        let tmpKey = this.state.keyy + 1; \n        this.setState({keyy: tmpKey}); \n      }, 500);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validateOutbountReason = (value, row, idColumn) => {\n    const { globalData } = this.props;\n    let tmp_data = globalData;\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\n      this.changeOutboundReason(row)\n    }\n  };\n\n  validateOutbountType = (value, row, idColumn) => {\n    const { globalData, setIsValidate } = this.props;\n    let tmp_data = globalData;\n    setIsValidate(false);\n    if (value.toUpperCase() !== \"LAINNYA\") {\n      setIsValidate(true);\n      return 0;\n    }\n\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (datax[\"outboundReason\"] == \"\") {\n      this.changeOutboundReason(row);\n    }\n  };\n\n  validateSKUNumber = async (id, row, idColumn, key, rowData = null) => {\n    const { globalData, setCsvDataTmp, setIsValidate,transaction } = this.props;\n    let tmp_data = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/oss/skuByNumbers\";\n      let elem = null;\n      let elemspan = null;\n      \n      // for validating stock transfer\n      let stats = false;\n      let newSkuData = {} \n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { skuList: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          let isSuccess = response.data.isSuccess;\n          var index = tmp_data.findIndex((obj) => obj.id == row);\n          if (isSuccess === true && data.length > 0) {\n            stats = true;\n            tmp_data[index][key] = data[0].skuNumber;\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\n            tmp_data[index][key + \"Status\"] = true;\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\n            newSkuData = {\n              skuUuid: data[0].id,\n              skuNumber: data[0].skuNumber,\n              skuDescription: data[0].skuDescription,\n              photo: data[0].photo\n            }\n\n            //custom\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = data[0].id;\n              tmp_data[index].photo = data[0].imageMd;\n            }\n\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = data[0].uom;\n            }\n            \n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = data[0].uom;\n            }\n\n            \n            if(transaction!==\"stockTransfer\"){\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }\n\n          } else {\n            stats = false;\n            tmp_data[index][key] = id;\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\n            tmp_data[index][key + \"Status\"] = false;\n            tmp_data[index][key + \"Uuid\"] = null;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"SKU Number Not Found\";\n\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = \"\";\n              tmp_data[index].photo = \"\";\n            }\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = null;\n            }\n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = \"\";\n            }\n          } \n        });\n\n        if(transaction==\"stockTransfer\" && stats === true){ \n          this.validatePOSKUStockTransfer(newSkuData, rowData, idColumn, 'skuNumber')\n        }else{\n          setCsvDataTmp(tmp_data);\n        }\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  render() {\n    const {\n      columns,\n      hiddenRows,\n      tableClass,\n      warehouseArea,\n      outboundType,\n      setCheckingCsv, \n      editable = true,\n      warehousesData = [],\n      transaction,\n      globalData\n    } = this.props;\n    let { validateStatus,  keyy } = this.state;\n    \n    //wh\n    let warehouseCodeList = [];\n    let warehouseUuidList = [];\n    let warehouseNameList = [];\n    if (warehousesData) {\n      let tmp = warehousesData?.data?.map((d) => {\n        warehouseCodeList.push(d.code);\n        warehouseUuidList.push(d.id);\n        warehouseNameList.push(d.name);\n      });\n    }\n\n    //wh area\n    let wh_area_label =\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\n    let wh_outboundtype_label = !outboundType\n      ? []\n      : outboundType.map((data) => data.label.toUpperCase());\n    let wh_outboundtype_value = !outboundType\n      ? []\n      : outboundType.map((data) => data.value);\n    const newFormat = columns.map((data, index) => {\n      data.validator = (newValue, row, column, done) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let reason = null;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n\n        let stockTransferColumnCheck = ['wmsPoSkuCode', 'qty']\n        if (stockTransferColumnCheck.includes(key) && transaction==\"stockTransfer\") {\n          this.validatePOSKUStockTransfer(newValue, row, idColumn, key);\n          stat = true;\n        }else if(key == \"wmsPoSkuCode\" ){\n          this.validatePOSKU(newValue, row.id, idColumn, key);\n          stat = true; \n        }\n\n        if (key == \"skuNumber\") {\n          this.validateSKUNumber(newValue, row.id, idColumn, key, row);\n          stat = true;\n        }\n\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type not found\";\n            checkType = false;\n            stat = false;\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        } else if (key == \"newGrade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            //if not waste or semi waste\n            if (parseInt(newValue)) {\n              //if number\n              stat = true;\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\n            } else if (newValue == \"\") {\n              row[\"newGradeUuid\"] = null;\n              row[\"newGradeUom\"] = null;\n              stat = true;\n            } else {\n              //if not number => undefined\n              reason = \"Grade Undefined\";\n              checkType = false;\n              stat = false;\n            }\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        }\n\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Outbound Type Not Found`;\n          } else {\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\n            stat = true;\n            this.validateOutbountType(newValue, row.id, idColumn);\n          }\n        }\n\n        if (key == \"outboundReason\") {\n          this.validateOutbountReason(newValue, row.id, idColumn);\n        }\n\n        if (key == \"warehouse\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseUuid\",\n              \"warehouseName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          }\n        }\n        if (key == \"warehouseDestination\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseDestinationUuid\",\n              \"warehouseDestinationName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          } \n        }\n\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Warehouse Area Not Found`;\n          } else {\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\n            if (key == \"areaNameDestination\") {\n              row[\"areaDestination\"] = wh_area_value[i];\n            } else {\n              row[\"areaSource\"] = wh_area_value[i];\n            }\n            stat = true;\n          }\n        }\n\n        if (key == \"newPack\") {\n          let checkTypenewPack = isNaN(newValue) ? false : true;\n          if (!checkTypenewPack) {\n            stat = false;\n            reason = `Pack Should be a number`;\n          } else {\n            stat = true;\n          }\n        } \n        \n\n        let checkType = null;\n        if (data.type == \"number\") {\n          checkType = isNaN(newValue) ? false : true;\n        } else {\n          checkType = true;\n        }\n        if (checkType === false) {\n          reason = `${data.text} Should be a ${data.type}`;\n        } \n\n        \n        if (key == \"wmsPoSkuCode\" && transaction == \"stockTransfer\") {\n          if(isNaN(newValue)){\n            checkType = false;\n            reason = `${data.text} Should be a number`;\n            stat = false;\n          } \n        } \n\n        //some field can null\n        let canNull = [\n          \"grade\",\n          \"outboundReason\",\n          \"ripenessLevel\",\n          \"newRipeness\",\n          \"reason\",\n          \"expiryDate\"\n        ]; \n\n        if (canNull.includes(key) && newValue === \"\") {\n          reason = \"\";\n          checkType = true;\n          stat = true;\n        } else if (key == \"grade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type Not Found\";\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //check ripenesslevel\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\n          let allowedRipenessLevel = [0, 1, 2, 3];\n          if (\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\n            newValue == \"\"\n          ) {\n            checkType = true;\n            stat = true;\n            reason = \"\";\n            if (newValue == \"\") {\n              newValue = \"\";\n            }\n          } else {\n            checkType = false;\n            stat = false;\n            reason = \"Undefined Ripeness Level\";\n          }\n        }\n\n        //check date\n        if (data.type == \"date_indo\") {\n          //checking date\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\n          if (newValue.match(regex_date)) {\n            checkType = true;\n            stat = true;\n          } else if (newValue == \"\") {\n            checkType = true;\n            stat = true;\n          } else {\n            reason = `Date format must be 'dd-mm-yyyy'`;\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //set notif\n        row[keyReason] = reason;\n        if (stat && checkType) {\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\n          if (!specialKey.includes(key)) {\n            //some key have their own checking, so if not in array do checking error\n            row[keyStatus] = true;\n            setCheckingCsv();\n          }\n        } \n         \n        return {\n          valid: stat && checkType ? true : false,\n          message: reason,\n        };\n      };\n\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n        let txt = row[keyReason];\n        \n        // if status column = false\n        // that mean there's error or not valid data in some column\n        if (row[keyStatus] === false) {\n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {txt}\n              </span>\n            </div>\n          );\n        }\n\n        // if global row status = false\n        // that mean there's wmsposkucode validation error, and makes 1 line become red colour\n        // for now is only for stock transfer  \n        if ( transaction==\"stockTransfer\" &&  row['rowStatus'] === false) { \n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {row['rowReason']}\n              </span>\n            </div>\n          );\n        }\n\n        \n        // if status column = true\n        // No problem \n        return (\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\n            {cell}\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\n              {txt}\n            </span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n    console.clear();  \n    console.log(globalData)\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={globalData}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          cellEdit={\n            editable === true\n              ? cellEditFactory({\n                  mode: \"click\",\n                  blurToSave: true,\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\n                })\n              : null\n          }\n          bordered={false}\n          hiddenRows={hiddenRows}\n          key={keyy}\n        />\n      </CCard>\n    );\n  }\n}\n\nclass TableResult extends React.Component {\n  render() {\n    const { columns, tableClass, data } = this.props;\n\n    const newFormat = columns.map((data, index) => {\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\n          return (\n            <div className=\"tooltip-custom red\">\n              {cell}\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\n            </div>\n          );\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\n          return (\n            <div className=\"green\">\n              {cell}\n              <span></span>\n            </div>\n          );\n        }\n\n        return (\n          <div>\n            {cell}\n            <span></span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={data}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          bordered={false}\n        />\n      </CCard>\n    );\n  }\n}\n\nexport { TableResult, TableEditable };\n"],"sourceRoot":""}