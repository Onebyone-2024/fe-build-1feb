{"version":3,"sources":["Page/StockEntry/Repacking/Upload/Review.jsx","Page/StockEntry/Repacking/Upload/services.js","Component/Modal/PopUp/index.jsx","Component/Modal/PopUp/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/BootstrapTable/index.jsx"],"names":["withRouter","props","dispatch","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","csvData","selectorCsvField","csvField","selectorWarehouseArea","warehouseAreaCsv","selectorOutboundType","outboundTypeCsv","selectorStatus","status","submitStatus","setSubmitStatus","React","useState","isShowModal","setIsShowModal","isHiddenRows","setIsHiddenRows","isShowErrorOnly","setIsShowErrorOnly","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","setCheckingCsv","isSubmitText","setIsSubmitText","title","setTitle","msg1","setMsg1","msg2","setMsg2","cancelButtonTitle","setCancelButtonTitle","actionButtonTitle","setActionButtonTitle","actionButtonClass","setActionButtonClass","colourTitle","setColourTitle","useEffect","_ref4","undefined","stats","map","data","index","dataField","indexField","toUpperCase","checking_error","history","push","setCsvDataTmp","param","_ref3","type","STOK_TAKE_UPLOAD_JSON","setCsvData","_ref","tmp_arr_false","tmp_arr_true","stat","i","dataColumn","indexColumn","key","includes","ret","filter","x","length","showErrorsOnly","createElement","className","TableEditable","globalData","columns","tableClass","hiddenRows","warehouseArea","outboundType","style","lineHeight","onClick","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","cancelButtonClass","actionButtonEvent","ModalsCaptcha","submit","async","_ref5","console","log","submitText","show","refresh","icon","setIsSuccess","code","message","setShow","window","onkeydown","e","keyCode","CRow","concat","CCol","CModal","closeOnBackdrop","onClose","success","name","STATUS","size","minHeight","bodyOpenClassName","CModalHeader","CModalTitle","CModalBody","CModalFooter","CButton","_ref2","location","reload","refreshPage","parentOncCloseFunction","next","isCaptcha","setIsValidated","setIsType","isType","isValidated","type_","document","getElementById","parseInt","focus","value","setSelectionRange","split","ModalsConfirmation","_module$jobPost","_module$jobPost2","_module$jobPost3","moduleEntry","confirmation","setConfirmation","save","isSuccess","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","module","areaDestinationName","jobPost","warehouseDestinationName","areaName","skuListUpdate","skuListUpdateCheck","newModule","list","poList","po","itemList","item","_item$wasteType","_item$wasteType2","_item$wasteType3","_item$wasteType4","_item$wasteType5","_item$wasteType6","qty","grade","_qty","isInteger","parseFloat","_sku","skuName","wasteType","label","_toWaste","_uom","unitOfMeassures","uom","newSku","sku","wqty","swqty","isExist","findIndex","_item$wasteType7","_item$wasteType8","s","forEach","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","text","characters","charactersLength","text_split","r","charAt","Math","floor","random","setIsCaptcha","isCaptchaText","setIsCaptchaText","autocomplete","onKeyUp","id","textTransform","maxLength","placeholder","Component","constructor","_this","super","this","changeOutboundReason","row","setTimeout","elem","classList","add","innerHTML","changeWarehouseUuid","column","columnName","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","obj","indexOf","clear","validatePOSKU","idColumn","transaction","url","elemspan","axios","method","then","response","_response$data","wmsPoSkuCode","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","expiryDate","inboundDate","supplierName","supplierUuid","photos","remove","error","validatePOSKUStockTransfer","newValue","payloadPO","poSkuCode","skuNumber","skuUuid","warehouseSource","areaSource","_response$data2","_data$2","_data$3","_data$4","_data$5","_data$6","_data$7","_data$8","_data$9","_data$10","_data$11","_data$","isValid","errorMessage","_response$data3","_response$data4","_response$data5","skuDescription","tmpKey","keyy","setState","validateOutbountReason","tmp_data","datax","validateOutbountType","validateSKUNumber","rowData","arguments","newSkuData","skuList","_response$data6","photo","imageMd","newGradeUom","validateStatus","validateResult","rowCount","triggerRender","bind","render","editable","warehousesData","_warehousesData$data","d","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","done","keyStatus","keyReason","reason","arr_grade","checkType","isNaN","regex_date","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","CCard","BootstrapTable","keyField","sort","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered","TableResult"],"mappings":"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","file":"static/js/48.a0f06445.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { TableEditable } from \"Component/BootstrapTable\";\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\nimport \"../index.scss\";\nimport {\n  showErrorsOnly,\n  deleteErrorsField,\n  setCsvData,\n  submit,\n  checking_error\n} from \"./services.js\";\nimport PopUp from \"Component/Modal/PopUp\";\n\nconst Upload = (props) => {\n  const dispatch = useDispatch();\n\n  //selector\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const selectorCsvData = useSelector((state) => state.csvData);\n  const selectorCsvField = useSelector((state) => state.csvField);\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\n  const selectorOutboundType = useSelector((state) => state.outboundTypeCsv);\n  const selectorStatus = useSelector((state) => state.status);\n  const [submitStatus, setSubmitStatus] = React.useState(false);\n\n  //state\n  const [isShowModal, setIsShowModal] = React.useState(false);\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\n  const [isValidate, setIsValidate] = React.useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\n  const [title, setTitle] = React.useState(null);\n  const [msg1, setMsg1] = React.useState(null);\n  const [msg2, setMsg2] = React.useState(null);\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\n  const [colourTitle, setColourTitle] = React.useState(null);\n\n  useEffect(() => {\n    checking_error({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      setIsValidate,\n      setCheckingCsv\n    });\n  }, [checkingCsv]);\n\n  useEffect(() => {\n    if (submitStatus === \"success\") {\n      setActionButtonTitle('Done');\n      setCancelButtonTitle('');\n      setMsg1(selectorCsvFileName + ' upload successfull. ');\n      setMsg2('Would you import another file?');\n      setTitle('Success');\n      setActionButtonClass('bg-green background ml-0');\n      setColourTitle('green');\n      setModalShow(true);\n      \n    }\n  }, [submitStatus]);\n\n  if (selectorCsvData === undefined || selectorCsvData === null) {\n    props.history.push(\"/inventory-entry/repacking/CSV-upload\");\n    return 0;\n  }\n\n  const setCsvDataTmp = (param) => {\n    setCsvData({ param, dispatch, setCheckingCsv });\n    showErrorsOnly({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      isShowErrorOnly: false,\n      setIsShowErrorOnly,\n      setIsHiddenRows,\n      setCheckingCsv\n    })\n  };\n\n  return (\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\n      <TableEditable\n        globalData={selectorCsvData} //Required\n        columns={selectorCsvField} //Required\n        tableClass=\"reviewTable\"\n        hiddenRows={isHiddenRows}\n        warehouseArea={selectorWarehouseArea}\n        outboundType={selectorOutboundType}\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\n        setIsValidate={(param) => setIsValidate(param)}\n        dispatch={dispatch}\n        setCheckingCsv={setCheckingCsv}\n      />\n\n      <div className=\"row pt-3\">\n        <div className=\"col-4\">\n          \n        </div>\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\n          Review your imported file: {selectorCsvFileName} (\n          {selectorCsvData.length || 0} Lines)\n        </div>\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\n            onClick={() => props.history.goBack()}\n          >\n            Discard\n          </button>\n\n          <button\n            type=\"button\"\n            class={\n              \"btn px-5 mr-3 text-white no-shadow float-right bg-green\" \n            }\n            onClick={() => setIsShowModal(!isShowModal)}\n\n          >\n            Submit\n          </button>\n        </div>\n      </div>\n\n      <PopUp\n        status={selectorStatus}\n        onCloseFunction={() => {\n          setModalShow(false);\n          setSubmitStatus(false)\n        }}\n        statusDisplay={modalShow}\n        title={title}\n        cancelButtonTitle={cancelButtonTitle}\n        actionButtonTitle={actionButtonTitle}\n        colorText={colourTitle}\n        refreshOnCancel={false}\n        msg1={msg1}\n        msg2={msg2}\n        cancelButtonClass={null}\n        actionButtonClass={actionButtonClass + \" ml-0\"}\n        actionButtonEvent={() => props.history.push(\"/inventory-entry/repacking/CSV-upload\")}\n      />\n      <ModalsCaptcha\n        submit={() =>\n          submit({\n            dispatch,\n            csvData: selectorCsvData,\n            csvField: selectorCsvField,\n            setIsShowModal,\n            setIsSubmitText,\n            setSubmitStatus\n          })\n        }\n        submitText={isSubmitText}\n        show={isShowModal}\n        setIsShowModal={setIsShowModal}\n      />\n    </div>\n  );\n};\n\nexport default withRouter(Upload);\n","//other\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\nimport { submitCsv } from \"apiServices\";\nimport moment from \"moment\";\n\nexport const showErrorsOnly = ({\n  csvData,\n  csvField,\n  isShowErrorOnly,\n  setIsShowErrorOnly,\n  setIsHiddenRows,\n  setCheckingCsv,\n}) => {\n  // ;\n  let tmp_arr_false = [];\n  let tmp_arr_true = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    let i = index + 1;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n\n    if (stat === false) {\n      if (!tmp_arr_false.includes(i)) {\n        tmp_arr_false.push(i);\n      }\n    } else {\n      if (!tmp_arr_true.includes(i)) {\n        tmp_arr_true.push(i);\n      }\n    }\n  });\n\n  //return array\n  let ret = [];\n  if (isShowErrorOnly === true) {\n    //true = delete all row\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\n    if (ret.length == csvData.length) {\n      return 0;\n    }\n  } else {\n    ret = [];\n  }\n  setIsHiddenRows(ret);\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\n  setCheckingCsv(true);\n};\n\nexport const deleteErrorsField = ({\n  csvData,\n  csvField,\n  dispatch,\n  setCheckingCsv,\n}) => {\n  let new_arr = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n    if (stat === true) {\n      new_arr.push(data);\n    }\n  });\n\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\n  setCheckingCsv(true);\n};\n\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\n  setCheckingCsv(true);\n};\n\nexport const checking_error = ({\n  csvData,\n  csvField,\n  setIsValidate,\n  setCheckingCsv,\n}) => {\n  if (csvData === undefined) {\n    return 0;\n  }\n  let stats = true;\n  csvData.map((data, index) => {\n    csvField.map((dataField, indexField) => {\n      // console.log(data[dataField + 'status']);\n      let status = data[dataField.dataField + \"Status\"];\n\n      //jika outbound type = lainya, maka harus isi outbound reason\n      if (dataField.dataField == \"outboundType\") {\n        let type = data[dataField.dataField].toUpperCase();\n        if (type == \"LAINNYA\") {\n          if (data[\"outboundReason\"] == \"\") {\n            status = false;\n          }\n        }\n      }\n\n      if (status === false) {\n        // console.log(data, dataField.dataField, data[dataField.dataField + 'Status']);\n        stats = false;\n      }\n    });\n  });\n  if (stats === false) {\n    setIsValidate(false);\n  } else {\n    setIsValidate(true);\n  }\n  setCheckingCsv(false);\n};\n\nconst setHeader = (csvData) => {\n  //get time - created at\n  let time = new Date().getTime();\n  let d = new Date(time);\n  let n = d.getMilliseconds();\n  let list_area = [];\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    //in outbound csv upload only check area source\n    if (!list_area.includes(data.areaSource)) {\n      return_data.push({\n        id: index,\n        warehouseSource: warehouse_source,\n        warehouseDestination: warehouse_source,\n        areaSource: data.areaSource,\n        areaDestination: data.areaSource,\n        list: [],\n        createdAt: n,\n      });\n      list_area.push(data.areaSource);\n    }\n  });\n  return return_data;\n};\n\nconst getSKU = (csvData) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.skuUuid == data.skuUuid &&\n        header.warehouseSource == data.warehouseSource &&\n        header.areaSource == data.areaSource\n      ) {\n        available = true;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        warehouseSource: warehouse_source,\n        areaSource: data.areaSource,\n        skuUuid: data.skuUuid,\n        skuNumber: data.skuNumber,\n        unitOfMeassures: data.uom,\n        photo: data.photos,\n        poList: [],\n      });\n    }\n  });\n  return return_data;\n};\n\nconst checkGrade = (value) => {\n  if (!value) {\n    return;\n  }\n\n  if (value.toUpperCase() == \"SEMI WASTE\") {\n    return \"semi_waste\";\n  } else if (value.toUpperCase() == \"WASTE\") {\n    return \"waste\";\n  } else {\n    return value;\n  }\n};\n\nconst groupingPO = (csvData, skuList) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    let header_index = \"\";\n\n    //cheking grade\n    let newGrade = checkGrade(data.newGradeUuid);\n    if (!newGrade) {\n      newGrade = data.skuUuid;\n    }\n    //end checking grade\n\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.areaSource == data.areaSource &&\n        header.warehouseSource == data.warehouseSource &&\n        header.skuUuid == data.skuUuid &&\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\n        header.ripenessLevel == data.ripenessLevel &&\n        header.expiryDateCol == data.expiryDateCol\n      ) {\n        available = true;\n        header_index = idx;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        skuUuid: data.skuUuid || \"\",\n        areaSource: data.areaSource || \"\",\n        warehouseSource: warehouse_source || \"\",\n        expiryDateCol: data.expiryDateCol || \"\",\n        expiryDate:\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n        inboundDate: data.inboundDate || \"\",\n        supplierId: data.supplierUuid || \"\",\n        supplierName: data.supplierName || \"\",\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\n        codeGrade: data.skuUuid || \"\",\n        ripenessLevel: data.ripenessLevel || 0,\n        itemList: [],\n      });\n      header_index = return_data.length - 1;\n    }\n    return_data[header_index].itemList.push({\n      qty: data.qty || 0,\n      areaSource: data.areaSource,\n      skuNumber: data.skuNumber,\n      ripeness: {\n        label: data.ripenessLevel || \"\",\n        value: data.ripenessLevel || 0,\n      },\n      expiryDate:\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n      expiryDateText: data.expiryDateCol,\n      grade: { label: data.newGrade, value: newGrade || data.skuUuid },\n      codeOutbound: {\n        label: data.outboundTypeCode || \"\",\n        value: data.outboundTypeCode || \"\",\n      },\n      note: data.reason || \"\",\n      areaName: data.areaName || \"\",\n      pack: data.inputPack || 0,\n      unitOfMeassures: data.uom || \"\",\n    });\n  });\n  return return_data;\n};\n\nconst setJobPost = (header, skuList, poGroup) => {\n  //insert PO to SKUList\n  skuList.map((skuListData, skuListIdx) => {\n    poGroup.map((poGroup, poGroupIndex) => {\n      if (\n        poGroup &&\n        poGroup.areaSource == skuListData.areaSource &&\n        poGroup.warehouseSource == skuListData.warehouseSource &&\n        poGroup.skuUuid == skuListData.skuUuid\n      ) {\n        skuList[skuListIdx][\"poList\"].push(poGroup);\n      }\n    });\n  });\n\n  //insert sku to Header\n  header.map((headerData, headerIdx) => {\n    skuList.map((skuListData, skuListDataIdx) => {\n      if (\n        poGroup &&\n        headerData.areaSource == skuListData.areaSource &&\n        headerData.warehouseSource == skuListData.warehouseSource\n      ) {\n        header[headerIdx][\"list\"].push(skuListData);\n      }\n    });\n  });\n\n  return header;\n};\n\nconst setResult = (result) => {\n  let arrayResult = [];\n  let i = 1;\n  result.list.map((dataHeader, indexHeader) => {\n    dataHeader.poList.map((poHeader, indexPo) => {\n      poHeader.itemList.map((data, index) => {\n        let isStatus = \"Failed\";\n        if (data.isSuccess) {\n          isStatus = \"Success\";\n        }\n        arrayResult.push({\n          id: i,\n          uploadStatus: isStatus || \"\",\n          uploadStatusReason: data.message,\n          skuNumber: data.skuNumber || \"\",\n          ripenessLevel: data.ripeness?.label || \"\",\n          qty: data.qty || 0,\n          reason: data.note || \"\",\n          grade: poHeader.codeGrade || \"\",\n          newGrade: data.grade.label || \"\",\n          areaName: data.areaName || \"\",\n          inputPack: data.pack || 0,\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\n          expiryDateCol: data.expiryDateText || \"\",\n        });\n        i++;\n      });\n    });\n  });\n  return arrayResult;\n};\n\nexport const submit = async ({\n  csvData,\n  csvField,\n  dispatch,\n  selectorStatus,\n  setIsShowModal,\n  setIsSubmitText,\n  setSubmitStatus,\n}) => {\n  console.log(csvData);\n  setIsSubmitText(\"Loading...\");\n\n  //set header\n  //let header = await setHeader(csvData);\n\n  //get list sku\n  //let skuList = await getSKU(csvData);\n\n  //grouping PO\n  //let poGroup = await groupingPO(csvData, skuList);\n\n  //set JobPost\n  //let jobPost = await setJobPost(header, skuList, poGroup);\n\n  //submit\n  // let execute = await submitCsv({\n  //   dataCsv: jobPost,\n  //   setSubmitStatus,\n  //   dispatch,\n  //   transaction: \"repacking\",\n  // });\n  // if (execute == \"error\") {\n  //   return 0;\n  // }\n\n  //set result\n  // let result = await setResult(execute?.data);\n  // await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\n\n  //renew schema for result\n  // let newSchema = [];\n  // newSchema.push({\n  //   dataField: \"uploadStatus\",\n  //   text: \"Upload Status\",\n  //   type: \"string\",\n  //   sort: true,\n  // });\n  // csvField.map((data, index) => {\n  //   newSchema.push(data);\n  // });\n  // await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\n\n  setIsShowModal(false);\n  setIsSubmitText(\"Submit\");\n  setSubmitStatus(\"success\");\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { onClose, refreshPage } from \"./services.js\";\nimport { useDispatch } from \"react-redux\";\nimport { STATUS } from \"apiServices/action\";\n\nconst PopUp = ({\n  refresh,\n  status,\n  icon,\n  statusDisplay = false,\n  title = \"\",\n  cancelButtonTitle = \"Cancel\",\n  actionButtonTitle = \"Submit\",\n  cancelButtonClass = \"bg-background\",\n  actionButtonClass = \"bg-background\",\n  actionButtonEvent = null,\n  colorText = \"red\",\n  msg1 = null,\n  msg2 = null,\n  onCloseFunction = null,\n  refreshOnCancel = true,\n  setIsSuccess\n}) => {\n  const dispatch = useDispatch();\n  if (status?.code === 500 ) {\n    icon = \"em-pensive\"\n    title = \"Server Error\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = true;\n  }\n  if (status?.code === 408 ) {\n    icon = \"em-alarm_clock\"\n    title = \"Request Timeout\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = true;\n  }\n  if (status?.code === 400 ) {\n    icon = \"em-alarm_clock\"\n    title = \"Server Error\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = false;\n  }\n  if (status?.code === 404) {\n    title = \"Something wrong with the application\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = false;\n  }\n\n  const [show, setShow] = useState(statusDisplay);\n\n  useEffect(() => {\n    //from outside change\n    setShow(statusDisplay);\n  }, [statusDisplay]);\n\n  useEffect(() => {\n  }, [show]);\n\n  window.onkeydown = e => e.keyCode === 27 ? setShow(false) : null\n  return (\n    <CRow className={`${show ? null : \"d-none\"}`}>\n      <CCol>\n        <CModal\n          show={show}\n          closeOnBackdrop={false}\n          onClose={() => {\n            setShow(false)\n            if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\n            dispatch({ type: STATUS, status: null });\n            if (onCloseFunction) {\n              onCloseFunction()\n            }\n          }}\n          size=\"lg\"\n          style={{ minHeight: \"280px\" }}\n          bodyOpenClassName=\"p-3\"\n        >\n          {/* <div className='d-flex flex-row-reverse'>\n            <i className='pr-2 pt-2 iconU-modalClose' onClick={() => setShow(false)}></i>\n          </div>\n          <CModalHeader className=\"px-5 pt-3 border-none\">\n              <CModalTitle className={`text LatoBold ${colorText}`}>\n                {title}\n              </CModalTitle> */}\n\n          <div className=\"d-flex flex-row-reverse\">\n            <i\n              className=\"pr-3 pt-3 iconU-modalClose\"\n              onClick={() => {\n                setShow(false)\n                if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\n                dispatch({ type: STATUS, status: null });\n                if (onCloseFunction) {\n                  onCloseFunction()\n                }\n              }}\n            ></i>\n          </div>\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className={`text LatoBold ${colorText}`}>\n              {title} <span><i className={`em ${icon}`}></i></span>\n            </CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">{msg1}</p>\n            <p className=\"text\">{msg2}</p>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            {cancelButtonTitle ? (\n              <CButton\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\n                onClick={() => {\n                  if (refreshOnCancel) {\n                    if (typeof (refresh) === 'function') refresh()\n                    else refreshPage({ refresh: true });\n                  } else {\n                    onClose({\n                      setShow,\n                      parentOncCloseFunction: onCloseFunction,\n                    });\n                  }\n                  dispatch({ type: STATUS, status: null });\n                }}\n              >\n                {cancelButtonTitle}\n              </CButton>\n            ) : null}\n            {actionButtonTitle ? (\n              <CButton\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\n                onClick={() => {\n                  if (actionButtonEvent) {\n                    actionButtonEvent();\n                    setShow(false);\n                  } else {\n                    setShow(false)\n                  }\n                }\n                }\n              >\n                {actionButtonTitle}\n              </CButton>\n            ) : null}{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default PopUp;\n","export const onClose = ({ setShow, parentOncCloseFunction }) => {\n  setShow(false);\n  if (parentOncCloseFunction) {\n    parentOncCloseFunction();\n  }\n\n};\n\nexport const refreshPage = ({ refresh = true }) => {\n  if (refresh === true) {\n    window.location.reload(false);\n  }\n};\n","import { isInteger } from \"formik\";\n\nexport const next = ({\n  e,\n  state,\n  isCaptcha,\n  setIsValidated,\n  setIsType,\n  isType,\n  isValidated,\n  submit\n}) => {\n  const key = e.key; // const {key} = event; ES6+\n  let type = [...isType];\n\n  //if press enter\n  if (key === \"Enter\"){\n    if(isValidated){\n      submit();\n    }else{\n      return;\n    }\n  }\n\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\",\"Delete\"];\n  if (arr_tmp.includes(key)) {\n    return 0;\n  } else if (key === \"Backspace\") {\n    let type_ = [...isType];\n    let state_ = type_[state];\n    if (state_ == \"\" && state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\n      type_[state - 1] = \"\";\n      type[state - 1] = \"\";\n    } \n  } else if (key === \"ArrowLeft\") {\n    if (state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) - 1))\n        .setSelectionRange(-1, -1);\n\n      return 0;\n    }\n  } else if (key === \"ArrowRight\") {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) + 1))\n        .setSelectionRange(-1, -1);\n      return 0;\n    }\n  } else {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n    }\n  }\n\n  if (key === \"Backspace\") {\n    type[state] = \"\";\n  } else {\n    type[state] = key.toUpperCase();\n  }\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\n  let allowedChar = char.split(\"\");\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\n    setIsType(type);\n  } else {\n    return 0;\n  }\n\n  let stat = true;\n  isCaptcha.map((data, index) => {\n    // if (index == 0) {\n    //   return;\n    // }\n    if (!(type[index + 1] == isCaptcha[index])) {\n      stat = false;\n    } \n  });\n  setIsValidated(stat);\n};\n\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\n  if (module?.length) {\n    let newModule = [];\n    module.map((list) => {\n      list.poList.map((po) => {\n        po.itemList.map((item) => {\n          const { qty, grade } = item;\n          const _qty = isInteger(qty)\n            ? parseInt(qty)\n            : !qty\n              ? 0\n              : parseFloat(qty);\n          const _sku = noSkuChecking\n            ? list.skuName\n            : moduleName === \"waste\"\n              ? item.wasteType?.label\n                ? item.wasteType?.label\n                : list.skuName\n              : grade?.label;\n          const _toWaste =\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\" ||\n                item.wasteType?.label === \"Waste\"\n                ? true\n                : false\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\n                ? true\n                : false;\n          const _uom = noSkuChecking\n            ? list.unitOfMeassures\n            : grade?.uom === \"gram\"\n              ? \"kg\"\n              : grade?.uom;\n          let newSku = {\n            sku: _sku,\n            qty: _qty,\n            uom: _uom,\n            wqty: 0,\n            swqty: 0,\n          };\n          if (_toWaste) {\n            newSku.qty = 0;\n            newSku.sku = list.skuName;\n          }\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Waste\"\n              : grade?.label === \"Waste\"\n          )\n            newSku.wqty = _qty;\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\"\n              : grade?.label === \"Semi Waste\"\n          )\n            newSku.swqty = _qty;\n          const isExist = newModule.findIndex(\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\n          );\n\n          if (moduleName !== \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (grade?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\n            }\n          }\n\n          if (moduleName === \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (item.wasteType?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (item.wasteType?.label === \"Waste\")\n                newModule[isExist].wqty += _qty;\n            }\n          }\n        });\n      });\n    });\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\n    const i = newModule.findIndex((s) => s.sku === skuName);\n    newModule.forEach((sku) => {\n      if (i !== -1) {\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\n      }\n    });\n    return newModule;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { useSelector } from \"react-redux\";\nimport { next, skuListUpdateCheck } from \"./services.js\";\nimport { totalQty } from \"Page/StockEntry/GeneralServices/moduleServices\";\n\nconst ModalsConfirmation = ({\n  moduleEntry,\n  confirmation,\n  setConfirmation,\n  save,\n  submit,\n  isSuccess,\n  isLoading,\n  moveAll,\n  setAction,\n  moduleName,\n  noSkuChecking,\n  singleViewData,\n}) => {\n  const dimention = document.documentElement.clientHeight;\n  const height = dimention - 300;\n\n  let buttonName = \"Submit\";\n\n  if (confirmation.name === \"save\") buttonName = \"Save\";\n  useEffect(() => {\n    if (isSuccess) setConfirmation({ show: false, name: null });\n  }, [isSuccess]);\n  window.onkeydown = (e) =>\n    e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null;\n\n  useEffect(() => {\n    setAction(confirmation.name);\n  }, [confirmation]);\n\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry;\n\n  const areaDestinationName = module?.jobPost?.areaDestinationName;\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName;\n  const areaName = module?.jobPost?.areaName;\n\n  const skuListUpdate = skuListUpdateCheck(\n    module?.jobPost.list,\n    noSkuChecking,\n    moduleName\n  );\n  return (\n    <CRow\n      className={\"modalConfirmation \" + (confirmation.show ? null : \"d-none\")}\n    >\n      <CCol>\n        <CModal show={confirmation.show} closeOnBackdrop={false}>\n          <CModalHeader className=\"px-4 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">\n              Confirmation{\" \"}\n              <span>\n                <i className=\"em em-pray\"></i>\n              </span>\n            </CModalTitle>\n            <label\n              tabIndex=\"0\"\n              onKeyDown={(e) =>\n                e.keyCode === 13\n                  ? setConfirmation({ show: false, name: null })\n                  : false\n              }\n              onClick={() => setConfirmation({ show: false, name: null })}\n              className=\"sku-item iconU-modalClose\"\n            />\n          </CModalHeader>\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\n            <p className=\"text mb-2\">\n              <span>{`Are you sure want to ${\n                areaName == \"Waste\" ? \"update\" : \"send\"\n              } this Item `}</span>\n              <span\n                className={` ${areaDestinationName ? null : \"d-none\"}`}\n              >{` from`}</span>\n              <span\n                className={`green ${areaDestinationName ? null : \"d-none\"}`}\n              >{` ${areaName} `}</span>\n              <span>\n                {moduleName == \"outbound\"\n                  ? \"from\"\n                  : moduleName === \"repack\"\n                  ? \"\"\n                  : \"to\"}{\" \"}\n              </span>\n              <span\n                className={`green ${moduleName !== \"repack\" ? null : \"d-none\"}`}\n              >{` ${\n                moduleName === \"stockTransfer\"\n                  ? warehouseDestinationName\n                  : areaDestinationName\n                  ? areaDestinationName\n                  : areaName\n              } `}</span>\n            </p>\n            <p className=\"text\">\n              Please double check this list, this record will store to database.\n            </p>\n            <div\n              style={{\n                minHeight: height,\n                maxHeight: height,\n                overflow: \"auto\",\n                border: \"1px solid var(--lineGrey)\",\n              }}\n            >\n              <table>\n                <thead>\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Weight\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Semi Waste\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Waste\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {skuListUpdate?.map((data) => (\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                      <td style={{ maxWidth: \"160px\" }}>{data.sku}</td>\n                      <td\n                        className=\"text-right py-3\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        {`${totalQty(data?.qty)}`}\n                      </td>\n                      <td\n                        className=\"text-right text-nowrap\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        <span className=\"text-nowrap\">{`${totalQty(\n                          data?.swqty\n                        )} `}</span>\n                      </td>\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\n                        {`${totalQty(data?.wqty)}`}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? setConfirmation({ show: false, name: null })\n                    : false\n                }\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\n                onClick={() => setConfirmation({ show: false, name: null })}\n              >\n                Cancel\n              </CButton>\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? isLoading\n                      ? null\n                      : confirmation.name === \"save\"\n                      ? save()\n                      : submit()\n                    : false\n                }\n                className={`${\n                  isLoading ? \"bg-softGreen text\" : \"bg-green text-white\"\n                } no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\n                onClick={() =>\n                  isLoading\n                    ? null\n                    : confirmation.name === \"save\"\n                    ? save()\n                    : submit()\n                }\n              >\n                {isLoading ? \"Processing...\" : buttonName}\n              </CButton>{\" \"}\n            </div>\n          </CModalBody>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst ModalsCaptcha = ({\n  show = false,\n  setIsShowModal,\n  submit,\n  submitText = \"Submit\",\n}) => {\n  //random text\n  var text = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var charactersLength = characters.length;\n  var text_split = [];\n  for (var i = 0; i < 3; i++) {\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\n    text += r;\n    text_split.push(r);\n  }\n\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\n  const [isValidated, setIsValidated] = React.useState(false);\n  const [isType, setIsType] = React.useState([]);\n\n  //reset if visible = false\n  useEffect(() => {\n    if (show === true) {\n      document.getElementById(\"t1\").value = \"\";\n      document.getElementById(\"t2\").value = \"\";\n      document.getElementById(\"t3\").value = \"\";\n    }\n  }, [show]);\n\n  return (\n    <CRow className={show ? null : \"d-none\"}>\n      <CCol>\n        <CModal\n          show={show}\n          onClose={() => {\n            setIsShowModal(false);\n          }}\n          size=\"lg\"\n          style={{ height: \"400px\" }}\n        >\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\n              {selectorCsvFileName}?\n            </p>\n            <p className=\"text\">\n              Once uploaded this record will store to databases.\n            </p>\n            <p className=\"text mb-2\">\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\n            </p>\n\n            <div className=\"captcha-box\">\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 1,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t1\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[0]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 2,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t2\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input ml-0 mr-0\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[1]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 3,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t3\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[2]}\n              />\n            </div>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            <CButton\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\n              onClick={() => {\n                setIsShowModal(false);\n              }}\n            >\n              Cancel\n            </CButton>\n            <CButton\n              className={\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\n              }\n              onClick={() => {\n                submit();\n                setIsValidated(false);\n              }}\n            >\n              {submitText}\n            </CButton>{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport { ModalsConfirmation, ModalsCaptcha };\n","import React from \"react\";\nimport { CCard } from \"@coreui/react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"./bootstrapTable-style.scss\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport axios from \"axios\";\n\n//cell editable\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\n\nclass TableEditable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validateStatus: false,\n      validateResult: \"Please Wait...\",\n      globalData: this.props.globalData,\n      rowCount: 0,\n      keyy: 0,\n      triggerRender: 0\n    };  \n    this.validatePOSKUStockTransfer = this.validatePOSKUStockTransfer.bind(this);\n    this.validateSKUNumber = this.validateSKUNumber.bind(this);\n    \n  } \n  changeOutboundReason = (row) => {\n    setTimeout(() => {\n      let elem = document.getElementById(`row${row}-outboundReason`);\n      elem.classList.add(\"red\", \"tooltip-custom\");\n      elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\n    }, 300);\n  }\n\n  changeWarehouseUuid = (\n    value,\n    column,\n    columnName,\n    row,\n    warehouseCodeList,\n    warehouseUuidList,\n    warehouseNameList\n  ) => {\n    const { setCsvDataTmp, globalData } = this.props;\n    let tmpdata = globalData;\n    var index = tmpdata.findIndex((obj) => obj.id == row);\n    let i = warehouseCodeList.indexOf(value);\n    tmpdata[index][column] = warehouseUuidList[i];\n    tmpdata[index][columnName] = warehouseNameList[i];\n\n    console.clear() \n    setTimeout(async () => {\n      setCsvDataTmp(tmpdata);\n    }, 400);\n  };\n\n  validatePOSKU = async (id, row, idColumn) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;\n    if(transaction==\"additional_inbound\"){\n      return;\n    }\n\n    let tmpdata = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/stocktake/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        elem.classList.add(\"red\");\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          var index = tmpdata.findIndex((obj) => obj.id == row);\n          if (data[0] && data[0].isExist === true) {\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\n            tmpdata[index].wmsPoSkuCodeStatus = true;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = data[0].expiryDate;\n            tmpdata[index].inboundDate = data[0].inboundDate;\n            tmpdata[index].supplierName = data[0].supplierName;\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\n            tmpdata[index].uom = data[0].uom;\n            tmpdata[index].photos = data[0].photos;\n            elem.classList.remove(\"red\");\n            elem.classList.add(\"hiddenTooltip\");\n          } else {\n            tmpdata[index].wmsPoSkuCodeStatus = false;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = \"\";\n            tmpdata[index].inboundDate = \"\";\n            tmpdata[index].supplierName = \"\";\n            tmpdata[index].supplierUuid = \"\";\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\n          }\n          setCsvDataTmp(tmpdata);\n        });\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validatePOSKUStockTransfer = async (newValue, row, idColumn, key) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;  \n    let tmpdata = globalData;\n    \n    var index = tmpdata.findIndex((obj) => obj.id == row.id); \n    // console.log(tmpdata)\n    // console.log(row.id, row)\n    // console.log(index)\n\n    try {\n      const url = \"/stocktransfer/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      let payloadPO = [{\n        \"id\": row.id,\n        \"poSkuCode\": key==\"wmsPoSkuCode\" ? newValue : (row.poSkuCode?row.poSkuCode:\"\"),\n        \"skuNumber\": key==\"skuNumber\"? newValue?.skuNumber: row.skuNumber,\n        \"skuUuid\": key==\"skuNumber\"? newValue?.skuUuid:row.skuUuid,\n        \"warehouseSource\": row.warehouseSource,\n        \"areaSource\": row.areaSource,\n        \"weight\": key==\"qty\"?newValue:row.qty\n      }]; \n\n      setTimeout(async () => {\n        //setvalidate false\n        setIsValidate(false);\n\n        //elemen column\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        // elem.classList.remove(\"hiddenTooltip\");\n        // elem.classList.add(\"red\");  \n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: payloadPO },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          if (data[0]) {\n            if(data[0].isExist === true && data[0].isValid === true){\n              tmpdata[index]['rowStatus'] = true;\n              tmpdata[index]['rowReason'] = \"\";\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }else{\n              tmpdata[index]['rowStatus'] = false;\n              tmpdata[index]['rowReason'] = data[0]?.errorMessage;\n            }\n            tmpdata[index]['wmsPoSkuCode'] = data[0]?.wmsPoSkuCode ;\n            tmpdata[index]['wmsPoSkuCodeStatus'] = data[0]?.isExist && data[0]?.isValid;\n            tmpdata[index]['wmsPoSkuCodeReason'] = data[0]?.errorMessage;\n            tmpdata[index]['expiryDate'] = data[0]?.expiryDate;\n            tmpdata[index]['inboundDate'] = data[0]?.inboundDate;\n            tmpdata[index]['supplierName'] = data[0]?.supplierName;\n            tmpdata[index]['supplierUuid'] = data[0]?.supplierUuid;\n            tmpdata[index]['uom'] = data[0]?.uom;\n            tmpdata[index]['photos'] = data[0]?.photos;\n          } else {\n            tmpdata[index]['wmsPoSkuCodeStatus'] = false;\n            tmpdata[index]['wmsPoSkuCodeReason'] = response?.data?.message;\n            tmpdata[index]['expiryDate'] = \"\";\n            tmpdata[index]['inboundDate'] = \"\";\n            tmpdata[index]['supplierName'] = \"\";\n            tmpdata[index]['supplierUuid'] = \"\";\n            tmpdata[index]['rowStatus'] = false;\n            tmpdata[index]['rowReason'] = response?.data?.message;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = response?.data?.message;\n          } \n\n          if(key==\"skuNumber\"){ \n            tmpdata[index][\"skuNumber\"] = newValue.skuNumber;\n            tmpdata[index][\"skuNumberReason\"] = newValue.skuDescription;\n            tmpdata[index][\"skuNumberStatus\"] = true;\n            tmpdata[index][\"skuUuid\"] = newValue.skuUuid;\n          }\n          setCsvDataTmp(tmpdata); \n        }); \n        let tmpKey = this.state.keyy + 1; \n        this.setState({keyy: tmpKey}); \n      }, 500);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validateOutbountReason = (value, row, idColumn) => {\n    const { globalData } = this.props;\n    let tmp_data = globalData;\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\n      this.changeOutboundReason(row)\n    }\n  };\n\n  validateOutbountType = (value, row, idColumn) => {\n    const { globalData, setIsValidate } = this.props;\n    let tmp_data = globalData;\n    setIsValidate(false);\n    if (value.toUpperCase() !== \"LAINNYA\") {\n      setIsValidate(true);\n      return 0;\n    }\n\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (datax[\"outboundReason\"] == \"\") {\n      this.changeOutboundReason(row);\n    }\n  };\n\n  validateSKUNumber = async (id, row, idColumn, key, rowData = null) => {\n    const { globalData, setCsvDataTmp, setIsValidate,transaction } = this.props;\n    let tmp_data = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/oss/skuByNumbers\";\n      let elem = null;\n      let elemspan = null;\n      \n      // for validating stock transfer\n      let stats = false;\n      let newSkuData = {} \n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { skuList: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          let isSuccess = response.data.isSuccess;\n          var index = tmp_data.findIndex((obj) => obj.id == row);\n          if (isSuccess === true && data.length > 0) {\n            stats = true;\n            tmp_data[index][key] = data[0].skuNumber;\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\n            tmp_data[index][key + \"Status\"] = true;\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\n            newSkuData = {\n              skuUuid: data[0].id,\n              skuNumber: data[0].skuNumber,\n              skuDescription: data[0].skuDescription,\n              photo: data[0].photo\n            }\n\n            //custom\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = data[0].id;\n              tmp_data[index].photo = data[0].imageMd;\n            }\n\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = data[0].uom;\n            }\n            \n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = data[0].uom;\n            }\n\n            \n            if(transaction!==\"stockTransfer\"){\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }\n\n          } else {\n            stats = false;\n            tmp_data[index][key] = id;\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\n            tmp_data[index][key + \"Status\"] = false;\n            tmp_data[index][key + \"Uuid\"] = null;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"SKU Number Not Found\";\n\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = \"\";\n              tmp_data[index].photo = \"\";\n            }\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = null;\n            }\n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = \"\";\n            }\n          } \n        });\n\n        if(transaction==\"stockTransfer\" && stats === true){ \n          this.validatePOSKUStockTransfer(newSkuData, rowData, idColumn, 'skuNumber')\n        }else{\n          setCsvDataTmp(tmp_data);\n        }\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  render() {\n    const {\n      columns,\n      hiddenRows,\n      tableClass,\n      warehouseArea,\n      outboundType,\n      setCheckingCsv, \n      editable = true,\n      warehousesData = [],\n      transaction,\n      globalData\n    } = this.props;\n    let { validateStatus,  keyy } = this.state;\n    \n    //wh\n    let warehouseCodeList = [];\n    let warehouseUuidList = [];\n    let warehouseNameList = [];\n    if (warehousesData) {\n      let tmp = warehousesData?.data?.map((d) => {\n        warehouseCodeList.push(d.code);\n        warehouseUuidList.push(d.id);\n        warehouseNameList.push(d.name);\n      });\n    }\n\n    //wh area\n    let wh_area_label =\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\n    let wh_outboundtype_label = !outboundType\n      ? []\n      : outboundType.map((data) => data.label.toUpperCase());\n    let wh_outboundtype_value = !outboundType\n      ? []\n      : outboundType.map((data) => data.value);\n    const newFormat = columns.map((data, index) => {\n      data.validator = (newValue, row, column, done) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let reason = null;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n\n        let stockTransferColumnCheck = ['wmsPoSkuCode', 'qty']\n        if (stockTransferColumnCheck.includes(key) && transaction==\"stockTransfer\") {\n          this.validatePOSKUStockTransfer(newValue, row, idColumn, key);\n          stat = true;\n        }else if(key == \"wmsPoSkuCode\" ){\n          this.validatePOSKU(newValue, row.id, idColumn, key);\n          stat = true; \n        }\n\n        if (key == \"skuNumber\") {\n          this.validateSKUNumber(newValue, row.id, idColumn, key, row);\n          stat = true;\n        }\n\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type not found\";\n            checkType = false;\n            stat = false;\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        } else if (key == \"newGrade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            //if not waste or semi waste\n            if (parseInt(newValue)) {\n              //if number\n              stat = true;\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\n            } else if (newValue == \"\") {\n              row[\"newGradeUuid\"] = null;\n              row[\"newGradeUom\"] = null;\n              stat = true;\n            } else {\n              //if not number => undefined\n              reason = \"Grade Undefined\";\n              checkType = false;\n              stat = false;\n            }\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        }\n\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Outbound Type Not Found`;\n          } else {\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\n            stat = true;\n            this.validateOutbountType(newValue, row.id, idColumn);\n          }\n        }\n\n        if (key == \"outboundReason\") {\n          this.validateOutbountReason(newValue, row.id, idColumn);\n        }\n\n        if (key == \"warehouse\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseUuid\",\n              \"warehouseName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          }\n        }\n        if (key == \"warehouseDestination\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseDestinationUuid\",\n              \"warehouseDestinationName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          } \n        }\n\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Warehouse Area Not Found`;\n          } else {\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\n            if (key == \"areaNameDestination\") {\n              row[\"areaDestination\"] = wh_area_value[i];\n            } else {\n              row[\"areaSource\"] = wh_area_value[i];\n            }\n            stat = true;\n          }\n        }\n\n        if (key == \"newPack\") {\n          let checkTypenewPack = isNaN(newValue) ? false : true;\n          if (!checkTypenewPack) {\n            stat = false;\n            reason = `Pack Should be a number`;\n          } else {\n            stat = true;\n          }\n        } \n        \n\n        let checkType = null;\n        if (data.type == \"number\") {\n          checkType = isNaN(newValue) ? false : true;\n        } else {\n          checkType = true;\n        }\n        if (checkType === false) {\n          reason = `${data.text} Should be a ${data.type}`;\n        } \n\n        \n        if (key == \"wmsPoSkuCode\" && transaction == \"stockTransfer\") {\n          if(isNaN(newValue)){\n            checkType = false;\n            reason = `${data.text} Should be a number`;\n            stat = false;\n          } \n        } \n\n        //some field can null\n        let canNull = [\n          \"grade\",\n          \"outboundReason\",\n          \"ripenessLevel\",\n          \"newRipeness\",\n          \"reason\",\n          \"expiryDate\"\n        ]; \n\n        if (canNull.includes(key) && newValue === \"\") {\n          reason = \"\";\n          checkType = true;\n          stat = true;\n        } else if (key == \"grade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type Not Found\";\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //check ripenesslevel\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\n          let allowedRipenessLevel = [0, 1, 2, 3];\n          if (\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\n            newValue == \"\"\n          ) {\n            checkType = true;\n            stat = true;\n            reason = \"\";\n            if (newValue == \"\") {\n              newValue = \"\";\n            }\n          } else {\n            checkType = false;\n            stat = false;\n            reason = \"Undefined Ripeness Level\";\n          }\n        }\n\n        //check date\n        if (data.type == \"date_indo\") {\n          //checking date\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\n          if (newValue.match(regex_date)) {\n            checkType = true;\n            stat = true;\n          } else if (newValue == \"\") {\n            checkType = true;\n            stat = true;\n          } else {\n            reason = `Date format must be 'dd-mm-yyyy'`;\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //set notif\n        row[keyReason] = reason;\n        if (stat && checkType) {\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\n          if (!specialKey.includes(key)) {\n            //some key have their own checking, so if not in array do checking error\n            row[keyStatus] = true;\n            setCheckingCsv();\n          }\n        } \n         \n        return {\n          valid: stat && checkType ? true : false,\n          message: reason,\n        };\n      };\n\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n        let txt = row[keyReason];\n        \n        // if status column = false\n        // that mean there's error or not valid data in some column\n        if (row[keyStatus] === false) {\n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {txt}\n              </span>\n            </div>\n          );\n        }\n\n        // if global row status = false\n        // that mean there's wmsposkucode validation error, and makes 1 line become red colour\n        // for now is only for stock transfer  \n        if ( transaction==\"stockTransfer\" &&  row['rowStatus'] === false) { \n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {row['rowReason']}\n              </span>\n            </div>\n          );\n        }\n\n        \n        // if status column = true\n        // No problem \n        return (\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\n            {cell}\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\n              {txt}\n            </span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n    console.clear();  \n    console.log(globalData)\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={globalData}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          cellEdit={\n            editable === true\n              ? cellEditFactory({\n                  mode: \"click\",\n                  blurToSave: true,\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\n                })\n              : null\n          }\n          bordered={false}\n          hiddenRows={hiddenRows}\n          key={keyy}\n        />\n      </CCard>\n    );\n  }\n}\n\nclass TableResult extends React.Component {\n  render() {\n    const { columns, tableClass, data } = this.props;\n\n    const newFormat = columns.map((data, index) => {\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\n          return (\n            <div className=\"tooltip-custom red\">\n              {cell}\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\n            </div>\n          );\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\n          return (\n            <div className=\"green\">\n              {cell}\n              <span></span>\n            </div>\n          );\n        }\n\n        return (\n          <div>\n            {cell}\n            <span></span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={data}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          bordered={false}\n        />\n      </CCard>\n    );\n  }\n}\n\nexport { TableResult, TableEditable };\n"],"sourceRoot":""}