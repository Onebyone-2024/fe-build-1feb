{"version":3,"sources":["Page/StockEntry/AdditionalOutbound/Upload/services.js","Page/StockEntry/AdditionalOutbound/Upload/Review.jsx","Component/Modal/PopUp/index.jsx","Component/Modal/PopUp/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/BootstrapTable/index.jsx"],"names":["showErrorsOnly","_ref","csvData","csvField","isShowErrorOnly","setIsShowErrorOnly","setIsHiddenRows","setCheckingCsv","tmp_arr_false","tmp_arr_true","map","data","index","stat","i","dataColumn","indexColumn","key","dataField","includes","push","ret","filter","x","length","submit","async","dispatch","selectorStatus","setIsShowModal","setIsSubmitText","setSubmitStatus","_ref5","console","clear","header","time","Date","getTime","n","getMilliseconds","list_area","return_data","warehouse_source","warehouseSource","areaSource","id","warehouseDestination","areaDestination","list","createdAt","setHeader","skuList","available","forEach","idx","skuUuid","skuNumber","unitOfMeassures","uom","photo","photos","poList","getSKU","poGroup","groupingPO","header_index","wmsPoSkuCode","ripenessLevel","expiryDateCol","expiryDate","moment","toDate","inboundDate","supplierId","supplierUuid","supplierName","codeGrade","itemList","qty","pack","newPack","expiryDateText","ripeness","label","value","codeOutbound","outboundType","outboundTypeCode","note","outboundReason","areaName","jobPost","setJobPost","skuListData","skuListIdx","poGroupIndex","headerData","headerIdx","skuListDataIdx","execute","submitCsv","dataCsv","transaction","result","arrayResult","dataHeader","indexHeader","poHeader","indexPo","isStatus","isSuccess","uploadStatus","uploadStatusReason","message","setResult","type","STOK_TAKE_UPLOAD_JSON","csvDataResult","newSchema","text","sort","csvFieldResult","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","selectorOutboundType","outboundTypeCsv","status","isShowModal","React","useState","isHiddenRows","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","submitStatus","isSubmitText","useEffect","_ref4","undefined","stats","indexField","toUpperCase","checking_error","history","setCsvDataTmp","param","_ref3","setCsvData","createElement","className","TableEditable","globalData","columns","tableClass","hiddenRows","warehouseArea","style","backgroundColor","onClick","_ref2","new_arr","deleteErrorsField","lineHeight","goBack","class","PopUp","onCloseFunction","statusDisplay","title","cancelButtonTitle","actionButtonTitle","colorText","refreshOnCancel","msg1","msg2","cancelButtonClass","actionButtonClass","actionButtonEvent","ModalsCaptcha","submitText","show","refresh","icon","setIsSuccess","code","setShow","window","onkeydown","e","keyCode","CRow","concat","CCol","CModal","closeOnBackdrop","onClose","success","name","STATUS","size","minHeight","bodyOpenClassName","CModalHeader","CModalTitle","CModalBody","CModalFooter","CButton","location","reload","refreshPage","parentOncCloseFunction","next","isCaptcha","setIsValidated","setIsType","isType","isValidated","type_","document","getElementById","parseInt","focus","setSelectionRange","split","ModalsConfirmation","_module$jobPost","_module$jobPost2","_module$jobPost3","moduleEntry","confirmation","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","module","areaDestinationName","warehouseDestinationName","skuListUpdate","skuListUpdateCheck","newModule","po","item","_item$wasteType","_item$wasteType2","_item$wasteType3","_item$wasteType4","_item$wasteType5","_item$wasteType6","grade","_qty","isInteger","parseFloat","_sku","skuName","wasteType","_toWaste","_uom","newSku","sku","wqty","swqty","isExist","findIndex","_item$wasteType7","_item$wasteType8","s","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","characters","charactersLength","text_split","r","charAt","Math","floor","random","setIsCaptcha","isCaptchaText","setIsCaptchaText","autocomplete","onKeyUp","textTransform","maxLength","placeholder","Component","constructor","_this","super","this","changeOutboundReason","row","setTimeout","elem","classList","add","innerHTML","changeWarehouseUuid","column","columnName","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","obj","indexOf","validatePOSKU","idColumn","url","elemspan","axios","method","then","response","_response$data","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","remove","error","validatePOSKUStockTransfer","newValue","payloadPO","poSkuCode","_response$data2","_data$2","_data$3","_data$4","_data$5","_data$6","_data$7","_data$8","_data$9","_data$10","_data$11","_data$","isValid","errorMessage","_response$data3","_response$data4","_response$data5","skuDescription","tmpKey","keyy","setState","validateOutbountReason","tmp_data","datax","validateOutbountType","validateSKUNumber","rowData","arguments","newSkuData","_response$data6","imageMd","newGradeUom","validateStatus","validateResult","rowCount","triggerRender","bind","render","editable","warehousesData","_warehousesData$data","d","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","done","keyStatus","keyReason","reason","arr_grade","checkType","isNaN","regex_date","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","log","CCard","BootstrapTable","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered","TableResult"],"mappings":"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","file":"static/js/47.64097c96.chunk.js","sourcesContent":["//other\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\nimport { submitCsv } from \"apiServices\";\nimport moment from \"moment\";\n\nexport const showErrorsOnly = ({\n  csvData,\n  csvField,\n  isShowErrorOnly,\n  setIsShowErrorOnly,\n  setIsHiddenRows,\n  setCheckingCsv,\n}) => {\n  // ;\n  let tmp_arr_false = [];\n  let tmp_arr_true = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    let i = index + 1;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n\n    if (stat === false) {\n      if (!tmp_arr_false.includes(i)) {\n        tmp_arr_false.push(i);\n      }\n    } else {\n      if (!tmp_arr_true.includes(i)) {\n        tmp_arr_true.push(i);\n      }\n    }\n  });\n\n  //return array\n  let ret = [];\n  if (isShowErrorOnly === true) {\n    //true = delete all row\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\n    if (ret.length == csvData.length) {\n      return 0;\n    }\n  } else {\n    ret = [];\n  }\n  setIsHiddenRows(ret);\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\n  setCheckingCsv(true);\n};\n\nexport const deleteErrorsField = ({\n  csvData,\n  csvField,\n  dispatch,\n  setCheckingCsv,\n}) => {\n  let new_arr = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n    if (stat === true) {\n      new_arr.push(data);\n    }\n  });\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\n  setCheckingCsv(true);\n};\n\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\n  setCheckingCsv(true);\n};\n\nexport const checking_error = ({\n  csvData,\n  csvField,\n  setIsValidate,\n  setCheckingCsv,\n}) => {\n  if (csvData === undefined) {\n    return 0;\n  }\n  let stats = true;\n  csvData.map((data, index) => {\n    csvField.map((dataField, indexField) => {\n      let status = data[dataField.dataField + \"Status\"];\n\n      //jika outbound type = lainya, maka harus isi outbound reason\n      if (dataField.dataField == \"codeOutbound\") {\n        let type = data[dataField.dataField].toUpperCase();\n        if (type == \"LAINNYA\") {\n          if (data[\"outboundReason\"] == \"\") {\n            status = false;\n          }\n        }\n      }\n\n      if (status === false) {\n        stats = false;\n      }\n    });\n  });\n  if (stats === false) {\n    setIsValidate(false);\n  } else {\n    setIsValidate(true);\n  }\n  setCheckingCsv(false);\n};\n\nconst setHeader = (csvData) => {\n  //get time - created at\n  let time = new Date().getTime();\n  let d = new Date(time);\n  let n = d.getMilliseconds();\n  let list_area = [];\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    //in outbound csv upload only check area source\n    if (!list_area.includes(data.areaSource)) {\n      return_data.push({\n        id: index,\n        warehouseSource: warehouse_source,\n        warehouseDestination: warehouse_source,\n        areaSource: data.areaSource,\n        areaDestination: data.areaSource,\n        list: [],\n        createdAt: n,\n      });\n      list_area.push(data.areaSource);\n    }\n  });\n  return return_data;\n};\n\nconst getSKU = (csvData) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.skuUuid == data.skuUuid &&\n        header.warehouseSource == data.warehouseSource &&\n        header.areaSource == data.areaSource\n      ) {\n        available = true;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        warehouseSource: warehouse_source,\n        areaSource: data.areaSource,\n        skuUuid: data.skuUuid,\n        skuNumber: data.skuNumber,\n        unitOfMeassures: data.uom,\n        photo: data.photos,\n        poList: [],\n      });\n    }\n  });\n  return return_data;\n};\n\nconst groupingPO = (csvData, skuList) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    let header_index = \"\";\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.areaSource == data.areaSource &&\n        header.warehouseSource == data.warehouseSource &&\n        header.skuUuid == data.skuUuid &&\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\n        header.ripenessLevel == data.ripenessLevel &&\n        header.expiryDateCol == data.expiryDateCol\n      ) {\n        available = true;\n        header_index = idx;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        skuUuid: data.skuUuid || \"\",\n        areaSource: data.areaSource || \"\",\n        warehouseSource: warehouse_source || \"\",\n        expiryDateCol: data.expiryDateCol || \"\",\n        expiryDate:\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n        inboundDate: data.inboundDate || \"\",\n        supplierId: data.supplierUuid || \"\",\n        supplierName: data.supplierName || \"\",\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\n        codeGrade: data.skuUuid || \"\",\n        ripenessLevel: data.ripenessLevel || 0,\n        itemList: [],\n      });\n      header_index = return_data.length - 1;\n    }\n    return_data[header_index].itemList.push({\n      qty: data.qty || 0,\n      pack: data.newPack || \"\",\n      areaSource: data.areaSource,\n      expiryDate:\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n      expiryDateText: data.expiryDateCol,\n      skuNumber: data.skuNumber,\n      wmsPoSkuCode: data.wmsPoSkuCode,\n      ripeness: {\n        label: data.ripenessLevel || \"\",\n        value: data.ripenessLevel || 0,\n      },\n      codeOutbound: {\n        label: data.outboundType || \"\",\n        value: data.outboundTypeCode || \"\",\n      },\n      note: data.outboundReason || \"\",\n      areaName: data.areaName || \"\",\n    });\n  });\n  return return_data;\n};\n\nconst setJobPost = (header, skuList, poGroup) => {\n  //insert PO to SKUList\n  skuList.map((skuListData, skuListIdx) => {\n    poGroup.map((poGroup, poGroupIndex) => {\n      if (\n        poGroup &&\n        poGroup.areaSource == skuListData.areaSource &&\n        poGroup.warehouseSource == skuListData.warehouseSource &&\n        poGroup.skuUuid == skuListData.skuUuid\n      ) {\n        skuList[skuListIdx][\"poList\"].push(poGroup);\n      }\n    });\n  });\n\n  //insert sku to Header\n  header.map((headerData, headerIdx) => {\n    skuList.map((skuListData, skuListDataIdx) => {\n      if (\n        poGroup &&\n        headerData.areaSource == skuListData.areaSource &&\n        headerData.warehouseSource == skuListData.warehouseSource\n      ) {\n        header[headerIdx][\"list\"].push(skuListData);\n      }\n    });\n  });\n\n  return header;\n};\n\nconst setResult = (result) => {\n  let arrayResult = [];\n  let i = 1;\n  result.list.map((dataHeader, indexHeader) => {\n    dataHeader.poList.map((poHeader, indexPo) => {\n      poHeader.itemList.map((data, index) => {\n        let isStatus = \"Failed\";\n        if (data.isSuccess) {\n          isStatus = \"Success\";\n        }\n        arrayResult.push({\n          id: i,\n          uploadStatus: isStatus || \"\",\n          uploadStatusReason: data.message,\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\n          skuNumber: data.skuNumber || \"\",\n          expiryDateCol: data.expiryDateText || \"\",\n          ripenessLevel: data.ripeness.label || \"\",\n          qty: data.qty || 0,\n          outboundType: data.codeOutbound.label || \"\",\n          outboundReason: data.note || \"\",\n          areaName: data.areaName || \"\",\n          newPack: data.pack || \"\",\n        });\n        i++;\n      });\n    });\n  });\n  return arrayResult;\n};\n\nexport const submit = async ({\n  csvData,\n  csvField,\n  dispatch,\n  selectorStatus,\n  setIsShowModal,\n  setIsSubmitText,\n  setSubmitStatus,\n}) => {\n  setIsSubmitText(\"Loading...\");\n  console.clear();\n\n  //set header\n  let header = await setHeader(csvData);\n\n  //get list sku\n  let skuList = await getSKU(csvData);\n\n  //grouping PO\n  let poGroup = await groupingPO(csvData, skuList);\n\n  //set JobPost\n  let jobPost = await setJobPost(header, skuList, poGroup);\n\n  //submit\n  let execute = await submitCsv({\n    dataCsv: jobPost,\n    setSubmitStatus,\n    dispatch,\n    transaction: \"additionalOutbound\",\n  });\n  if (execute == \"error\") {\n    return 0;\n  }\n\n  //set result\n  let result = await setResult(execute?.data);\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\n\n  //renew schema for result\n  let newSchema = [];\n  newSchema.push({\n    dataField: \"uploadStatus\",\n    text: \"Upload Status\",\n    type: \"string\",\n    sort: true,\n  });\n  csvField.map((data, index) => {\n    newSchema.push(data);\n  });\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\n\n  setIsShowModal(false);\n  setIsSubmitText(\"Submit\");\n  setSubmitStatus(true);\n};\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { TableEditable } from \"Component/BootstrapTable\";\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\nimport \"../index.scss\";\nimport {\n  showErrorsOnly,\n  deleteErrorsField,\n  setCsvData,\n  submit,\n  checking_error\n} from \"./services.js\";\nimport PopUp from \"Component/Modal/PopUp\";\n\nconst Upload = (props) => {\n  const dispatch = useDispatch();\n\n  //selector\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const selectorCsvData = useSelector((state) => state.csvData);\n  const selectorCsvField = useSelector((state) => state.csvField);\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\n  const selectorOutboundType = useSelector((state) => state.outboundTypeCsv);\n  const selectorStatus = useSelector((state) => state.status);\n\n  //state\n  const [isShowModal, setIsShowModal] = React.useState(false);\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\n  const [isValidate, setIsValidate] = React.useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\n  const [submitStatus, setSubmitStatus] = React.useState(false);\n\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\n\n\n  useEffect(() => {\n    checking_error({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      setIsValidate,\n      setCheckingCsv\n    });\n  }, [checkingCsv]);\n\n  useEffect(() => {\n    if (submitStatus === true) {\n      props.history.push(\"/inventory-entry/additional-outbound/CSV-upload/result\");\n    }\n  }, [submitStatus]);\n\n  if (selectorCsvData === undefined || selectorCsvData === null) {\n    props.history.push(\"/inventory-entry/additional-outbound/CSV-upload\");\n    return 0;\n  }\n\n  const setCsvDataTmp = (param) => {\n    setCsvData({ param, dispatch, setCheckingCsv });\n    showErrorsOnly({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      isShowErrorOnly: false,\n      setIsShowErrorOnly,\n      setIsHiddenRows,\n      setCheckingCsv\n    })\n  };\n\n  return (\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\n      <TableEditable\n        globalData={selectorCsvData} //Required\n        columns={selectorCsvField} //Required\n        tableClass=\"reviewTable\"\n        hiddenRows={isHiddenRows}\n        warehouseArea={selectorWarehouseArea}\n        outboundType={selectorOutboundType}\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\n        setIsValidate={(param) => setIsValidate(param)}\n        dispatch={dispatch}\n        setCheckingCsv={setCheckingCsv}\n      />\n\n      <div className=\"row pt-3\">\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-3 mr-3 text no-shadow\"\n            style={{ backgroundColor: \"#fff\" }}\n            onClick={() =>\n              showErrorsOnly({\n                csvData: selectorCsvData,\n                csvField: selectorCsvField,\n                isShowErrorOnly,\n                setIsShowErrorOnly,\n                setIsHiddenRows,\n                setCheckingCsv\n              })\n            }\n          >\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn px-3 mr-3  text no-shadow\"\n            style={{ backgroundColor: \"#fff\" }}\n            onClick={() =>\n              deleteErrorsField({\n                csvData: selectorCsvData,\n                csvField: selectorCsvField,\n                dispatch,\n                setCheckingCsv\n              })\n            }\n          >\n            Delete Errors Field\n          </button>\n        </div>\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\n          Review your imported file: {selectorCsvFileName} (\n          {selectorCsvData.length || 0} Lines)\n        </div>\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\n            onClick={() => props.history.goBack()}\n          >\n            Discard\n          </button>\n\n          <button\n            type=\"button\"\n            class={\n              \"btn px-5 mr-3 text-white no-shadow float-right \"\n              + (isValidate === true && selectorCsvData?.length > 0 ? \"bg-green\" : \"bg-primaryGrey disabled\")\n            }\n            onClick={() => setIsShowModal(!isShowModal)}\n\n          >\n            Submit\n          </button>\n        </div>\n      </div>\n\n      <PopUp\n        status={selectorStatus}\n        onCloseFunction={() => {\n          setModalShow(false);\n          setSubmitStatus(false)\n        }}\n        statusDisplay={modalShow}\n        title={null}\n        cancelButtonTitle={null}\n        actionButtonTitle={null}\n        colorText={null}\n        refreshOnCancel={false}\n        msg1={null}\n        msg2={null}\n        cancelButtonClass={null}\n        actionButtonClass={null + \" ml-0\"}\n        actionButtonEvent={() => props.history.push(\"/inventory-entry/additional-outbound/CSV-upload\")}\n      />\n      <ModalsCaptcha\n        submit={() =>\n          submit({\n            dispatch,\n            csvData: selectorCsvData,\n            setIsShowModal,\n            setIsSubmitText,\n            setSubmitStatus,\n            csvField: selectorCsvField\n          })\n        }\n        submitText={isSubmitText}\n        show={isShowModal}\n        setIsShowModal={setIsShowModal}\n      />\n    </div>\n  );\n};\n\nexport default withRouter(Upload);\n","import React, { useState, useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { onClose, refreshPage } from \"./services.js\";\nimport { useDispatch } from \"react-redux\";\nimport { STATUS } from \"apiServices/action\";\n\nconst PopUp = ({\n  refresh,\n  status,\n  icon,\n  statusDisplay = false,\n  title = \"\",\n  cancelButtonTitle = \"Cancel\",\n  actionButtonTitle = \"Submit\",\n  cancelButtonClass = \"bg-background\",\n  actionButtonClass = \"bg-background\",\n  actionButtonEvent = null,\n  colorText = \"red\",\n  msg1 = null,\n  msg2 = null,\n  onCloseFunction = null,\n  refreshOnCancel = true,\n  setIsSuccess\n}) => {\n  const dispatch = useDispatch();\n  if (status?.code === 500 ) {\n    icon = \"em-pensive\"\n    title = \"Server Error\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = true;\n  }\n  if (status?.code === 408 ) {\n    icon = \"em-alarm_clock\"\n    title = \"Request Timeout\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = true;\n  }\n  if (status?.code === 400 ) {\n    icon = \"em-alarm_clock\"\n    title = \"Server Error\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = false;\n  }\n  if (status?.code === 404) {\n    title = \"Something wrong with the application\";\n    cancelButtonTitle = \"Try Again\";\n    actionButtonTitle = \"Contact Administration\";\n    colorText = \"red\";\n    msg1 = status?.message;\n    msg2 =\n      \"Please try again or contact Sayurbox administration for further information.\";\n    cancelButtonClass = \"bg-green\";\n    statusDisplay = true;\n    refreshOnCancel = false;\n  }\n\n  const [show, setShow] = useState(statusDisplay);\n\n  useEffect(() => {\n    //from outside change\n    setShow(statusDisplay);\n  }, [statusDisplay]);\n\n  useEffect(() => {\n  }, [show]);\n\n  window.onkeydown = e => e.keyCode === 27 ? setShow(false) : null\n  return (\n    <CRow className={`${show ? null : \"d-none\"}`}>\n      <CCol>\n        <CModal\n          show={show}\n          closeOnBackdrop={false}\n          onClose={() => {\n            setShow(false)\n            if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\n            dispatch({ type: STATUS, status: null });\n            if (onCloseFunction) {\n              onCloseFunction()\n            }\n          }}\n          size=\"lg\"\n          style={{ minHeight: \"280px\" }}\n          bodyOpenClassName=\"p-3\"\n        >\n          {/* <div className='d-flex flex-row-reverse'>\n            <i className='pr-2 pt-2 iconU-modalClose' onClick={() => setShow(false)}></i>\n          </div>\n          <CModalHeader className=\"px-5 pt-3 border-none\">\n              <CModalTitle className={`text LatoBold ${colorText}`}>\n                {title}\n              </CModalTitle> */}\n\n          <div className=\"d-flex flex-row-reverse\">\n            <i\n              className=\"pr-3 pt-3 iconU-modalClose\"\n              onClick={() => {\n                setShow(false)\n                if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\n                dispatch({ type: STATUS, status: null });\n                if (onCloseFunction) {\n                  onCloseFunction()\n                }\n              }}\n            ></i>\n          </div>\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className={`text LatoBold ${colorText}`}>\n              {title} <span><i className={`em ${icon}`}></i></span>\n            </CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">{msg1}</p>\n            <p className=\"text\">{msg2}</p>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            {cancelButtonTitle ? (\n              <CButton\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\n                onClick={() => {\n                  if (refreshOnCancel) {\n                    if (typeof (refresh) === 'function') refresh()\n                    else refreshPage({ refresh: true });\n                  } else {\n                    onClose({\n                      setShow,\n                      parentOncCloseFunction: onCloseFunction,\n                    });\n                  }\n                  dispatch({ type: STATUS, status: null });\n                }}\n              >\n                {cancelButtonTitle}\n              </CButton>\n            ) : null}\n            {actionButtonTitle ? (\n              <CButton\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\n                onClick={() => {\n                  if (actionButtonEvent) {\n                    actionButtonEvent();\n                    setShow(false);\n                  } else {\n                    setShow(false)\n                  }\n                }\n                }\n              >\n                {actionButtonTitle}\n              </CButton>\n            ) : null}{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default PopUp;\n","export const onClose = ({ setShow, parentOncCloseFunction }) => {\n  setShow(false);\n  if (parentOncCloseFunction) {\n    parentOncCloseFunction();\n  }\n\n};\n\nexport const refreshPage = ({ refresh = true }) => {\n  if (refresh === true) {\n    window.location.reload(false);\n  }\n};\n","import { isInteger } from \"formik\";\n\nexport const next = ({\n  e,\n  state,\n  isCaptcha,\n  setIsValidated,\n  setIsType,\n  isType,\n  isValidated,\n  submit\n}) => {\n  const key = e.key; // const {key} = event; ES6+\n  let type = [...isType];\n\n  //if press enter\n  if (key === \"Enter\"){\n    if(isValidated){\n      submit();\n    }else{\n      return;\n    }\n  }\n\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\",\"Delete\"];\n  if (arr_tmp.includes(key)) {\n    return 0;\n  } else if (key === \"Backspace\") {\n    let type_ = [...isType];\n    let state_ = type_[state];\n    if (state_ == \"\" && state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\n      type_[state - 1] = \"\";\n      type[state - 1] = \"\";\n    } \n  } else if (key === \"ArrowLeft\") {\n    if (state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) - 1))\n        .setSelectionRange(-1, -1);\n\n      return 0;\n    }\n  } else if (key === \"ArrowRight\") {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) + 1))\n        .setSelectionRange(-1, -1);\n      return 0;\n    }\n  } else {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n    }\n  }\n\n  if (key === \"Backspace\") {\n    type[state] = \"\";\n  } else {\n    type[state] = key.toUpperCase();\n  }\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\n  let allowedChar = char.split(\"\");\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\n    setIsType(type);\n  } else {\n    return 0;\n  }\n\n  let stat = true;\n  isCaptcha.map((data, index) => {\n    // if (index == 0) {\n    //   return;\n    // }\n    if (!(type[index + 1] == isCaptcha[index])) {\n      stat = false;\n    } \n  });\n  setIsValidated(stat);\n};\n\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\n  if (module?.length) {\n    let newModule = [];\n    module.map((list) => {\n      list.poList.map((po) => {\n        po.itemList.map((item) => {\n          const { qty, grade } = item;\n          const _qty = isInteger(qty)\n            ? parseInt(qty)\n            : !qty\n              ? 0\n              : parseFloat(qty);\n          const _sku = noSkuChecking\n            ? list.skuName\n            : moduleName === \"waste\"\n              ? item.wasteType?.label\n                ? item.wasteType?.label\n                : list.skuName\n              : grade?.label;\n          const _toWaste =\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\" ||\n                item.wasteType?.label === \"Waste\"\n                ? true\n                : false\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\n                ? true\n                : false;\n          const _uom = noSkuChecking\n            ? list.unitOfMeassures\n            : grade?.uom === \"gram\"\n              ? \"kg\"\n              : grade?.uom;\n          let newSku = {\n            sku: _sku,\n            qty: _qty,\n            uom: _uom,\n            wqty: 0,\n            swqty: 0,\n          };\n          if (_toWaste) {\n            newSku.qty = 0;\n            newSku.sku = list.skuName;\n          }\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Waste\"\n              : grade?.label === \"Waste\"\n          )\n            newSku.wqty = _qty;\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\"\n              : grade?.label === \"Semi Waste\"\n          )\n            newSku.swqty = _qty;\n          const isExist = newModule.findIndex(\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\n          );\n\n          if (moduleName !== \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (grade?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\n            }\n          }\n\n          if (moduleName === \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (item.wasteType?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (item.wasteType?.label === \"Waste\")\n                newModule[isExist].wqty += _qty;\n            }\n          }\n        });\n      });\n    });\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\n    const i = newModule.findIndex((s) => s.sku === skuName);\n    newModule.forEach((sku) => {\n      if (i !== -1) {\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\n      }\n    });\n    return newModule;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { useSelector } from \"react-redux\";\nimport { next, skuListUpdateCheck } from \"./services.js\";\nimport { totalQty } from \"Page/StockEntry/GeneralServices/moduleServices\";\n\nconst ModalsConfirmation = ({\n  moduleEntry,\n  confirmation,\n  setConfirmation,\n  save,\n  submit,\n  isSuccess,\n  isLoading,\n  moveAll,\n  setAction,\n  moduleName,\n  noSkuChecking,\n  singleViewData,\n}) => {\n  const dimention = document.documentElement.clientHeight;\n  const height = dimention - 300;\n\n  let buttonName = \"Submit\";\n\n  if (confirmation.name === \"save\") buttonName = \"Save\";\n  useEffect(() => {\n    if (isSuccess) setConfirmation({ show: false, name: null });\n  }, [isSuccess]);\n  window.onkeydown = (e) =>\n    e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null;\n\n  useEffect(() => {\n    setAction(confirmation.name);\n  }, [confirmation]);\n\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry;\n\n  const areaDestinationName = module?.jobPost?.areaDestinationName;\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName;\n  const areaName = module?.jobPost?.areaName;\n\n  const skuListUpdate = skuListUpdateCheck(\n    module?.jobPost.list,\n    noSkuChecking,\n    moduleName\n  );\n  return (\n    <CRow\n      className={\"modalConfirmation \" + (confirmation.show ? null : \"d-none\")}\n    >\n      <CCol>\n        <CModal show={confirmation.show} closeOnBackdrop={false}>\n          <CModalHeader className=\"px-4 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">\n              Confirmation{\" \"}\n              <span>\n                <i className=\"em em-pray\"></i>\n              </span>\n            </CModalTitle>\n            <label\n              tabIndex=\"0\"\n              onKeyDown={(e) =>\n                e.keyCode === 13\n                  ? setConfirmation({ show: false, name: null })\n                  : false\n              }\n              onClick={() => setConfirmation({ show: false, name: null })}\n              className=\"sku-item iconU-modalClose\"\n            />\n          </CModalHeader>\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\n            <p className=\"text mb-2\">\n              <span>{`Are you sure want to ${\n                areaName == \"Waste\" ? \"update\" : \"send\"\n              } this Item `}</span>\n              <span\n                className={` ${areaDestinationName ? null : \"d-none\"}`}\n              >{` from`}</span>\n              <span\n                className={`green ${areaDestinationName ? null : \"d-none\"}`}\n              >{` ${areaName} `}</span>\n              <span>\n                {moduleName == \"outbound\"\n                  ? \"from\"\n                  : moduleName === \"repack\"\n                  ? \"\"\n                  : \"to\"}{\" \"}\n              </span>\n              <span\n                className={`green ${moduleName !== \"repack\" ? null : \"d-none\"}`}\n              >{` ${\n                moduleName === \"stockTransfer\"\n                  ? warehouseDestinationName\n                  : areaDestinationName\n                  ? areaDestinationName\n                  : areaName\n              } `}</span>\n            </p>\n            <p className=\"text\">\n              Please double check this list, this record will store to database.\n            </p>\n            <div\n              style={{\n                minHeight: height,\n                maxHeight: height,\n                overflow: \"auto\",\n                border: \"1px solid var(--lineGrey)\",\n              }}\n            >\n              <table>\n                <thead>\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Weight\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Semi Waste\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Waste\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {skuListUpdate?.map((data) => (\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                      <td style={{ maxWidth: \"160px\" }}>{data.sku}</td>\n                      <td\n                        className=\"text-right py-3\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        {`${totalQty(data?.qty)}`}\n                      </td>\n                      <td\n                        className=\"text-right text-nowrap\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        <span className=\"text-nowrap\">{`${totalQty(\n                          data?.swqty\n                        )} `}</span>\n                      </td>\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\n                        {`${totalQty(data?.wqty)}`}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? setConfirmation({ show: false, name: null })\n                    : false\n                }\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\n                onClick={() => setConfirmation({ show: false, name: null })}\n              >\n                Cancel\n              </CButton>\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? isLoading\n                      ? null\n                      : confirmation.name === \"save\"\n                      ? save()\n                      : submit()\n                    : false\n                }\n                className={`${\n                  isLoading ? \"bg-softGreen text\" : \"bg-green text-white\"\n                } no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\n                onClick={() =>\n                  isLoading\n                    ? null\n                    : confirmation.name === \"save\"\n                    ? save()\n                    : submit()\n                }\n              >\n                {isLoading ? \"Processing...\" : buttonName}\n              </CButton>{\" \"}\n            </div>\n          </CModalBody>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst ModalsCaptcha = ({\n  show = false,\n  setIsShowModal,\n  submit,\n  submitText = \"Submit\",\n}) => {\n  //random text\n  var text = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var charactersLength = characters.length;\n  var text_split = [];\n  for (var i = 0; i < 3; i++) {\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\n    text += r;\n    text_split.push(r);\n  }\n\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\n  const [isValidated, setIsValidated] = React.useState(false);\n  const [isType, setIsType] = React.useState([]);\n\n  //reset if visible = false\n  useEffect(() => {\n    if (show === true) {\n      document.getElementById(\"t1\").value = \"\";\n      document.getElementById(\"t2\").value = \"\";\n      document.getElementById(\"t3\").value = \"\";\n    }\n  }, [show]);\n\n  return (\n    <CRow className={show ? null : \"d-none\"}>\n      <CCol>\n        <CModal\n          show={show}\n          onClose={() => {\n            setIsShowModal(false);\n          }}\n          size=\"lg\"\n          style={{ height: \"400px\" }}\n        >\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\n              {selectorCsvFileName}?\n            </p>\n            <p className=\"text\">\n              Once uploaded this record will store to databases.\n            </p>\n            <p className=\"text mb-2\">\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\n            </p>\n\n            <div className=\"captcha-box\">\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 1,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t1\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[0]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 2,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t2\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input ml-0 mr-0\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[1]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 3,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t3\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[2]}\n              />\n            </div>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            <CButton\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\n              onClick={() => {\n                setIsShowModal(false);\n              }}\n            >\n              Cancel\n            </CButton>\n            <CButton\n              className={\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\n              }\n              onClick={() => {\n                submit();\n                setIsValidated(false);\n              }}\n            >\n              {submitText}\n            </CButton>{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport { ModalsConfirmation, ModalsCaptcha };\n","import React from \"react\";\nimport { CCard } from \"@coreui/react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"./bootstrapTable-style.scss\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport axios from \"axios\";\n\n//cell editable\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\n\nclass TableEditable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validateStatus: false,\n      validateResult: \"Please Wait...\",\n      globalData: this.props.globalData,\n      rowCount: 0,\n      keyy: 0,\n      triggerRender: 0\n    };  \n    this.validatePOSKUStockTransfer = this.validatePOSKUStockTransfer.bind(this);\n    this.validateSKUNumber = this.validateSKUNumber.bind(this);\n    \n  } \n  changeOutboundReason = (row) => {\n    setTimeout(() => {\n      let elem = document.getElementById(`row${row}-outboundReason`);\n      elem.classList.add(\"red\", \"tooltip-custom\");\n      elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\n    }, 300);\n  }\n\n  changeWarehouseUuid = (\n    value,\n    column,\n    columnName,\n    row,\n    warehouseCodeList,\n    warehouseUuidList,\n    warehouseNameList\n  ) => {\n    const { setCsvDataTmp, globalData } = this.props;\n    let tmpdata = globalData;\n    var index = tmpdata.findIndex((obj) => obj.id == row);\n    let i = warehouseCodeList.indexOf(value);\n    tmpdata[index][column] = warehouseUuidList[i];\n    tmpdata[index][columnName] = warehouseNameList[i];\n\n    console.clear() \n    setTimeout(async () => {\n      setCsvDataTmp(tmpdata);\n    }, 400);\n  };\n\n  validatePOSKU = async (id, row, idColumn) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;\n    if(transaction==\"additional_inbound\"){\n      return;\n    }\n\n    let tmpdata = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/stocktake/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        elem.classList.add(\"red\");\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          var index = tmpdata.findIndex((obj) => obj.id == row);\n          if (data[0] && data[0].isExist === true) {\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\n            tmpdata[index].wmsPoSkuCodeStatus = true;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = data[0].expiryDate;\n            tmpdata[index].inboundDate = data[0].inboundDate;\n            tmpdata[index].supplierName = data[0].supplierName;\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\n            tmpdata[index].uom = data[0].uom;\n            tmpdata[index].photos = data[0].photos;\n            elem.classList.remove(\"red\");\n            elem.classList.add(\"hiddenTooltip\");\n          } else {\n            tmpdata[index].wmsPoSkuCodeStatus = false;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = \"\";\n            tmpdata[index].inboundDate = \"\";\n            tmpdata[index].supplierName = \"\";\n            tmpdata[index].supplierUuid = \"\";\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\n          }\n          setCsvDataTmp(tmpdata);\n        });\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validatePOSKUStockTransfer = async (newValue, row, idColumn, key) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;  \n    let tmpdata = globalData;\n    \n    var index = tmpdata.findIndex((obj) => obj.id == row.id); \n    // console.log(tmpdata)\n    // console.log(row.id, row)\n    // console.log(index)\n\n    try {\n      const url = \"/stocktransfer/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      let payloadPO = [{\n        \"id\": row.id,\n        \"poSkuCode\": key==\"wmsPoSkuCode\" ? newValue : (row.poSkuCode?row.poSkuCode:\"\"),\n        \"skuNumber\": key==\"skuNumber\"? newValue?.skuNumber: row.skuNumber,\n        \"skuUuid\": key==\"skuNumber\"? newValue?.skuUuid:row.skuUuid,\n        \"warehouseSource\": row.warehouseSource,\n        \"areaSource\": row.areaSource,\n        \"weight\": key==\"qty\"?newValue:row.qty\n      }]; \n\n      setTimeout(async () => {\n        //setvalidate false\n        setIsValidate(false);\n\n        //elemen column\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        // elem.classList.remove(\"hiddenTooltip\");\n        // elem.classList.add(\"red\");  \n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: payloadPO },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          if (data[0]) {\n            if(data[0].isExist === true && data[0].isValid === true){\n              tmpdata[index]['rowStatus'] = true;\n              tmpdata[index]['rowReason'] = \"\";\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }else{\n              tmpdata[index]['rowStatus'] = false;\n              tmpdata[index]['rowReason'] = data[0]?.errorMessage;\n            }\n            tmpdata[index]['wmsPoSkuCode'] = data[0]?.wmsPoSkuCode ;\n            tmpdata[index]['wmsPoSkuCodeStatus'] = data[0]?.isExist && data[0]?.isValid;\n            tmpdata[index]['wmsPoSkuCodeReason'] = data[0]?.errorMessage;\n            tmpdata[index]['expiryDate'] = data[0]?.expiryDate;\n            tmpdata[index]['inboundDate'] = data[0]?.inboundDate;\n            tmpdata[index]['supplierName'] = data[0]?.supplierName;\n            tmpdata[index]['supplierUuid'] = data[0]?.supplierUuid;\n            tmpdata[index]['uom'] = data[0]?.uom;\n            tmpdata[index]['photos'] = data[0]?.photos;\n          } else {\n            tmpdata[index]['wmsPoSkuCodeStatus'] = false;\n            tmpdata[index]['wmsPoSkuCodeReason'] = response?.data?.message;\n            tmpdata[index]['expiryDate'] = \"\";\n            tmpdata[index]['inboundDate'] = \"\";\n            tmpdata[index]['supplierName'] = \"\";\n            tmpdata[index]['supplierUuid'] = \"\";\n            tmpdata[index]['rowStatus'] = false;\n            tmpdata[index]['rowReason'] = response?.data?.message;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = response?.data?.message;\n          } \n\n          if(key==\"skuNumber\"){ \n            tmpdata[index][\"skuNumber\"] = newValue.skuNumber;\n            tmpdata[index][\"skuNumberReason\"] = newValue.skuDescription;\n            tmpdata[index][\"skuNumberStatus\"] = true;\n            tmpdata[index][\"skuUuid\"] = newValue.skuUuid;\n          }\n          setCsvDataTmp(tmpdata); \n        }); \n        let tmpKey = this.state.keyy + 1; \n        this.setState({keyy: tmpKey}); \n      }, 500);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validateOutbountReason = (value, row, idColumn) => {\n    const { globalData } = this.props;\n    let tmp_data = globalData;\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\n      this.changeOutboundReason(row)\n    }\n  };\n\n  validateOutbountType = (value, row, idColumn) => {\n    const { globalData, setIsValidate } = this.props;\n    let tmp_data = globalData;\n    setIsValidate(false);\n    if (value.toUpperCase() !== \"LAINNYA\") {\n      setIsValidate(true);\n      return 0;\n    }\n\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (datax[\"outboundReason\"] == \"\") {\n      this.changeOutboundReason(row);\n    }\n  };\n\n  validateSKUNumber = async (id, row, idColumn, key, rowData = null) => {\n    const { globalData, setCsvDataTmp, setIsValidate,transaction } = this.props;\n    let tmp_data = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/oss/skuByNumbers\";\n      let elem = null;\n      let elemspan = null;\n      \n      // for validating stock transfer\n      let stats = false;\n      let newSkuData = {} \n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { skuList: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          let isSuccess = response.data.isSuccess;\n          var index = tmp_data.findIndex((obj) => obj.id == row);\n          if (isSuccess === true && data.length > 0) {\n            stats = true;\n            tmp_data[index][key] = data[0].skuNumber;\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\n            tmp_data[index][key + \"Status\"] = true;\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\n            newSkuData = {\n              skuUuid: data[0].id,\n              skuNumber: data[0].skuNumber,\n              skuDescription: data[0].skuDescription,\n              photo: data[0].photo\n            }\n\n            //custom\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = data[0].id;\n              tmp_data[index].photo = data[0].imageMd;\n            }\n\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = data[0].uom;\n            }\n            \n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = data[0].uom;\n            }\n\n            \n            if(transaction!==\"stockTransfer\"){\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }\n\n          } else {\n            stats = false;\n            tmp_data[index][key] = id;\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\n            tmp_data[index][key + \"Status\"] = false;\n            tmp_data[index][key + \"Uuid\"] = null;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"SKU Number Not Found\";\n\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = \"\";\n              tmp_data[index].photo = \"\";\n            }\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = null;\n            }\n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = \"\";\n            }\n          } \n        });\n\n        if(transaction==\"stockTransfer\" && stats === true){ \n          this.validatePOSKUStockTransfer(newSkuData, rowData, idColumn, 'skuNumber')\n        }else{\n          setCsvDataTmp(tmp_data);\n        }\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  render() {\n    const {\n      columns,\n      hiddenRows,\n      tableClass,\n      warehouseArea,\n      outboundType,\n      setCheckingCsv, \n      editable = true,\n      warehousesData = [],\n      transaction,\n      globalData\n    } = this.props;\n    let { validateStatus,  keyy } = this.state;\n    \n    //wh\n    let warehouseCodeList = [];\n    let warehouseUuidList = [];\n    let warehouseNameList = [];\n    if (warehousesData) {\n      let tmp = warehousesData?.data?.map((d) => {\n        warehouseCodeList.push(d.code);\n        warehouseUuidList.push(d.id);\n        warehouseNameList.push(d.name);\n      });\n    }\n\n    //wh area\n    let wh_area_label =\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\n    let wh_outboundtype_label = !outboundType\n      ? []\n      : outboundType.map((data) => data.label.toUpperCase());\n    let wh_outboundtype_value = !outboundType\n      ? []\n      : outboundType.map((data) => data.value);\n    const newFormat = columns.map((data, index) => {\n      data.validator = (newValue, row, column, done) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let reason = null;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n\n        let stockTransferColumnCheck = ['wmsPoSkuCode', 'qty']\n        if (stockTransferColumnCheck.includes(key) && transaction==\"stockTransfer\") {\n          this.validatePOSKUStockTransfer(newValue, row, idColumn, key);\n          stat = true;\n        }else if(key == \"wmsPoSkuCode\" ){\n          this.validatePOSKU(newValue, row.id, idColumn, key);\n          stat = true; \n        }\n\n        if (key == \"skuNumber\") {\n          this.validateSKUNumber(newValue, row.id, idColumn, key, row);\n          stat = true;\n        }\n\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type not found\";\n            checkType = false;\n            stat = false;\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        } else if (key == \"newGrade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            //if not waste or semi waste\n            if (parseInt(newValue)) {\n              //if number\n              stat = true;\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\n            } else if (newValue == \"\") {\n              row[\"newGradeUuid\"] = null;\n              row[\"newGradeUom\"] = null;\n              stat = true;\n            } else {\n              //if not number => undefined\n              reason = \"Grade Undefined\";\n              checkType = false;\n              stat = false;\n            }\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        }\n\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Outbound Type Not Found`;\n          } else {\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\n            stat = true;\n            this.validateOutbountType(newValue, row.id, idColumn);\n          }\n        }\n\n        if (key == \"outboundReason\") {\n          this.validateOutbountReason(newValue, row.id, idColumn);\n        }\n\n        if (key == \"warehouse\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseUuid\",\n              \"warehouseName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          }\n        }\n        if (key == \"warehouseDestination\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseDestinationUuid\",\n              \"warehouseDestinationName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          } \n        }\n\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Warehouse Area Not Found`;\n          } else {\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\n            if (key == \"areaNameDestination\") {\n              row[\"areaDestination\"] = wh_area_value[i];\n            } else {\n              row[\"areaSource\"] = wh_area_value[i];\n            }\n            stat = true;\n          }\n        }\n\n        if (key == \"newPack\") {\n          let checkTypenewPack = isNaN(newValue) ? false : true;\n          if (!checkTypenewPack) {\n            stat = false;\n            reason = `Pack Should be a number`;\n          } else {\n            stat = true;\n          }\n        } \n        \n\n        let checkType = null;\n        if (data.type == \"number\") {\n          checkType = isNaN(newValue) ? false : true;\n        } else {\n          checkType = true;\n        }\n        if (checkType === false) {\n          reason = `${data.text} Should be a ${data.type}`;\n        } \n\n        \n        if (key == \"wmsPoSkuCode\" && transaction == \"stockTransfer\") {\n          if(isNaN(newValue)){\n            checkType = false;\n            reason = `${data.text} Should be a number`;\n            stat = false;\n          } \n        } \n\n        //some field can null\n        let canNull = [\n          \"grade\",\n          \"outboundReason\",\n          \"ripenessLevel\",\n          \"newRipeness\",\n          \"reason\",\n          \"expiryDate\"\n        ]; \n\n        if (canNull.includes(key) && newValue === \"\") {\n          reason = \"\";\n          checkType = true;\n          stat = true;\n        } else if (key == \"grade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type Not Found\";\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //check ripenesslevel\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\n          let allowedRipenessLevel = [0, 1, 2, 3];\n          if (\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\n            newValue == \"\"\n          ) {\n            checkType = true;\n            stat = true;\n            reason = \"\";\n            if (newValue == \"\") {\n              newValue = \"\";\n            }\n          } else {\n            checkType = false;\n            stat = false;\n            reason = \"Undefined Ripeness Level\";\n          }\n        }\n\n        //check date\n        if (data.type == \"date_indo\") {\n          //checking date\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\n          if (newValue.match(regex_date)) {\n            checkType = true;\n            stat = true;\n          } else if (newValue == \"\") {\n            checkType = true;\n            stat = true;\n          } else {\n            reason = `Date format must be 'dd-mm-yyyy'`;\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //set notif\n        row[keyReason] = reason;\n        if (stat && checkType) {\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\n          if (!specialKey.includes(key)) {\n            //some key have their own checking, so if not in array do checking error\n            row[keyStatus] = true;\n            setCheckingCsv();\n          }\n        } \n         \n        return {\n          valid: stat && checkType ? true : false,\n          message: reason,\n        };\n      };\n\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n        let txt = row[keyReason];\n        \n        // if status column = false\n        // that mean there's error or not valid data in some column\n        if (row[keyStatus] === false) {\n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {txt}\n              </span>\n            </div>\n          );\n        }\n\n        // if global row status = false\n        // that mean there's wmsposkucode validation error, and makes 1 line become red colour\n        // for now is only for stock transfer  \n        if ( transaction==\"stockTransfer\" &&  row['rowStatus'] === false) { \n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {row['rowReason']}\n              </span>\n            </div>\n          );\n        }\n\n        \n        // if status column = true\n        // No problem \n        return (\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\n            {cell}\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\n              {txt}\n            </span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n    console.clear();  \n    console.log(globalData)\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={globalData}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          cellEdit={\n            editable === true\n              ? cellEditFactory({\n                  mode: \"click\",\n                  blurToSave: true,\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\n                })\n              : null\n          }\n          bordered={false}\n          hiddenRows={hiddenRows}\n          key={keyy}\n        />\n      </CCard>\n    );\n  }\n}\n\nclass TableResult extends React.Component {\n  render() {\n    const { columns, tableClass, data } = this.props;\n\n    const newFormat = columns.map((data, index) => {\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\n          return (\n            <div className=\"tooltip-custom red\">\n              {cell}\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\n            </div>\n          );\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\n          return (\n            <div className=\"green\">\n              {cell}\n              <span></span>\n            </div>\n          );\n        }\n\n        return (\n          <div>\n            {cell}\n            <span></span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={data}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          bordered={false}\n        />\n      </CCard>\n    );\n  }\n}\n\nexport { TableResult, TableEditable };\n"],"sourceRoot":""}