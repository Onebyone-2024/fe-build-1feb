{"version":3,"sources":["Page/StockEntry/AdditionalInbound/Upload/Review.jsx","Page/StockEntry/AdditionalInbound/Upload/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/BootstrapTable/index.jsx","Page/ConfigModules/Settings/services.js"],"names":["withRouter","props","dispatch","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","csvData","selectorCsvField","csvField","selectorWarehouseArea","warehouseAreaCsv","selectorStatus","status","warehousesData","warehouseData","isShowModal","setIsShowModal","React","useState","isHiddenRows","setIsHiddenRows","isShowErrorOnly","setIsShowErrorOnly","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","setCheckingCsv","submitStatus","setSubmitStatus","title","setTitle","msg1","setMsg1","msg2","setMsg2","cancelButtonTitle","setCancelButtonTitle","actionButtonTitle","setActionButtonTitle","isSubmitText","setIsSubmitText","cancelButtonClass","setCancelButtonClass","actionButtonClass","setActionButtonClass","colourTitle","setColourTitle","newCsvData","setNewCsvData","rowDouble","setRowDouble","useEffect","_ref4","undefined","stats","map","data","index","dataField","indexField","checking_error","_ref6","skuNumberArray","skuData","csvDataValidated","idx","includes","skuNumber","push","objName","dataArraySku","pushData","d","i","warehouseDestination","id","warehouseDestinationStatus","skuNumberStatus","wmsPoSkuCodeStatus","skuDescriptionStatus","categoryStatus","expiryDateColStatus","qtyStatus","warehouseDestinationReason","skuNumberReason","wmsPoSkuCodeReason","skuDescriptionReason","categoryReason","expiryDateColReason","qtyReason","tmp","console","log","validasiDouble","message","history","setCsvDataTmp","param","_ref3","type","STOK_TAKE_UPLOAD_JSON","setCsvData","createElement","className","TableEditable","globalData","columns","tableClass","hiddenRows","warehouseArea","transaction","dataDoubleRow","style","lineHeight","length","onClick","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","actionButtonEvent","ModalsCaptcha","submit","async","_ref5","clear","submitText","show","next","_ref","e","isCaptcha","setIsValidated","setIsType","isType","isValidated","key","type_","document","getElementById","parseInt","focus","value","setSelectionRange","toUpperCase","split","stat","ModalsConfirmation","_module$jobPost","_module$jobPost2","_module$jobPost3","moduleEntry","confirmation","setConfirmation","save","isSuccess","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","name","window","onkeydown","keyCode","module","areaDestinationName","jobPost","warehouseDestinationName","areaName","skuListUpdate","skuListUpdateCheck","newModule","list","poList","po","itemList","item","_item$wasteType","_item$wasteType2","_item$wasteType3","_item$wasteType4","_item$wasteType5","_item$wasteType6","qty","grade","_qty","isInteger","parseFloat","_sku","skuName","wasteType","label","_toWaste","_uom","unitOfMeassures","uom","newSku","sku","wqty","swqty","isExist","findIndex","_item$wasteType7","_item$wasteType8","s","forEach","CRow","CCol","CModal","closeOnBackdrop","CModalHeader","CModalTitle","tabIndex","onKeyDown","CModalBody","minHeight","concat","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","CButton","_ref2","text","characters","charactersLength","text_split","r","charAt","Math","floor","random","setIsCaptcha","isCaptchaText","setIsCaptchaText","onClose","size","autocomplete","onKeyUp","textTransform","maxLength","placeholder","CModalFooter","Component","constructor","_this","super","this","changeOutboundReason","row","setTimeout","elem","classList","add","innerHTML","changeWarehouseUuid","column","columnName","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","obj","indexOf","validatePOSKU","idColumn","url","elemspan","axios","method","then","response","_response$data","wmsPoSkuCode","expiryDate","inboundDate","supplierName","supplierUuid","photos","remove","error","validatePOSKUStockTransfer","newValue","payloadPO","poSkuCode","skuUuid","warehouseSource","areaSource","_response$data2","_data$2","_data$3","_data$4","_data$5","_data$6","_data$7","_data$8","_data$9","_data$10","_data$11","_data$","isValid","errorMessage","_response$data3","_response$data4","_response$data5","skuDescription","tmpKey","keyy","setState","validateOutbountReason","tmp_data","datax","validateOutbountType","validateSKUNumber","rowData","arguments","newSkuData","skuList","_response$data6","photo","imageMd","newGradeUom","validateStatus","validateResult","rowCount","triggerRender","bind","render","outboundType","editable","_warehousesData$data","code","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","done","keyStatus","keyReason","reason","arr_grade","checkType","isNaN","regex_date","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","CCard","BootstrapTable","keyField","sort","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","bordered","TableResult","activeStockTableHeader","width","Header","accessor","display","justifyContent","headerClassName","activeStockTableHeaderDetail"],"mappings":"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","file":"static/js/53.e949a2bd.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport FileUploader from \"Component/FileUploader\";\nimport { TableEditable } from \"Component/BootstrapTable\";\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\nimport \"../index.scss\";\nimport {\n  showErrorsOnly,\n  deleteErrorsField,\n  setCsvData,\n  submit,\n  checking_error,\n  validasiDouble\n} from \"./services.js\";\nimport PopUp from \"Component/Modal/PopUp\";\n\nconst Upload = (props) => {\n  const dispatch = useDispatch();\n\n  //selector\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const selectorCsvData = useSelector((state) => state.csvData);\n  const selectorCsvField = useSelector((state) => state.csvField);\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\n  const selectorStatus = useSelector((state) => state.status);\n  const warehousesData = useSelector((state) => state.warehouseData);\n\n  //state\n  const [isShowModal, setIsShowModal] = React.useState(false);\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\n  const [isValidate, setIsValidate] = React.useState(true);\n  const [modalShow, setModalShow] = React.useState(false);\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\n  const [submitStatus, setSubmitStatus] = React.useState(false);\n\n  const [title, setTitle] = React.useState(null);\n  const [msg1, setMsg1] = React.useState(null);\n  const [msg2, setMsg2] = React.useState(null);\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\n  const [cancelButtonClass, setCancelButtonClass] = React.useState(null);\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\n  const [colourTitle, setColourTitle] = React.useState(null);\n  const [newCsvData, setNewCsvData] = React.useState([]);\n  const [rowDouble, setRowDouble] = React.useState([]);\n\n  // console.log(selectorWarehouseArea);\n  // console.log(selectorCsvField);\n  // console.log(selectorCsvData);\n\n  useEffect(() => {\n    setCheckingCsv(false);\n    checking_error({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      setIsValidate,\n      setCheckingCsv\n    });\n  }, [checkingCsv]);\n\n  useEffect(() => { }, [selectorCsvData]);\n\n  useEffect(() => {\n    validasiDouble({\n      selectorCsvData,\n      dispatch,\n      setNewCsvData,\n      setRowDouble,\n    });\n  }, [selectorCsvData]);\n  \n  useEffect(() => {\n    if (submitStatus === 'success') {\n      setActionButtonTitle('Done');\n      setCancelButtonTitle('');\n      setMsg1(selectorCsvFileName + ' upload successfull. ');\n      setMsg2('Would you import another file?');\n      setTitle('Success');\n      setActionButtonClass('bg-green background ml-0');\n      setColourTitle('green');\n      setModalShow(true);\n    } else if (submitStatus === 'failed') {\n      setActionButtonTitle('Retry');\n      setCancelButtonTitle('Cancel');\n      setMsg1(selectorStatus?.message);\n      setMsg2('do you want to retry?');\n      setTitle('Failed!');\n      setActionButtonClass('bg-red background ml-0');\n      setColourTitle('red');\n      setModalShow(true);\n    }\n  }, [submitStatus]);\n\n  useEffect(() => {\n    if (submitStatus === true) {\n      props.history.push(\"/inventory-entry/additional-inbound/CSV-upload/result\");\n    }\n  }, [submitStatus]);\n\n  if (selectorCsvData === undefined || selectorCsvData === null) {\n    props.history.push(\"/inventory-entry/additional-inbound/CSV-upload\");\n    return 0;\n  }\n\n  const setCsvDataTmp = (param) => {\n    setCsvData({ param, dispatch, setCheckingCsv });\n  };\n   \n  return (\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\n      <TableEditable\n        globalData={newCsvData} //Required\n        columns={selectorCsvField} //Required\n        tableClass=\"reviewTable\"\n        hiddenRows={isHiddenRows}\n        warehouseArea={selectorWarehouseArea}\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\n        setIsValidate={(param) => setIsValidate(param)}\n        dispatch={dispatch}\n        setCheckingCsv={setCheckingCsv}\n        warehousesData={warehousesData}\n        transaction={\"additional_inbound\"}\n        dataDoubleRow={rowDouble}\n      />\n\n      <div className=\"row pt-3\">\n        <div className=\"col-4\">\n          \n        </div>\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\n          Review your imported file: {selectorCsvFileName} (\n          {selectorCsvData.length || 0} Lines)\n        </div>\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\n            onClick={() => props.history.goBack()}\n          >\n            Discard\n          </button>\n\n          <button\n            type=\"button\"\n            class={\n              \"btn px-5 mr-3 text-white no-shadow float-right bg-green\"\n            }\n            onClick={() => setIsShowModal(!isShowModal)}\n          >\n            Submit\n          </button>\n        </div>\n      </div>\n\n      <PopUp\n        status={selectorStatus}\n        onCloseFunction={() => {\n          setModalShow(false);\n          setSubmitStatus(false)\n        }}\n        statusDisplay={modalShow}\n        title={title}\n        cancelButtonTitle={cancelButtonTitle}\n        actionButtonTitle={actionButtonTitle}\n        colorText={colourTitle}\n        refreshOnCancel={false}\n        msg1={msg1}\n        msg2={msg2}\n        cancelButtonClass={cancelButtonClass}\n        actionButtonClass={actionButtonClass + \" ml-0\"}\n        actionButtonEvent={() => props.history.push(\"/inventory-entry/additional-inbound/CSV-upload\")}\n      />\n      <ModalsCaptcha\n        submit={() =>\n          submit({\n            dispatch,\n            csvData: selectorCsvData,\n            setIsShowModal,\n            setIsSubmitText,\n            setSubmitStatus,\n            csvField: selectorCsvField,\n          })\n        }\n        submitText={isSubmitText}\n        show={isShowModal}\n        setIsShowModal={setIsShowModal}\n      />\n    </div>\n  );\n};\n\nexport default withRouter(Upload);\n","//other\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\nimport { submitCsvInbound } from \"apiServices\";\nimport moment from \"moment\";\nimport { data } from \"Page/ConfigModules/Settings/services\";\n\nexport const showErrorsOnly = ({\n  csvData,\n  csvField,\n  isShowErrorOnly,\n  setIsShowErrorOnly,\n  setIsHiddenRows,\n  setCheckingCsv,\n}) => {\n  // ;\n  let tmp_arr_false = [];\n  let tmp_arr_true = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    let i = index + 1;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n\n    if (stat === false) {\n      if (!tmp_arr_false.includes(i)) {\n        tmp_arr_false.push(i);\n      }\n    } else {\n      if (!tmp_arr_true.includes(i)) {\n        tmp_arr_true.push(i);\n      }\n    }\n  });\n\n  //return array\n  let ret = [];\n  if (isShowErrorOnly === true) {\n    //true = delete all row\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\n    if (ret.length == csvData.length) {\n      return 0;\n    }\n  } else {\n    ret = [];\n  }\n  setIsHiddenRows(ret);\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\n  setCheckingCsv(true);\n};\n\nexport const deleteErrorsField = ({\n  csvData,\n  csvField,\n  dispatch,\n  setCheckingCsv,\n}) => {\n  let new_arr = [];\n  let tmp = null;\n  csvData.map((data, index) => {\n    let stat = true;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      let i = index + 1;\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n    if (stat === true) {\n      new_arr.push(data);\n    }\n  });\n\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\n  setCheckingCsv(true);\n};\n\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\n  setCheckingCsv(true);\n};\n\nexport const checking_error = ({\n  csvData,\n  csvField,\n  setIsValidate,\n  setCheckingCsv,\n}) => {\n  if (csvData === undefined) {\n    return 0;\n  }\n  let stats = true;\n  csvData.map((data, index) => {\n    csvField.map((dataField, indexField) => {\n      let status = data[dataField.dataField + \"Status\"];\n      if (status === false) {\n        stats = false;\n      }\n    });\n  });\n  if (stats === false) {\n    setIsValidate(false);\n  } else {\n    setIsValidate(true);\n  }\n  setCheckingCsv(false);\n};\n\nconst setHeader = (csvData) => {\n  //get time - created at\n  let time = new Date().getTime();\n  let d = new Date(time);\n  let n = d.getMilliseconds();\n  let list_area = [];\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseSource || \"\";\n\n  csvData.map((data, index) => {\n    //in outbound csv upload only check area source\n    if (!list_area.includes(data.areaSource)) {\n      return_data.push({\n        id: index,\n        warehouseSource: warehouse_source,\n        warehouseDestination: warehouse_source,\n        areaSource: data.areaSource,\n        areaDestination: data.areaSource,\n        list: [],\n        createdAt: n,\n      });\n      list_area.push(data.areaSource);\n    }\n  });\n  return return_data;\n};\n\nconst getSKU = (csvData) => {\n  let return_data = []; \n  let today = new Date();\n  let dd = String(today.getDate()).padStart(2, '0');\n  let mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n  let yyyy = today.getFullYear();\n  today = dd + '-' + mm + '-' + yyyy;\n\n  csvData.map((data, index) => {\n    let available = false;\n    return_data.push(\n    {\n      isSuccess: true,\n      skuUuid: data.skuUuid,\n      warehouseId: data.warehouseDestinationUuid,\n      unitOfMeassures: data.uom,\n      qty: data.qty || 0,\n      photo: data.photo,\n      poSku: data.wmsPoSkuCode,\n      expiryDate: moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n      inboundDate: moment(today, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n      errorMessage: \"\",\n      category: data.category,\n      skuNumber: data.skuNumber,\n      skuDescription: data.skuDescription,\n      warehouseCode: data.warehouseDestination\n    } \n    );\n  });\n  return return_data;\n};\n \n \n\nconst setResult = (result) => { \n  let i = 1;\n  \n  let arrayResult = {\n    source : \"upload\",\n    codeTransaction : \"inbound\",\n    list: []\n  }\n  let tmp_arr = []\n\n  result.data.map((data, indexHeader) => { \n    let isStatus = \"Failed\";\n    if (data.isSuccess) {\n      isStatus = \"Success\";\n    }\n    \n    tmp_arr.push({ \n      wmsPoSkuCode:data.poSku,\n      qty:data.qty,\n      expiryDateCol: moment(data.expiryDate).format(\"DD-MM-YYYY\"),   \n      uploadStatus: isStatus || \"\", \n      uploadStatusReason: data.errorMessage || \"\",\n      category: data.category,\n      skuNumber: data.skuNumber,\n      skuDescription: data.skuDescription,\n      warehouseDestination: data.warehouseCode\n    })\n  }); \n  return tmp_arr;\n};\n\nexport const submit = async ({\n  csvData,\n  csvField,\n  dispatch,\n  selectorStatus,\n  setIsShowModal,\n  setIsSubmitText,\n  setSubmitStatus,\n}) => {\n  setIsSubmitText(\"Loading...\");\n  console.clear();\n\n  //set header\n  let header = {\n    source : \"upload\",\n    codeTransaction : \"inbound\",\n    list: []\n  }\n\n  //get list sku\n  //let skuList = await getSKU(csvData);\n\n  //header.list = skuList; \n\n  //submit\n  // let execute = await submitCsvInbound({\n  //   dataCsv: header,\n  //   setSubmitStatus,\n  //   dispatch\n  // });\n\n  let execute = \"\";\n\n  if (execute == \"error\") {\n    return 0;\n  }\n\n  // set result\n  // let result = await setResult(execute);\n  // console.log(result);\n  // await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\n\n  //renew schema for result\n  // let newSchema = [];\n  // newSchema.push({\n  //   dataField: \"uploadStatus\",\n  //   text: \"Upload Status\",\n  //   type: \"string\",\n  //   sort: true,\n  // });\n  // csvField.map((data, index) => {\n  //   newSchema.push(data);\n  // });\n  // await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\n\n  setIsShowModal(false);\n  setIsSubmitText(\"Submit\");\n  setSubmitStatus(true);\n};\n\n\nexport const validasiDouble = ({\n  selectorCsvData,\n  setNewCsvData,\n  setRowDouble,\n  dispatch,\n}) => {\n  let skuNumberArray = [];\n  let skuData = {};\n  let csvDataValidated = [];\n  let rowDouble = [];\n  const y = selectorCsvData?.map((data, idx) => {\n    if (!skuNumberArray.includes(data.skuNumber)) {\n      skuNumberArray.push(data.skuNumber);\n    }\n\n    let objName = \"sku_\" + data.skuNumber;\n    if (!skuData[objName]) {\n      let tmp = {\n        warehouseDestination: data.warehouseDestination, \n        skuNumber: data.skuNumber\n      };\n      skuData[objName] = [tmp];\n    } else {\n      let dataArraySku = skuData[objName];\n      let pushData = true;\n      dataArraySku.map((d, i) => {\n        if ( \n          d.skuNumber == data.skuNumber && \n          d.warehouseDestination == data.warehouseDestination\n        ) {\n          //data sama, tidak di push\n          pushData = false;\n          rowDouble.push(data.id);\n\n          //set to red\n          data.warehouseDestinationStatus = false; \n          data.skuNumberStatus = false;\n          data.wmsPoSkuCodeStatus = false;\n          data.skuDescriptionStatus = false;\n          data.categoryStatus = false;\n          data.expiryDateColStatus = false;\n          data.qtyStatus = false;\n          data.warehouseDestinationReason = \"Data Duplicated\";  \n          data.skuNumberReason = \"Data Duplicated\";\n          data.wmsPoSkuCodeReason = \"Data Duplicated\";\n          data.skuDescriptionReason = \"Data Duplicated\";\n          data.categoryReason = \"Data Duplicated\";\n          data.expiryDateColReason = \"Data Duplicated\";\n          data.qtyReason = \"Data Duplicated\";\n        }\n      });\n      if (pushData) {\n        let tmp = {\n          warehouseDestination: data.warehouseDestination, \n          skuNumber: data.skuNumber, \n        };\n        skuData[objName].push(tmp);\n      }\n    }\n\n    console.log(\"data\", data);\n    csvDataValidated.push(data);\n  });\n\n  console.log(csvDataValidated);\n  // setRowDouble([3]);\n  // dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: csvDataValidated });\n  // return { data: csvDataValidated, doubleRow: rowDouble };\n  setNewCsvData(csvDataValidated);\n  setRowDouble(rowDouble);\n};","import { isInteger } from \"formik\";\n\nexport const next = ({\n  e,\n  state,\n  isCaptcha,\n  setIsValidated,\n  setIsType,\n  isType,\n  isValidated,\n  submit\n}) => {\n  const key = e.key; // const {key} = event; ES6+\n  let type = [...isType];\n\n  //if press enter\n  if (key === \"Enter\"){\n    if(isValidated){\n      submit();\n    }else{\n      return;\n    }\n  }\n\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\",\"Delete\"];\n  if (arr_tmp.includes(key)) {\n    return 0;\n  } else if (key === \"Backspace\") {\n    let type_ = [...isType];\n    let state_ = type_[state];\n    if (state_ == \"\" && state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\n      type_[state - 1] = \"\";\n      type[state - 1] = \"\";\n    } \n  } else if (key === \"ArrowLeft\") {\n    if (state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) - 1))\n        .setSelectionRange(-1, -1);\n\n      return 0;\n    }\n  } else if (key === \"ArrowRight\") {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) + 1))\n        .setSelectionRange(-1, -1);\n      return 0;\n    }\n  } else {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n    }\n  }\n\n  if (key === \"Backspace\") {\n    type[state] = \"\";\n  } else {\n    type[state] = key.toUpperCase();\n  }\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\n  let allowedChar = char.split(\"\");\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\n    setIsType(type);\n  } else {\n    return 0;\n  }\n\n  let stat = true;\n  isCaptcha.map((data, index) => {\n    // if (index == 0) {\n    //   return;\n    // }\n    if (!(type[index + 1] == isCaptcha[index])) {\n      stat = false;\n    } \n  });\n  setIsValidated(stat);\n};\n\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\n  if (module?.length) {\n    let newModule = [];\n    module.map((list) => {\n      list.poList.map((po) => {\n        po.itemList.map((item) => {\n          const { qty, grade } = item;\n          const _qty = isInteger(qty)\n            ? parseInt(qty)\n            : !qty\n              ? 0\n              : parseFloat(qty);\n          const _sku = noSkuChecking\n            ? list.skuName\n            : moduleName === \"waste\"\n              ? item.wasteType?.label\n                ? item.wasteType?.label\n                : list.skuName\n              : grade?.label;\n          const _toWaste =\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\" ||\n                item.wasteType?.label === \"Waste\"\n                ? true\n                : false\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\n                ? true\n                : false;\n          const _uom = noSkuChecking\n            ? list.unitOfMeassures\n            : grade?.uom === \"gram\"\n              ? \"kg\"\n              : grade?.uom;\n          let newSku = {\n            sku: _sku,\n            qty: _qty,\n            uom: _uom,\n            wqty: 0,\n            swqty: 0,\n          };\n          if (_toWaste) {\n            newSku.qty = 0;\n            newSku.sku = list.skuName;\n          }\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Waste\"\n              : grade?.label === \"Waste\"\n          )\n            newSku.wqty = _qty;\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\"\n              : grade?.label === \"Semi Waste\"\n          )\n            newSku.swqty = _qty;\n          const isExist = newModule.findIndex(\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\n          );\n\n          if (moduleName !== \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (grade?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\n            }\n          }\n\n          if (moduleName === \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (item.wasteType?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (item.wasteType?.label === \"Waste\")\n                newModule[isExist].wqty += _qty;\n            }\n          }\n        });\n      });\n    });\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\n    const i = newModule.findIndex((s) => s.sku === skuName);\n    newModule.forEach((sku) => {\n      if (i !== -1) {\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\n      }\n    });\n    return newModule;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { useSelector } from \"react-redux\";\nimport { next, skuListUpdateCheck } from \"./services.js\";\nimport { totalQty } from \"Page/StockEntry/GeneralServices/moduleServices\";\n\nconst ModalsConfirmation = ({\n  moduleEntry,\n  confirmation,\n  setConfirmation,\n  save,\n  submit,\n  isSuccess,\n  isLoading,\n  moveAll,\n  setAction,\n  moduleName,\n  noSkuChecking,\n  singleViewData,\n}) => {\n  const dimention = document.documentElement.clientHeight;\n  const height = dimention - 300;\n\n  let buttonName = \"Submit\";\n\n  if (confirmation.name === \"save\") buttonName = \"Save\";\n  useEffect(() => {\n    if (isSuccess) setConfirmation({ show: false, name: null });\n  }, [isSuccess]);\n  window.onkeydown = (e) =>\n    e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null;\n\n  useEffect(() => {\n    setAction(confirmation.name);\n  }, [confirmation]);\n\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry;\n\n  const areaDestinationName = module?.jobPost?.areaDestinationName;\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName;\n  const areaName = module?.jobPost?.areaName;\n\n  const skuListUpdate = skuListUpdateCheck(\n    module?.jobPost.list,\n    noSkuChecking,\n    moduleName\n  );\n  return (\n    <CRow\n      className={\"modalConfirmation \" + (confirmation.show ? null : \"d-none\")}\n    >\n      <CCol>\n        <CModal show={confirmation.show} closeOnBackdrop={false}>\n          <CModalHeader className=\"px-4 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">\n              Confirmation{\" \"}\n              <span>\n                <i className=\"em em-pray\"></i>\n              </span>\n            </CModalTitle>\n            <label\n              tabIndex=\"0\"\n              onKeyDown={(e) =>\n                e.keyCode === 13\n                  ? setConfirmation({ show: false, name: null })\n                  : false\n              }\n              onClick={() => setConfirmation({ show: false, name: null })}\n              className=\"sku-item iconU-modalClose\"\n            />\n          </CModalHeader>\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\n            <p className=\"text mb-2\">\n              <span>{`Are you sure want to ${\n                areaName == \"Waste\" ? \"update\" : \"send\"\n              } this Item `}</span>\n              <span\n                className={` ${areaDestinationName ? null : \"d-none\"}`}\n              >{` from`}</span>\n              <span\n                className={`green ${areaDestinationName ? null : \"d-none\"}`}\n              >{` ${areaName} `}</span>\n              <span>\n                {moduleName == \"outbound\"\n                  ? \"from\"\n                  : moduleName === \"repack\"\n                  ? \"\"\n                  : \"to\"}{\" \"}\n              </span>\n              <span\n                className={`green ${moduleName !== \"repack\" ? null : \"d-none\"}`}\n              >{` ${\n                moduleName === \"stockTransfer\"\n                  ? warehouseDestinationName\n                  : areaDestinationName\n                  ? areaDestinationName\n                  : areaName\n              } `}</span>\n            </p>\n            <p className=\"text\">\n              Please double check this list, this record will store to database.\n            </p>\n            <div\n              style={{\n                minHeight: height,\n                maxHeight: height,\n                overflow: \"auto\",\n                border: \"1px solid var(--lineGrey)\",\n              }}\n            >\n              <table>\n                <thead>\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Weight\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Semi Waste\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Waste\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {skuListUpdate?.map((data) => (\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                      <td style={{ maxWidth: \"160px\" }}>{data.sku}</td>\n                      <td\n                        className=\"text-right py-3\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        {`${totalQty(data?.qty)}`}\n                      </td>\n                      <td\n                        className=\"text-right text-nowrap\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        <span className=\"text-nowrap\">{`${totalQty(\n                          data?.swqty\n                        )} `}</span>\n                      </td>\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\n                        {`${totalQty(data?.wqty)}`}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? setConfirmation({ show: false, name: null })\n                    : false\n                }\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\n                onClick={() => setConfirmation({ show: false, name: null })}\n              >\n                Cancel\n              </CButton>\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? isLoading\n                      ? null\n                      : confirmation.name === \"save\"\n                      ? save()\n                      : submit()\n                    : false\n                }\n                className={`${\n                  isLoading ? \"bg-softGreen text\" : \"bg-green text-white\"\n                } no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\n                onClick={() =>\n                  isLoading\n                    ? null\n                    : confirmation.name === \"save\"\n                    ? save()\n                    : submit()\n                }\n              >\n                {isLoading ? \"Processing...\" : buttonName}\n              </CButton>{\" \"}\n            </div>\n          </CModalBody>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst ModalsCaptcha = ({\n  show = false,\n  setIsShowModal,\n  submit,\n  submitText = \"Submit\",\n}) => {\n  //random text\n  var text = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var charactersLength = characters.length;\n  var text_split = [];\n  for (var i = 0; i < 3; i++) {\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\n    text += r;\n    text_split.push(r);\n  }\n\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\n  const [isValidated, setIsValidated] = React.useState(false);\n  const [isType, setIsType] = React.useState([]);\n\n  //reset if visible = false\n  useEffect(() => {\n    if (show === true) {\n      document.getElementById(\"t1\").value = \"\";\n      document.getElementById(\"t2\").value = \"\";\n      document.getElementById(\"t3\").value = \"\";\n    }\n  }, [show]);\n\n  return (\n    <CRow className={show ? null : \"d-none\"}>\n      <CCol>\n        <CModal\n          show={show}\n          onClose={() => {\n            setIsShowModal(false);\n          }}\n          size=\"lg\"\n          style={{ height: \"400px\" }}\n        >\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\n              {selectorCsvFileName}?\n            </p>\n            <p className=\"text\">\n              Once uploaded this record will store to databases.\n            </p>\n            <p className=\"text mb-2\">\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\n            </p>\n\n            <div className=\"captcha-box\">\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 1,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t1\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[0]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 2,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t2\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input ml-0 mr-0\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[1]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 3,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t3\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[2]}\n              />\n            </div>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            <CButton\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\n              onClick={() => {\n                setIsShowModal(false);\n              }}\n            >\n              Cancel\n            </CButton>\n            <CButton\n              className={\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\n              }\n              onClick={() => {\n                submit();\n                setIsValidated(false);\n              }}\n            >\n              {submitText}\n            </CButton>{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport { ModalsConfirmation, ModalsCaptcha };\n","import React from \"react\";\nimport { CCard } from \"@coreui/react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"./bootstrapTable-style.scss\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport axios from \"axios\";\n\n//cell editable\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\n\nclass TableEditable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validateStatus: false,\n      validateResult: \"Please Wait...\",\n      globalData: this.props.globalData,\n      rowCount: 0,\n      keyy: 0,\n      triggerRender: 0\n    };  \n    this.validatePOSKUStockTransfer = this.validatePOSKUStockTransfer.bind(this);\n    this.validateSKUNumber = this.validateSKUNumber.bind(this);\n    \n  } \n  changeOutboundReason = (row) => {\n    setTimeout(() => {\n      let elem = document.getElementById(`row${row}-outboundReason`);\n      elem.classList.add(\"red\", \"tooltip-custom\");\n      elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\n    }, 300);\n  }\n\n  changeWarehouseUuid = (\n    value,\n    column,\n    columnName,\n    row,\n    warehouseCodeList,\n    warehouseUuidList,\n    warehouseNameList\n  ) => {\n    const { setCsvDataTmp, globalData } = this.props;\n    let tmpdata = globalData;\n    var index = tmpdata.findIndex((obj) => obj.id == row);\n    let i = warehouseCodeList.indexOf(value);\n    tmpdata[index][column] = warehouseUuidList[i];\n    tmpdata[index][columnName] = warehouseNameList[i];\n\n    console.clear() \n    setTimeout(async () => {\n      setCsvDataTmp(tmpdata);\n    }, 400);\n  };\n\n  validatePOSKU = async (id, row, idColumn) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;\n    if(transaction==\"additional_inbound\"){\n      return;\n    }\n\n    let tmpdata = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/stocktake/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        elem.classList.add(\"red\");\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          var index = tmpdata.findIndex((obj) => obj.id == row);\n          if (data[0] && data[0].isExist === true) {\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\n            tmpdata[index].wmsPoSkuCodeStatus = true;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = data[0].expiryDate;\n            tmpdata[index].inboundDate = data[0].inboundDate;\n            tmpdata[index].supplierName = data[0].supplierName;\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\n            tmpdata[index].uom = data[0].uom;\n            tmpdata[index].photos = data[0].photos;\n            elem.classList.remove(\"red\");\n            elem.classList.add(\"hiddenTooltip\");\n          } else {\n            tmpdata[index].wmsPoSkuCodeStatus = false;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = \"\";\n            tmpdata[index].inboundDate = \"\";\n            tmpdata[index].supplierName = \"\";\n            tmpdata[index].supplierUuid = \"\";\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\n          }\n          setCsvDataTmp(tmpdata);\n        });\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validatePOSKUStockTransfer = async (newValue, row, idColumn, key) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;  \n    let tmpdata = globalData;\n    \n    var index = tmpdata.findIndex((obj) => obj.id == row.id); \n    // console.log(tmpdata)\n    // console.log(row.id, row)\n    // console.log(index)\n\n    try {\n      const url = \"/stocktransfer/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      let payloadPO = [{\n        \"id\": row.id,\n        \"poSkuCode\": key==\"wmsPoSkuCode\" ? newValue : (row.poSkuCode?row.poSkuCode:\"\"),\n        \"skuNumber\": key==\"skuNumber\"? newValue?.skuNumber: row.skuNumber,\n        \"skuUuid\": key==\"skuNumber\"? newValue?.skuUuid:row.skuUuid,\n        \"warehouseSource\": row.warehouseSource,\n        \"areaSource\": row.areaSource,\n        \"weight\": key==\"qty\"?newValue:row.qty\n      }]; \n\n      setTimeout(async () => {\n        //setvalidate false\n        setIsValidate(false);\n\n        //elemen column\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        // elem.classList.remove(\"hiddenTooltip\");\n        // elem.classList.add(\"red\");  \n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: payloadPO },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          if (data[0]) {\n            if(data[0].isExist === true && data[0].isValid === true){\n              tmpdata[index]['rowStatus'] = true;\n              tmpdata[index]['rowReason'] = \"\";\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }else{\n              tmpdata[index]['rowStatus'] = false;\n              tmpdata[index]['rowReason'] = data[0]?.errorMessage;\n            }\n            tmpdata[index]['wmsPoSkuCode'] = data[0]?.wmsPoSkuCode ;\n            tmpdata[index]['wmsPoSkuCodeStatus'] = data[0]?.isExist && data[0]?.isValid;\n            tmpdata[index]['wmsPoSkuCodeReason'] = data[0]?.errorMessage;\n            tmpdata[index]['expiryDate'] = data[0]?.expiryDate;\n            tmpdata[index]['inboundDate'] = data[0]?.inboundDate;\n            tmpdata[index]['supplierName'] = data[0]?.supplierName;\n            tmpdata[index]['supplierUuid'] = data[0]?.supplierUuid;\n            tmpdata[index]['uom'] = data[0]?.uom;\n            tmpdata[index]['photos'] = data[0]?.photos;\n          } else {\n            tmpdata[index]['wmsPoSkuCodeStatus'] = false;\n            tmpdata[index]['wmsPoSkuCodeReason'] = response?.data?.message;\n            tmpdata[index]['expiryDate'] = \"\";\n            tmpdata[index]['inboundDate'] = \"\";\n            tmpdata[index]['supplierName'] = \"\";\n            tmpdata[index]['supplierUuid'] = \"\";\n            tmpdata[index]['rowStatus'] = false;\n            tmpdata[index]['rowReason'] = response?.data?.message;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = response?.data?.message;\n          } \n\n          if(key==\"skuNumber\"){ \n            tmpdata[index][\"skuNumber\"] = newValue.skuNumber;\n            tmpdata[index][\"skuNumberReason\"] = newValue.skuDescription;\n            tmpdata[index][\"skuNumberStatus\"] = true;\n            tmpdata[index][\"skuUuid\"] = newValue.skuUuid;\n          }\n          setCsvDataTmp(tmpdata); \n        }); \n        let tmpKey = this.state.keyy + 1; \n        this.setState({keyy: tmpKey}); \n      }, 500);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validateOutbountReason = (value, row, idColumn) => {\n    const { globalData } = this.props;\n    let tmp_data = globalData;\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\n      this.changeOutboundReason(row)\n    }\n  };\n\n  validateOutbountType = (value, row, idColumn) => {\n    const { globalData, setIsValidate } = this.props;\n    let tmp_data = globalData;\n    setIsValidate(false);\n    if (value.toUpperCase() !== \"LAINNYA\") {\n      setIsValidate(true);\n      return 0;\n    }\n\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (datax[\"outboundReason\"] == \"\") {\n      this.changeOutboundReason(row);\n    }\n  };\n\n  validateSKUNumber = async (id, row, idColumn, key, rowData = null) => {\n    const { globalData, setCsvDataTmp, setIsValidate,transaction } = this.props;\n    let tmp_data = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/oss/skuByNumbers\";\n      let elem = null;\n      let elemspan = null;\n      \n      // for validating stock transfer\n      let stats = false;\n      let newSkuData = {} \n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { skuList: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          let isSuccess = response.data.isSuccess;\n          var index = tmp_data.findIndex((obj) => obj.id == row);\n          if (isSuccess === true && data.length > 0) {\n            stats = true;\n            tmp_data[index][key] = data[0].skuNumber;\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\n            tmp_data[index][key + \"Status\"] = true;\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\n            newSkuData = {\n              skuUuid: data[0].id,\n              skuNumber: data[0].skuNumber,\n              skuDescription: data[0].skuDescription,\n              photo: data[0].photo\n            }\n\n            //custom\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = data[0].id;\n              tmp_data[index].photo = data[0].imageMd;\n            }\n\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = data[0].uom;\n            }\n            \n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = data[0].uom;\n            }\n\n            \n            if(transaction!==\"stockTransfer\"){\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }\n\n          } else {\n            stats = false;\n            tmp_data[index][key] = id;\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\n            tmp_data[index][key + \"Status\"] = false;\n            tmp_data[index][key + \"Uuid\"] = null;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"SKU Number Not Found\";\n\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = \"\";\n              tmp_data[index].photo = \"\";\n            }\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = null;\n            }\n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = \"\";\n            }\n          } \n        });\n\n        if(transaction==\"stockTransfer\" && stats === true){ \n          this.validatePOSKUStockTransfer(newSkuData, rowData, idColumn, 'skuNumber')\n        }else{\n          setCsvDataTmp(tmp_data);\n        }\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  render() {\n    const {\n      columns,\n      hiddenRows,\n      tableClass,\n      warehouseArea,\n      outboundType,\n      setCheckingCsv, \n      editable = true,\n      warehousesData = [],\n      transaction,\n      globalData\n    } = this.props;\n    let { validateStatus,  keyy } = this.state;\n    \n    //wh\n    let warehouseCodeList = [];\n    let warehouseUuidList = [];\n    let warehouseNameList = [];\n    if (warehousesData) {\n      let tmp = warehousesData?.data?.map((d) => {\n        warehouseCodeList.push(d.code);\n        warehouseUuidList.push(d.id);\n        warehouseNameList.push(d.name);\n      });\n    }\n\n    //wh area\n    let wh_area_label =\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\n    let wh_outboundtype_label = !outboundType\n      ? []\n      : outboundType.map((data) => data.label.toUpperCase());\n    let wh_outboundtype_value = !outboundType\n      ? []\n      : outboundType.map((data) => data.value);\n    const newFormat = columns.map((data, index) => {\n      data.validator = (newValue, row, column, done) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let reason = null;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n\n        let stockTransferColumnCheck = ['wmsPoSkuCode', 'qty']\n        if (stockTransferColumnCheck.includes(key) && transaction==\"stockTransfer\") {\n          this.validatePOSKUStockTransfer(newValue, row, idColumn, key);\n          stat = true;\n        }else if(key == \"wmsPoSkuCode\" ){\n          this.validatePOSKU(newValue, row.id, idColumn, key);\n          stat = true; \n        }\n\n        if (key == \"skuNumber\") {\n          this.validateSKUNumber(newValue, row.id, idColumn, key, row);\n          stat = true;\n        }\n\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type not found\";\n            checkType = false;\n            stat = false;\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        } else if (key == \"newGrade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            //if not waste or semi waste\n            if (parseInt(newValue)) {\n              //if number\n              stat = true;\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\n            } else if (newValue == \"\") {\n              row[\"newGradeUuid\"] = null;\n              row[\"newGradeUom\"] = null;\n              stat = true;\n            } else {\n              //if not number => undefined\n              reason = \"Grade Undefined\";\n              checkType = false;\n              stat = false;\n            }\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        }\n\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Outbound Type Not Found`;\n          } else {\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\n            stat = true;\n            this.validateOutbountType(newValue, row.id, idColumn);\n          }\n        }\n\n        if (key == \"outboundReason\") {\n          this.validateOutbountReason(newValue, row.id, idColumn);\n        }\n\n        if (key == \"warehouse\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseUuid\",\n              \"warehouseName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          }\n        }\n        if (key == \"warehouseDestination\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseDestinationUuid\",\n              \"warehouseDestinationName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          } \n        }\n\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Warehouse Area Not Found`;\n          } else {\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\n            if (key == \"areaNameDestination\") {\n              row[\"areaDestination\"] = wh_area_value[i];\n            } else {\n              row[\"areaSource\"] = wh_area_value[i];\n            }\n            stat = true;\n          }\n        }\n\n        if (key == \"newPack\") {\n          let checkTypenewPack = isNaN(newValue) ? false : true;\n          if (!checkTypenewPack) {\n            stat = false;\n            reason = `Pack Should be a number`;\n          } else {\n            stat = true;\n          }\n        } \n        \n\n        let checkType = null;\n        if (data.type == \"number\") {\n          checkType = isNaN(newValue) ? false : true;\n        } else {\n          checkType = true;\n        }\n        if (checkType === false) {\n          reason = `${data.text} Should be a ${data.type}`;\n        } \n\n        \n        if (key == \"wmsPoSkuCode\" && transaction == \"stockTransfer\") {\n          if(isNaN(newValue)){\n            checkType = false;\n            reason = `${data.text} Should be a number`;\n            stat = false;\n          } \n        } \n\n        //some field can null\n        let canNull = [\n          \"grade\",\n          \"outboundReason\",\n          \"ripenessLevel\",\n          \"newRipeness\",\n          \"reason\",\n          \"expiryDate\"\n        ]; \n\n        if (canNull.includes(key) && newValue === \"\") {\n          reason = \"\";\n          checkType = true;\n          stat = true;\n        } else if (key == \"grade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type Not Found\";\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //check ripenesslevel\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\n          let allowedRipenessLevel = [0, 1, 2, 3];\n          if (\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\n            newValue == \"\"\n          ) {\n            checkType = true;\n            stat = true;\n            reason = \"\";\n            if (newValue == \"\") {\n              newValue = \"\";\n            }\n          } else {\n            checkType = false;\n            stat = false;\n            reason = \"Undefined Ripeness Level\";\n          }\n        }\n\n        //check date\n        if (data.type == \"date_indo\") {\n          //checking date\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\n          if (newValue.match(regex_date)) {\n            checkType = true;\n            stat = true;\n          } else if (newValue == \"\") {\n            checkType = true;\n            stat = true;\n          } else {\n            reason = `Date format must be 'dd-mm-yyyy'`;\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //set notif\n        row[keyReason] = reason;\n        if (stat && checkType) {\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\n          if (!specialKey.includes(key)) {\n            //some key have their own checking, so if not in array do checking error\n            row[keyStatus] = true;\n            setCheckingCsv();\n          }\n        } \n         \n        return {\n          valid: stat && checkType ? true : false,\n          message: reason,\n        };\n      };\n\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n        let txt = row[keyReason];\n        \n        // if status column = false\n        // that mean there's error or not valid data in some column\n        if (row[keyStatus] === false) {\n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {txt}\n              </span>\n            </div>\n          );\n        }\n\n        // if global row status = false\n        // that mean there's wmsposkucode validation error, and makes 1 line become red colour\n        // for now is only for stock transfer  \n        if ( transaction==\"stockTransfer\" &&  row['rowStatus'] === false) { \n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {row['rowReason']}\n              </span>\n            </div>\n          );\n        }\n\n        \n        // if status column = true\n        // No problem \n        return (\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\n            {cell}\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\n              {txt}\n            </span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n    console.clear();  \n    console.log(globalData)\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={globalData}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          cellEdit={\n            editable === true\n              ? cellEditFactory({\n                  mode: \"click\",\n                  blurToSave: true,\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\n                })\n              : null\n          }\n          bordered={false}\n          hiddenRows={hiddenRows}\n          key={keyy}\n        />\n      </CCard>\n    );\n  }\n}\n\nclass TableResult extends React.Component {\n  render() {\n    const { columns, tableClass, data } = this.props;\n\n    const newFormat = columns.map((data, index) => {\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\n          return (\n            <div className=\"tooltip-custom red\">\n              {cell}\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\n            </div>\n          );\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\n          return (\n            <div className=\"green\">\n              {cell}\n              <span></span>\n            </div>\n          );\n        }\n\n        return (\n          <div>\n            {cell}\n            <span></span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={data}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          bordered={false}\n        />\n      </CCard>\n    );\n  }\n}\n\nexport { TableResult, TableEditable };\n","export const activeStockTableHeader = [\n    { width: '100%', Header: 'SYNC DATE', placeholder: 'Sync Date', accessor: 'updatedAt', style: { textAlign: 'left', display: 'start', justifyContent: 'flex-start' } },\n    { width: '100%', Header: 'USER', placeholder: 'User', accessor: 'createdBy' },\n    { width: '100%', Header: 'MODULE', placeholder: 'Module', accessor: 'module', style: { textAlign: 'right', display: 'flex', justifyContent: 'flex-start' }, },\n    { width: '100%', Header: 'MESSAGE RESPONSE', placeholder: 'Message Response', accessor: 'responseMessage', style: { textAlign: 'right !important', display: 'flex', justifyContent: 'flex-start' }, className: 'flex-adjust', headerClassName: 'flex-adjust' },\n]\n\nexport const activeStockTableHeaderDetail = [\n    { width: '100%', Header: 'SKU DESCRIPTION', placeholder: 'Sku Description', accessor: 'skuDescription', style: { textAlign: 'left', display: 'start', justifyContent: 'flex-start' } },\n    { width: '100%', Header: 'SKU NUMBER', placeholder: 'Sku Number', accessor: 'skuNumber' },\n    { width: '100%', Header: 'REASON', placeholder: 'Reason', accessor: 'reason', style: { textAlign: 'right !important', display: 'flex', justifyContent: 'flex-start' }, className: 'flex-adjust', headerClassName: 'flex-adjust' },\n]\n\nexport const data = [\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n\n    {\n        syncDate: '19:03 30-03-2021',\n        user: 'dev@onebyone.io',\n        module: 'Stock Take',\n        messageResponse: 'Synchronize failed'\n    },\n]\n"],"sourceRoot":""}