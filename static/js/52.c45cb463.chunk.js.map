{"version":3,"sources":["Page/StockEntry/StockTransfer/Upload/services.js","Component/Modal/PopUpSavedCsv/index.jsx","Page/StockEntry/StockTransfer/Upload/Review.jsx","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/BootstrapTable/index.jsx"],"names":["submit","async","csvData","dispatch","csvField","setIsSubmitText","setSubmitStatus","setIsShowModal","setMsg2","_ref5","console","log","header","time","Date","getTime","n","getMilliseconds","list_area","return_data","warehouse_source","warehouseUuid","warehouse_destination","warehouseDestinationUuid","map","data","index","includes","areaSource","push","id","warehouseSource","warehouseDestination","areaDestination","list","createdAt","setHeader","warehouseNameFrom","areaNameFrom","warehouseNameTo","skuList","available","forEach","idx","skuUuid","skuNumber","unitOfMeassures","uom","photo","photos","poList","getSKU","poGroup","groupingPO","header_index","newGrade","value","toUpperCase","checkGrade","newGradeUuid","wmsPoSkuCode","ripenessLevel","expiryDateCol","expiryDateText","expiryDate","moment","toDate","inboundDate","supplierId","supplierUuid","supplierName","codeGrade","areaName","warehouseCode","itemList","length","qty","ripeness","label","grade","codeOutbound","outboundTypeCode","note","reason","pack","inputPack","warehouseCodeSource","warehouse","warehouseCodeDestination","jobPost","setJobPost","skuListData","skuListIdx","poGroupIndex","headerData","headerIdx","skuListDataIdx","execute","submitCsvStockTransfer","dataCsv","transaction","_execute$data","isSuccess","className","message","concat","poNumber","result","arrayResult","i","dataHeader","indexHeader","poHeader","indexPo","_data$ripeness","isStatus","uploadStatus","uploadStatusReason","areaNameDestination","setResult","type","STOK_TAKE_UPLOAD_JSON","csvDataResult","newSchema","dataField","text","sort","csvFieldResult","setTimeout","status","PopUpSavedCsv","_ref","isSaved","setIsSaved","confirmation","statusDisplay","title","cancelButtonTitle","actionButtonTitle","cancelButtonClass","actionButtonClass","actionButtonEvent","msg1","msg2","setShow","onCloseFunction","saved","success","headerIcon","textColor","button","failed","focus","document","getElementById","React","createElement","CRow","CCol","CModal","show","onClose","size","style","minHeight","bodyOpenClassName","closeOnBackdrop","onClick","CModalBody","backgroundColor","Array","isArray","datax","CModalFooter","CButton","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","selectorStatus","warehousesData","warehouseData","isShowModal","useState","isHiddenRows","setIsHiddenRows","isShowErrorOnly","setIsShowErrorOnly","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","setCheckingCsv","submitStatus","setTitle","setMsg1","setCancelButtonTitle","setActionButtonTitle","isSubmitText","setCancelButtonClass","setActionButtonClass","colourTitle","setColourTitle","useEffect","_ref4","undefined","stats","indexField","checking_error","history","setCsvDataTmp","param","_ref3","setCsvData","TableEditable","globalData","columns","tableClass","hiddenRows","warehouseArea","tmp_arr_false","tmp_arr_true","stat","dataColumn","indexColumn","key","ret","filter","x","showErrorsOnly","_ref2","new_arr","deleteErrorsField","lineHeight","goBack","class","colorText","refreshOnCancel","ModalsCaptcha","submitText","next","e","isCaptcha","setIsValidated","setIsType","isType","isValidated","type_","parseInt","setSelectionRange","split","ModalsConfirmation","_module$jobPost","_module$jobPost2","_module$jobPost3","moduleEntry","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","name","window","onkeydown","keyCode","module","areaDestinationName","warehouseDestinationName","skuListUpdate","skuListUpdateCheck","newModule","po","item","_item$wasteType","_item$wasteType2","_item$wasteType3","_item$wasteType4","_item$wasteType5","_item$wasteType6","_qty","isInteger","parseFloat","_sku","skuName","wasteType","_toWaste","_uom","newSku","sku","wqty","swqty","isExist","findIndex","_item$wasteType7","_item$wasteType8","s","CModalHeader","CModalTitle","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","characters","charactersLength","text_split","r","charAt","Math","floor","random","setIsCaptcha","isCaptchaText","setIsCaptchaText","autocomplete","onKeyUp","textTransform","maxLength","placeholder","Component","constructor","_this","super","this","changeOutboundReason","row","elem","classList","add","innerHTML","changeWarehouseUuid","column","columnName","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","obj","indexOf","clear","validatePOSKU","idColumn","url","elemspan","axios","method","then","response","_response$data","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","remove","error","validatePOSKUStockTransfer","newValue","payloadPO","poSkuCode","_response$data2","_data$2","_data$3","_data$4","_data$5","_data$6","_data$7","_data$8","_data$9","_data$10","_data$11","_data$","isValid","errorMessage","_response$data3","_response$data4","_response$data5","skuDescription","tmpKey","keyy","setState","validateOutbountReason","tmp_data","validateOutbountType","validateSKUNumber","rowData","arguments","newSkuData","_response$data6","imageMd","newGradeUom","validateStatus","validateResult","rowCount","triggerRender","bind","render","outboundType","editable","_warehousesData$data","d","code","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","done","keyStatus","keyReason","arr_grade","checkType","isNaN","regex_date","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","CCard","BootstrapTable","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered","TableResult"],"mappings":"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","file":"static/js/52.c45cb463.chunk.js","sourcesContent":["//other\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\nimport { submitCsvStockTransfer } from \"apiServices\";\nimport moment from \"moment\";\nimport React from \"react\";\n\nexport const showErrorsOnly = ({\n  csvData,\n  csvField,\n  isShowErrorOnly,\n  setIsShowErrorOnly,\n  setIsHiddenRows,\n  setCheckingCsv,\n}) => {\n  // ;\n  let tmp_arr_false = [];\n  let tmp_arr_true = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    let i = index + 1;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n\n    if (stat === false) {\n      if (!tmp_arr_false.includes(i)) {\n        tmp_arr_false.push(i);\n      }\n    } else {\n      if (!tmp_arr_true.includes(i)) {\n        tmp_arr_true.push(i);\n      }\n    }\n  });\n\n  //return array\n  let ret = [];\n  if (isShowErrorOnly === true) {\n    //true = delete all row\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\n    if (ret.length == csvData.length) {\n      return 0;\n    }\n  } else {\n    ret = [];\n  }\n  setIsHiddenRows(ret);\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\n  setCheckingCsv(true);\n};\n\nexport const deleteErrorsField = ({\n  csvData,\n  csvField,\n  dispatch,\n  setCheckingCsv,\n}) => {\n  let new_arr = [];\n  csvData.map((data, index) => {\n    let stat = true;\n    csvField.map((dataColumn, indexColumn) => {\n      let key = dataColumn.dataField + \"Status\";\n      if (data[key] === false) {\n        stat = false;\n      }\n    });\n    if (stat === true) {\n      new_arr.push(data);\n    }\n  });\n\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\n  setCheckingCsv(true);\n};\n\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\n  setCheckingCsv(true);\n};\n\nexport const checking_error = ({\n  csvData,\n  csvField,\n  setIsValidate,\n  setCheckingCsv,\n}) => {\n  if (csvData === undefined) {\n    return 0;\n  }\n  let stats = true;\n  csvData.map((data, index) => {\n    csvField.map((dataField, indexField) => {\n      let status = data[dataField.dataField + \"Status\"];\n\n      //jika outbound type = lainya, maka harus isi outbound reason\n      if (dataField.dataField == \"outboundType\") {\n        let type = data[dataField.dataField].toUpperCase();\n        if (type == \"LAINNYA\") {\n          if (data[\"outboundReason\"] == \"\") {\n            status = false;\n          }\n        }\n      }\n\n      if (status === false) {\n        // console.log(data, dataField.dataField, data[dataField.dataField + 'Status']);\n        stats = false;\n      }\n    });\n  });\n  if (stats === false) {\n    setIsValidate(false);\n  } else {\n    setIsValidate(true);\n  }\n  setCheckingCsv(false);\n};\n\nconst setHeader = (csvData) => {\n  //get time - created at\n  let time = new Date().getTime();\n  let d = new Date(time);\n  let n = d.getMilliseconds();\n  let list_area = [];\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseUuid || \"\";\n  let warehouse_destination = csvData[0].warehouseDestinationUuid || \"\";\n\n  csvData.map((data, index) => {\n    //in outbound csv upload only check area source\n    if (!list_area.includes(data.areaSource)) {\n      return_data.push({\n        id: index,\n        warehouseSource: warehouse_source,\n        warehouseDestination: warehouse_destination,\n        areaSource: data.areaSource,\n        areaDestination: data.areaSource,\n        list: [],\n        createdAt: n,\n      });\n      list_area.push(data.areaSource);\n    }\n  });\n  return return_data;\n};\n\nconst getSKU = (csvData) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseUuid || \"\";\n  let warehouse_destination = csvData[0].warehouseDestinationUuid || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.skuUuid == data.skuUuid &&\n        header.warehouseSource == data.warehouseSource &&\n        header.warehouseDestination == data.warehouseDestinationUuid &&\n        header.areaSource == data.areaSource\n      ) {\n        available = true;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        warehouseSource: warehouse_source,\n        warehouseDestination: warehouse_destination,\n        areaSource: data.areaSource,\n        skuUuid: data.skuUuid,\n        skuNumber: data.skuNumber,\n        unitOfMeassures: data.uom,\n        photo: data.photos,\n        poList: [],\n      });\n    }\n  });\n  return return_data;\n};\n\nconst checkGrade = (value) => {\n  if (!value) {\n    return;\n  }\n\n  if (value.toUpperCase() == \"SEMI WASTE\") {\n    return \"semi_waste\";\n  } else if (value.toUpperCase() == \"WASTE\") {\n    return \"waste\";\n  } else {\n    return value;\n  }\n};\n\nconst groupingPO = (csvData, skuList) => {\n  let return_data = [];\n  let warehouse_source = csvData[0].warehouseUuid || \"\";\n  let warehouse_destination = csvData[0].warehouseDestinationUuid || \"\";\n\n  csvData.map((data, index) => {\n    let available = false;\n    let header_index = \"\";\n    console.log(data);\n\n    //cheking grade\n    let newGrade = checkGrade(data.newGradeUuid);\n    if (!newGrade) {\n      newGrade = data.skuUuid;\n    }\n    //end checking grade\n\n    return_data.forEach((header, idx) => {\n      if (\n        header &&\n        header.areaSource == data.areaSource &&\n        header.warehouseSource == data.warehouseSource &&\n        header.warehouseDestination == data.warehouseDestination &&\n        header.skuUuid == data.skuUuid &&\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\n        header.ripenessLevel == data.ripenessLevel &&\n        header.expiryDateCol == data.expiryDateCol\n      ) {\n        available = true;\n        header_index = idx;\n      }\n    });\n\n    if (!available) {\n      return_data.push({\n        skuUuid: data.skuUuid || \"\",\n        areaSource: data.areaSource || \"\",\n        warehouseSource: warehouse_source || \"\",\n        warehouseDestination: warehouse_destination || \"\",\n        expiryDateText: data.expiryDateCol || \"\",\n        expiryDate:\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n        inboundDate: data.inboundDate || \"\",\n        supplierId: data.supplierUuid || \"\",\n        supplierName: data.supplierName || \"\",\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\n        codeGrade: data.skuUuid || \"\",\n        ripenessLevel: data.ripenessLevel || 0,\n        skuNumber: data.skuNumber || \"\",\n        areaName: data.areaName || \"\",\n        warehouseCode: data.warehouseCode || \"\",\n        itemList: [],\n      });\n      header_index = return_data.length - 1;\n    }\n    return_data[header_index].itemList.push({\n      qty: data.qty || 0,\n      areaSource: data.areaSource,\n      skuNumber: data.skuNumber,\n      ripeness: {\n        label: data.ripenessLevel || \"\",\n        value: data.ripenessLevel || 0,\n      },\n      expiryDate:\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\n      expiryDateText: data.expiryDateCol,\n      grade: { label: data.newGrade, value: newGrade || data.skuUuid },\n      codeOutbound: {\n        label: data.outboundTypeCode || \"\",\n        value: data.outboundTypeCode || \"\",\n      },\n      note: data.reason || \"\",\n      areaName: data.areaName || \"\",\n      pack: data.inputPack || 0,\n      unitOfMeassures: data.uom || \"\",\n      warehouseCodeSource: data.warehouse || \"\",\n      warehouseCodeDestination: data.warehouseDestination || \"\",\n    });\n  });\n  return return_data;\n};\n\nconst setJobPost = (header, skuList, poGroup) => {\n  //insert PO to SKUList\n  skuList.map((skuListData, skuListIdx) => {\n    poGroup.map((poGroup, poGroupIndex) => {\n      if (\n        poGroup &&\n        poGroup.areaSource == skuListData.areaSource &&\n        poGroup.warehouseSource == skuListData.warehouseSource &&\n        poGroup.warehouseDestination == skuListData.warehouseDestination &&\n        poGroup.skuUuid == skuListData.skuUuid\n      ) {\n        skuList[skuListIdx][\"poList\"].push(poGroup);\n      }\n    });\n  });\n\n  //insert sku to Header\n  header.map((headerData, headerIdx) => {\n    skuList.map((skuListData, skuListDataIdx) => {\n      if (\n        poGroup &&\n        headerData.areaSource == skuListData.areaSource &&\n        headerData.warehouseSource == skuListData.warehouseSource &&\n        headerData.warehouseDestination == skuListData.warehouseDestination\n      ) {\n        header[headerIdx][\"list\"].push(skuListData);\n      }\n    });\n  });\n\n  return header;\n};\n\nconst setResult = (result) => {\n  let arrayResult = [];\n  let i = 1;\n  result.list.map((dataHeader, indexHeader) => {\n    dataHeader.poList.map((poHeader, indexPo) => {\n      poHeader.itemList.map((data, index) => { \n        let isStatus = \"Failed\";\n        if (data.isSuccess) {\n          isStatus = \"Success\";\n        }\n        arrayResult.push({\n          id: i,\n          uploadStatus: isStatus || \"\",\n          uploadStatusReason: data.message,\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\n          skuNumber: data.skuNumber || \"\",\n          ripenessLevel: data.ripeness?.label || \"\",\n          qty: data.qty || 0,\n          reason: data.note || \"\",\n          grade: poHeader.codeGrade || \"\",\n          areaName: data.areaName || \"\",\n          warehouse: data.warehouseCodeSource || \"\",\n          areaNameDestination: data.areaNameDestination || \"\",\n          warehouseDestination: data.warehouseCodeDestination || \"\",\n          expiryDateCol: data.expiryDateText || \"\",\n        });\n        i++;\n      });\n    });\n  });\n  return arrayResult;\n};\n\nexport const submit = async ({\n  csvData,\n  dispatch,\n  csvField,\n  setIsSubmitText,\n  setSubmitStatus,\n  setIsShowModal,\n  setMsg2,\n}) => {\n  console.log(csvData);\n  setIsSubmitText(\"Loading...\");\n\n  //set header\n  let header = await setHeader(csvData);\n  let warehouseNameFrom = csvData[0][\"warehouseName\"] || \"Warehouse\";\n  let areaNameFrom = csvData[0][\"areaName\"] || \"Area\";\n  let warehouseNameTo =\n    csvData[0][\"warehouseDestinationName\"] || \"Warehouse Destination\";\n\n  //get list sku\n  let skuList = await getSKU(csvData);\n\n  //grouping PO\n  let poGroup = await groupingPO(csvData, skuList);\n\n  //set JobPost\n  let jobPost = await setJobPost(header, skuList, poGroup);\n\n  //submit\n  let execute = await submitCsvStockTransfer({\n    dataCsv: jobPost,\n    setSubmitStatus,\n    dispatch,\n    transaction: \"stock-transfer\",\n  });\n  setIsShowModal(false);\n  setIsSubmitText(\"Submit\");\n\n  if (execute?.isSuccess === true) {\n    setMsg2([\n      {\n        className: `h5 font-weight-bold`,\n        message: `PO Number: ${execute?.data?.poNumber}`,\n      },\n      {\n        className: `h5 green mt-4`,\n        message: `${warehouseNameFrom} (${areaNameFrom}) to ${warehouseNameTo} - ${\n          skuList?.length || 0\n        } SKU(s).`,\n      },\n    ]);\n    setSubmitStatus(\"success\");\n  } else if (execute?.isSuccess === false && execute?.jobPost) {\n    //Data tidak ditemukan\n    setMsg2([\n      {\n        className: `h5 font-weight-bold`,\n        message: `Failed to proceed because we can't match some of data.`,\n      },\n      {\n        className: `h5 green mt-3`,\n        message: `Try to fix the error part and try again.`,\n      },\n    ]);\n    setSubmitStatus(\"noData\");\n\n    //set result\n    let result = await setResult(execute?.jobPost || []);\n    await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\n\n    //renew schema for result\n    let newSchema = [];\n    newSchema.push({\n      dataField: \"uploadStatus\",\n      text: \"Upload Status\",\n      type: \"string\",\n      sort: true,\n    });\n    csvField.map((data, index) => {\n      newSchema.push(data);\n    });\n    await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\n  } else {\n    //API ERROR\n    setTimeout(() => {\n      console.log(execute)\n    }, 3000);\n\n    setMsg2((execute?.status ? `${execute?.status}  - ` : '')+ \"Failed to proceed.\");\n    setSubmitStatus(\"API\");\n  }\n};\n","import React from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CRow,\n} from \"@coreui/react\";\nimport \"Component/Modal/PopUp/index.scss\";\n\nconst PopUpSavedCsv = ({\n  isSaved,\n  setIsSaved,\n  confirmation,\n  submit,\n  statusDisplay = false,\n  title = \"\",\n  cancelButtonTitle = \"Cancel\",\n  actionButtonTitle = \"Submit\",\n  cancelButtonClass = \"bg-background\",\n  actionButtonClass = \"bg-background\",\n  actionButtonEvent = null,\n  msg1 = null,\n  msg2 = null,\n  setShow,\n  onCloseFunction,\n}) => {\n  const saved = {\n    success: {\n      headerIcon: \"em em-tada\",\n      textColor: \"green\",\n      button: \"bg-green\",\n    },\n    failed: {\n      headerIcon: \"em em-anguished\",\n      textColor: \"red\",\n      button: \"bg-red\",\n    },\n  };\n  const data = isSaved == \"success\" ? saved.success : saved.failed;\n\n  const focus = document.getElementById(\"btn_is_saved\");\n  if (focus) focus.focus();\n  return (\n    <CRow className={statusDisplay ? null : \"d-none\"}>\n      <CCol>\n        <CModal\n          show={statusDisplay}\n          onClose={() => {\n            onCloseFunction();\n          }}\n          size=\"lg\"\n          style={{ minHeight: \"280px\" }}\n          bodyOpenClassName=\"p-3\"\n          closeOnBackdrop={false}\n        >\n          <div className=\"d-flex flex-row-reverse\">\n            <i\n              className=\"pr-3 pt-3 iconU-modalClose\"\n              onClick={() => {\n                onCloseFunction();\n              }}\n            ></i>\n          </div>\n          <CModalBody className=\"px-5 mt-3 py-0\">\n            <label className={`${data.textColor} LatoBold mr-2 h5 mb-3`}>\n              {title}\n            </label>{\" \"}\n            <span>\n              <i className={`${data.headerIcon}`}></i>\n            </span>\n            <div className=\"mr-1 h5 mb-3\">{`${msg1}`}</div>\n            <div\n              style={{ backgroundColor: \"#F5F7FA\" }}\n              className=\"w-100 border rounded px-3 pt-4 pb-3 mb-4\"\n            >\n              {!Array.isArray(msg2) ? (\n                <div className={`h5 font-weight-bold`}>{msg2}</div>\n              ) : (\n                msg2.map((datax, index) => {\n                  return <div className={datax.className}> {datax.message} </div>;\n                })\n              )}\n            </div>\n          </CModalBody>\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            {cancelButtonTitle ? (\n              <CButton\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\n                onClick={() => {\n                  onCloseFunction();\n                }}\n              >\n                {cancelButtonTitle}\n              </CButton>\n            ) : null}\n            {actionButtonTitle ? (\n              <CButton\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\n                onClick={() => {\n                  actionButtonEvent();\n                }}\n              >\n                {actionButtonTitle}\n              </CButton>\n            ) : null}{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport default PopUpSavedCsv;\n","import React, { useEffect } from \"react\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withRouter } from \"react-router\";\nimport { TableEditable } from \"Component/BootstrapTable\";\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\nimport \"../index.scss\";\nimport {\n  showErrorsOnly,\n  deleteErrorsField,\n  setCsvData,\n  submit,\n  checking_error,\n} from \"./services.js\";\nimport PopUpSavedCsv from \"Component/Modal/PopUpSavedCsv\";\n\nconst Upload = (props) => {\n  const dispatch = useDispatch();\n\n  //selector\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const selectorCsvData = useSelector((state) => state.csvData);\n  const selectorCsvField = useSelector((state) => state.csvField);\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\n  const selectorStatus = useSelector((state) => state.status); //wh\n  const warehousesData = useSelector((state) => state.warehouseData);\n\n  //state\n  const [isShowModal, setIsShowModal] = React.useState(false);\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\n  const [isValidate, setIsValidate] = React.useState(false);\n  const [modalShow, setModalShow] = React.useState(false);\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\n  const [submitStatus, setSubmitStatus] = React.useState(false);\n\n  const [title, setTitle] = React.useState(null);\n  const [msg1, setMsg1] = React.useState(null);\n  const [msg2, setMsg2] = React.useState(null);\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\n  const [cancelButtonClass, setCancelButtonClass] = React.useState(null);\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\n  const [colourTitle, setColourTitle] = React.useState(null);\n\n  useEffect(() => {\n    checking_error({\n      csvData: selectorCsvData,\n      csvField: selectorCsvField,\n      setIsValidate,\n      setCheckingCsv,\n    });\n  }, [checkingCsv]);\n\n  // useEffect(() => {\n  //   if (submitStatus === true) {\n  //     props.history.push(\"/inventory-entry/stock-transfer/CSV-upload/result\");\n  //   }\n  // }, [submitStatus]);\n\n  useEffect(() => {\n    if (submitStatus == \"success\") {\n      setTitle(\"Success!\");\n      setMsg1(selectorCsvFileName + \" upload successfull.\");\n      setCancelButtonTitle(\"Cancel\");\n      setActionButtonTitle(\"Select Again\");\n      setActionButtonClass(\"bg-green background\");\n      setColourTitle(\"green\");\n      setModalShow(true);\n    } else if (submitStatus == \"API\") {\n      setTitle(\"Failed!\");\n      setMsg1(selectorCsvFileName + \" failed to upload.\");\n      setCancelButtonTitle(\"Cancel\");\n      setActionButtonTitle(\"Retry\");\n      setActionButtonClass(\"bg-red background\");\n      setColourTitle(\"red\");\n      setModalShow(true);\n    } else if (submitStatus == \"noData\") {\n      setTitle(\"Failed!\");\n      setMsg1(selectorCsvFileName + \" failed to upload.\");\n      setCancelButtonTitle(\"Check\"); \n      setCancelButtonClass(\"bg-red background\");\n      setActionButtonClass(\"d-none\");\n      setColourTitle(\"red\");\n      setModalShow(true);\n    }\n  }, [submitStatus]);\n\n  if (selectorCsvData === undefined || selectorCsvData === null) {\n    props.history.push(\"/inventory-entry/stock-transfer/CSV-upload\");\n    return 0;\n  }\n\n  const setCsvDataTmp = (param) => {\n    setCsvData({ param, dispatch, setCheckingCsv });\n    // showErrorsOnly({\n    //   csvData: selectorCsvData,\n    //   csvField: selectorCsvField,\n    //   isShowErrorOnly: false, \n    //   setIsShowErrorOnly,\n    //   setIsHiddenRows,\n    //   setCheckingCsv,\n    // });\n  };\n\n  return (\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\n      <TableEditable\n        globalData={selectorCsvData} //Required\n        columns={selectorCsvField} //Required\n        tableClass=\"reviewTable\"\n        hiddenRows={isHiddenRows}\n        warehouseArea={selectorWarehouseArea}\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\n        setIsValidate={(param) => setIsValidate(param)}\n        dispatch={dispatch}\n        setCheckingCsv={setCheckingCsv}\n        warehousesData={warehousesData}\n        transaction=\"stockTransfer\"\n      />\n\n      <div className=\"row pt-3\">\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-3 mr-3 text no-shadow\"\n            style={{ backgroundColor: \"#fff\" }}\n            onClick={() =>\n              showErrorsOnly({\n                csvData: selectorCsvData,\n                csvField: selectorCsvField,\n                isShowErrorOnly,\n                setIsShowErrorOnly,\n                setIsHiddenRows,\n                setCheckingCsv,\n              })\n            }\n          >\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn px-3 mr-3  text no-shadow\"\n            style={{ backgroundColor: \"#fff\" }}\n            onClick={() =>\n              deleteErrorsField({\n                csvData: selectorCsvData,\n                csvField: selectorCsvField,\n                dispatch,\n                setCheckingCsv,\n              })\n            }\n          >\n            Delete Errors Field\n          </button>\n        </div>\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\n          Review your imported file: {selectorCsvFileName} (\n          {selectorCsvData.length || 0} Lines)\n        </div>\n        <div className=\"col-4\">\n          <button\n            type=\"button\"\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\n            onClick={() => props.history.goBack()}\n          >\n            Discard\n          </button>\n\n          <button\n            type=\"button\"\n            class={\n              \"btn px-5 mr-3 text-white no-shadow float-right \" +\n              (isValidate === true && selectorCsvData?.length > 0 ? \"bg-green\" : \"bg-primaryGrey disabled\")\n            }\n            onClick={() => setIsShowModal(!isShowModal)}\n          >\n            Submit\n          </button>\n        </div>\n      </div>\n\n      <PopUpSavedCsv\n        isSaved={submitStatus}\n        status={selectorStatus}\n        onCloseFunction={() => {\n          setModalShow(false);\n          setSubmitStatus(false);  \n          if(submitStatus=='success'){  \n            props.history.push(\"/inventory-entry/stock-transfer\")\n          }else if(submitStatus=='noData'){\n            props.history.push(\"/inventory-entry/stock-transfer/CSV-upload/result\");\n          }\n        }}\n        statusDisplay={modalShow}\n        title={title}\n        cancelButtonTitle={cancelButtonTitle}\n        actionButtonTitle={actionButtonTitle}\n        colorText={colourTitle}\n        refreshOnCancel={false}\n        msg1={msg1}\n        msg2={msg2}\n        cancelButtonClass={cancelButtonClass}\n        actionButtonClass={actionButtonClass + \" ml-0\"}\n        actionButtonEvent={() =>\n          {\n            if(submitStatus=='success'){  \n              props.history.push(\"/inventory-entry/stock-transfer/CSV-upload\")\n            } else if(submitStatus=='API'){\n              props.history.push(\"/inventory-entry/stock-transfer/CSV-upload\");\n            }\n        }\n         \n        }\n      /> \n      <ModalsCaptcha\n        submit={() =>\n          submit({\n            dispatch,\n            csvData: selectorCsvData,\n            csvField: selectorCsvField,\n            setIsShowModal,\n            setIsSubmitText,\n            setSubmitStatus,\n            setMsg1,\n            setMsg2,\n          })\n        }\n        submitText={isSubmitText}\n        show={isShowModal}\n        setIsShowModal={setIsShowModal}\n      />\n    </div>\n  );\n};\n\nexport default withRouter(Upload);\n","import { isInteger } from \"formik\";\n\nexport const next = ({\n  e,\n  state,\n  isCaptcha,\n  setIsValidated,\n  setIsType,\n  isType,\n  isValidated,\n  submit\n}) => {\n  const key = e.key; // const {key} = event; ES6+\n  let type = [...isType];\n\n  //if press enter\n  if (key === \"Enter\"){\n    if(isValidated){\n      submit();\n    }else{\n      return;\n    }\n  }\n\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\",\"Delete\"];\n  if (arr_tmp.includes(key)) {\n    return 0;\n  } else if (key === \"Backspace\") {\n    let type_ = [...isType];\n    let state_ = type_[state];\n    if (state_ == \"\" && state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\n      type_[state - 1] = \"\";\n      type[state - 1] = \"\";\n    } \n  } else if (key === \"ArrowLeft\") {\n    if (state !== 1) {\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) - 1))\n        .setSelectionRange(-1, -1);\n\n      return 0;\n    }\n  } else if (key === \"ArrowRight\") {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n      document\n        .getElementById(\"t\" + (parseInt(state) + 1))\n        .setSelectionRange(-1, -1);\n      return 0;\n    }\n  } else {\n    if (state !== 3) {\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\n    }\n  }\n\n  if (key === \"Backspace\") {\n    type[state] = \"\";\n  } else {\n    type[state] = key.toUpperCase();\n  }\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\n  let allowedChar = char.split(\"\");\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\n    setIsType(type);\n  } else {\n    return 0;\n  }\n\n  let stat = true;\n  isCaptcha.map((data, index) => {\n    // if (index == 0) {\n    //   return;\n    // }\n    if (!(type[index + 1] == isCaptcha[index])) {\n      stat = false;\n    } \n  });\n  setIsValidated(stat);\n};\n\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\n  if (module?.length) {\n    let newModule = [];\n    module.map((list) => {\n      list.poList.map((po) => {\n        po.itemList.map((item) => {\n          const { qty, grade } = item;\n          const _qty = isInteger(qty)\n            ? parseInt(qty)\n            : !qty\n              ? 0\n              : parseFloat(qty);\n          const _sku = noSkuChecking\n            ? list.skuName\n            : moduleName === \"waste\"\n              ? item.wasteType?.label\n                ? item.wasteType?.label\n                : list.skuName\n              : grade?.label;\n          const _toWaste =\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\" ||\n                item.wasteType?.label === \"Waste\"\n                ? true\n                : false\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\n                ? true\n                : false;\n          const _uom = noSkuChecking\n            ? list.unitOfMeassures\n            : grade?.uom === \"gram\"\n              ? \"kg\"\n              : grade?.uom;\n          let newSku = {\n            sku: _sku,\n            qty: _qty,\n            uom: _uom,\n            wqty: 0,\n            swqty: 0,\n          };\n          if (_toWaste) {\n            newSku.qty = 0;\n            newSku.sku = list.skuName;\n          }\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Waste\"\n              : grade?.label === \"Waste\"\n          )\n            newSku.wqty = _qty;\n          if (\n            moduleName === \"waste\"\n              ? item.wasteType?.label === \"Semi Waste\"\n              : grade?.label === \"Semi Waste\"\n          )\n            newSku.swqty = _qty;\n          const isExist = newModule.findIndex(\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\n          );\n\n          if (moduleName !== \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (grade?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\n            }\n          }\n\n          if (moduleName === \"waste\") {\n            if (isExist === -1) newModule.push(newSku);\n            if (isExist !== -1) {\n              if (!_toWaste) newModule[isExist].qty += _qty;\n              if (item.wasteType?.label === \"Semi Waste\")\n                newModule[isExist].swqty += _qty;\n              if (item.wasteType?.label === \"Waste\")\n                newModule[isExist].wqty += _qty;\n            }\n          }\n        });\n      });\n    });\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\n    const i = newModule.findIndex((s) => s.sku === skuName);\n    newModule.forEach((sku) => {\n      if (i !== -1) {\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\n      }\n    });\n    return newModule;\n  }\n};\n","import React, { useEffect } from \"react\";\nimport {\n  CButton,\n  CCol,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from \"@coreui/react\";\nimport \"./index.scss\";\nimport { useSelector } from \"react-redux\";\nimport { next, skuListUpdateCheck } from \"./services.js\";\nimport { totalQty } from \"Page/StockEntry/GeneralServices/moduleServices\";\n\nconst ModalsConfirmation = ({\n  moduleEntry,\n  confirmation,\n  setConfirmation,\n  save,\n  submit,\n  isSuccess,\n  isLoading,\n  moveAll,\n  setAction,\n  moduleName,\n  noSkuChecking,\n  singleViewData,\n}) => {\n  const dimention = document.documentElement.clientHeight;\n  const height = dimention - 300;\n\n  let buttonName = \"Submit\";\n\n  if (confirmation.name === \"save\") buttonName = \"Save\";\n  useEffect(() => {\n    if (isSuccess) setConfirmation({ show: false, name: null });\n  }, [isSuccess]);\n  window.onkeydown = (e) =>\n    e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null;\n\n  useEffect(() => {\n    setAction(confirmation.name);\n  }, [confirmation]);\n\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry;\n\n  const areaDestinationName = module?.jobPost?.areaDestinationName;\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName;\n  const areaName = module?.jobPost?.areaName;\n\n  const skuListUpdate = skuListUpdateCheck(\n    module?.jobPost.list,\n    noSkuChecking,\n    moduleName\n  );\n  return (\n    <CRow\n      className={\"modalConfirmation \" + (confirmation.show ? null : \"d-none\")}\n    >\n      <CCol>\n        <CModal show={confirmation.show} closeOnBackdrop={false}>\n          <CModalHeader className=\"px-4 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">\n              Confirmation{\" \"}\n              <span>\n                <i className=\"em em-pray\"></i>\n              </span>\n            </CModalTitle>\n            <label\n              tabIndex=\"0\"\n              onKeyDown={(e) =>\n                e.keyCode === 13\n                  ? setConfirmation({ show: false, name: null })\n                  : false\n              }\n              onClick={() => setConfirmation({ show: false, name: null })}\n              className=\"sku-item iconU-modalClose\"\n            />\n          </CModalHeader>\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\n            <p className=\"text mb-2\">\n              <span>{`Are you sure want to ${\n                areaName == \"Waste\" ? \"update\" : \"send\"\n              } this Item `}</span>\n              <span\n                className={` ${areaDestinationName ? null : \"d-none\"}`}\n              >{` from`}</span>\n              <span\n                className={`green ${areaDestinationName ? null : \"d-none\"}`}\n              >{` ${areaName} `}</span>\n              <span>\n                {moduleName == \"outbound\"\n                  ? \"from\"\n                  : moduleName === \"repack\"\n                  ? \"\"\n                  : \"to\"}{\" \"}\n              </span>\n              <span\n                className={`green ${moduleName !== \"repack\" ? null : \"d-none\"}`}\n              >{` ${\n                moduleName === \"stockTransfer\"\n                  ? warehouseDestinationName\n                  : areaDestinationName\n                  ? areaDestinationName\n                  : areaName\n              } `}</span>\n            </p>\n            <p className=\"text\">\n              Please double check this list, this record will store to database.\n            </p>\n            <div\n              style={{\n                minHeight: height,\n                maxHeight: height,\n                overflow: \"auto\",\n                border: \"1px solid var(--lineGrey)\",\n              }}\n            >\n              <table>\n                <thead>\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Weight\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Semi Waste\n                    </th>\n                    <th\n                      style={{\n                        textAlign: \"right\",\n                        color: \"var(--emptyTextField)\",\n                      }}\n                    >\n                      Waste\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {skuListUpdate?.map((data) => (\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\n                      <td style={{ maxWidth: \"160px\" }}>{data.sku}</td>\n                      <td\n                        className=\"text-right py-3\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        {`${totalQty(data?.qty)}`}\n                      </td>\n                      <td\n                        className=\"text-right text-nowrap\"\n                        style={{ textAlign: \"right\" }}\n                      >\n                        <span className=\"text-nowrap\">{`${totalQty(\n                          data?.swqty\n                        )} `}</span>\n                      </td>\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\n                        {`${totalQty(data?.wqty)}`}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? setConfirmation({ show: false, name: null })\n                    : false\n                }\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\n                onClick={() => setConfirmation({ show: false, name: null })}\n              >\n                Cancel\n              </CButton>\n              <CButton\n                tabIndex=\"0\"\n                onKeyDown={(e) =>\n                  e.keyCode === 13\n                    ? isLoading\n                      ? null\n                      : confirmation.name === \"save\"\n                      ? save()\n                      : submit()\n                    : false\n                }\n                className={`${\n                  isLoading ? \"bg-softGreen text\" : \"bg-green text-white\"\n                } no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\n                onClick={() =>\n                  isLoading\n                    ? null\n                    : confirmation.name === \"save\"\n                    ? save()\n                    : submit()\n                }\n              >\n                {isLoading ? \"Processing...\" : buttonName}\n              </CButton>{\" \"}\n            </div>\n          </CModalBody>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nconst ModalsCaptcha = ({\n  show = false,\n  setIsShowModal,\n  submit,\n  submitText = \"Submit\",\n}) => {\n  //random text\n  var text = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var charactersLength = characters.length;\n  var text_split = [];\n  for (var i = 0; i < 3; i++) {\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\n    text += r;\n    text_split.push(r);\n  }\n\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\n  const [isValidated, setIsValidated] = React.useState(false);\n  const [isType, setIsType] = React.useState([]);\n\n  //reset if visible = false\n  useEffect(() => {\n    if (show === true) {\n      document.getElementById(\"t1\").value = \"\";\n      document.getElementById(\"t2\").value = \"\";\n      document.getElementById(\"t3\").value = \"\";\n    }\n  }, [show]);\n\n  return (\n    <CRow className={show ? null : \"d-none\"}>\n      <CCol>\n        <CModal\n          show={show}\n          onClose={() => {\n            setIsShowModal(false);\n          }}\n          size=\"lg\"\n          style={{ height: \"400px\" }}\n        >\n          <CModalHeader className=\"px-5 pt-5 border-none\">\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"px-5 py-0\">\n            <p className=\"text mb-2\">\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\n              {selectorCsvFileName}?\n            </p>\n            <p className=\"text\">\n              Once uploaded this record will store to databases.\n            </p>\n            <p className=\"text mb-2\">\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\n            </p>\n\n            <div className=\"captcha-box\">\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 1,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t1\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[0]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 2,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t2\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input ml-0 mr-0\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[1]}\n              />\n              <input\n                autocomplete=\"off\"\n                onKeyUp={(e) => {\n                  next({\n                    e,\n                    state: 3,\n                    isCaptcha,\n                    setIsValidated,\n                    setIsType,\n                    isType,\n                    isValidated,\n                    submit,\n                  });\n                }}\n                id=\"t3\"\n                type=\"text\"\n                style={{ textTransform: \"uppercase\" }}\n                className=\"captcha-input\"\n                maxLength=\"1\"\n                placeholder={isCaptcha[2]}\n              />\n            </div>\n          </CModalBody>\n\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\n            <CButton\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\n              onClick={() => {\n                setIsShowModal(false);\n              }}\n            >\n              Cancel\n            </CButton>\n            <CButton\n              className={\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\n              }\n              onClick={() => {\n                submit();\n                setIsValidated(false);\n              }}\n            >\n              {submitText}\n            </CButton>{\" \"}\n          </CModalFooter>\n        </CModal>\n      </CCol>\n    </CRow>\n  );\n};\n\nexport { ModalsConfirmation, ModalsCaptcha };\n","import React from \"react\";\nimport { CCard } from \"@coreui/react\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport \"./bootstrapTable-style.scss\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport axios from \"axios\";\n\n//cell editable\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\n\nclass TableEditable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validateStatus: false,\n      validateResult: \"Please Wait...\",\n      globalData: this.props.globalData,\n      rowCount: 0,\n      keyy: 0,\n      triggerRender: 0\n    };  \n    this.validatePOSKUStockTransfer = this.validatePOSKUStockTransfer.bind(this);\n    this.validateSKUNumber = this.validateSKUNumber.bind(this);\n    \n  } \n  changeOutboundReason = (row) => {\n    setTimeout(() => {\n      let elem = document.getElementById(`row${row}-outboundReason`);\n      elem.classList.add(\"red\", \"tooltip-custom\");\n      elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\n    }, 300);\n  }\n\n  changeWarehouseUuid = (\n    value,\n    column,\n    columnName,\n    row,\n    warehouseCodeList,\n    warehouseUuidList,\n    warehouseNameList\n  ) => {\n    const { setCsvDataTmp, globalData } = this.props;\n    let tmpdata = globalData;\n    var index = tmpdata.findIndex((obj) => obj.id == row);\n    let i = warehouseCodeList.indexOf(value);\n    tmpdata[index][column] = warehouseUuidList[i];\n    tmpdata[index][columnName] = warehouseNameList[i];\n\n    console.clear() \n    setTimeout(async () => {\n      setCsvDataTmp(tmpdata);\n    }, 400);\n  };\n\n  validatePOSKU = async (id, row, idColumn) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;\n    if(transaction==\"additional_inbound\"){\n      return;\n    }\n\n    let tmpdata = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/stocktake/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        elem.classList.add(\"red\");\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          var index = tmpdata.findIndex((obj) => obj.id == row);\n          if (data[0] && data[0].isExist === true) {\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\n            tmpdata[index].wmsPoSkuCodeStatus = true;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = data[0].expiryDate;\n            tmpdata[index].inboundDate = data[0].inboundDate;\n            tmpdata[index].supplierName = data[0].supplierName;\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\n            tmpdata[index].uom = data[0].uom;\n            tmpdata[index].photos = data[0].photos;\n            elem.classList.remove(\"red\");\n            elem.classList.add(\"hiddenTooltip\");\n          } else {\n            tmpdata[index].wmsPoSkuCodeStatus = false;\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\n            tmpdata[index].expiryDate = \"\";\n            tmpdata[index].inboundDate = \"\";\n            tmpdata[index].supplierName = \"\";\n            tmpdata[index].supplierUuid = \"\";\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\n          }\n          setCsvDataTmp(tmpdata);\n        });\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validatePOSKUStockTransfer = async (newValue, row, idColumn, key) => {\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;  \n    let tmpdata = globalData;\n    \n    var index = tmpdata.findIndex((obj) => obj.id == row.id); \n    // console.log(tmpdata)\n    // console.log(row.id, row)\n    // console.log(index)\n\n    try {\n      const url = \"/stocktransfer/rowValidationUpload\";\n      let elem = null;\n      let elemspan = null;\n      let payloadPO = [{\n        \"id\": row.id,\n        \"poSkuCode\": key==\"wmsPoSkuCode\" ? newValue : (row.poSkuCode?row.poSkuCode:\"\"),\n        \"skuNumber\": key==\"skuNumber\"? newValue?.skuNumber: row.skuNumber,\n        \"skuUuid\": key==\"skuNumber\"? newValue?.skuUuid:row.skuUuid,\n        \"warehouseSource\": row.warehouseSource,\n        \"areaSource\": row.areaSource,\n        \"weight\": key==\"qty\"?newValue:row.qty\n      }]; \n\n      setTimeout(async () => {\n        //setvalidate false\n        setIsValidate(false);\n\n        //elemen column\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        // elem.classList.remove(\"hiddenTooltip\");\n        // elem.classList.add(\"red\");  \n        await axios({\n          method: \"post\",\n          url: url,\n          data: { data: payloadPO },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          if (data[0]) {\n            if(data[0].isExist === true && data[0].isValid === true){\n              tmpdata[index]['rowStatus'] = true;\n              tmpdata[index]['rowReason'] = \"\";\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }else{\n              tmpdata[index]['rowStatus'] = false;\n              tmpdata[index]['rowReason'] = data[0]?.errorMessage;\n            }\n            tmpdata[index]['wmsPoSkuCode'] = data[0]?.wmsPoSkuCode ;\n            tmpdata[index]['wmsPoSkuCodeStatus'] = data[0]?.isExist && data[0]?.isValid;\n            tmpdata[index]['wmsPoSkuCodeReason'] = data[0]?.errorMessage;\n            tmpdata[index]['expiryDate'] = data[0]?.expiryDate;\n            tmpdata[index]['inboundDate'] = data[0]?.inboundDate;\n            tmpdata[index]['supplierName'] = data[0]?.supplierName;\n            tmpdata[index]['supplierUuid'] = data[0]?.supplierUuid;\n            tmpdata[index]['uom'] = data[0]?.uom;\n            tmpdata[index]['photos'] = data[0]?.photos;\n          } else {\n            tmpdata[index]['wmsPoSkuCodeStatus'] = false;\n            tmpdata[index]['wmsPoSkuCodeReason'] = response?.data?.message;\n            tmpdata[index]['expiryDate'] = \"\";\n            tmpdata[index]['inboundDate'] = \"\";\n            tmpdata[index]['supplierName'] = \"\";\n            tmpdata[index]['supplierUuid'] = \"\";\n            tmpdata[index]['rowStatus'] = false;\n            tmpdata[index]['rowReason'] = response?.data?.message;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = response?.data?.message;\n          } \n\n          if(key==\"skuNumber\"){ \n            tmpdata[index][\"skuNumber\"] = newValue.skuNumber;\n            tmpdata[index][\"skuNumberReason\"] = newValue.skuDescription;\n            tmpdata[index][\"skuNumberStatus\"] = true;\n            tmpdata[index][\"skuUuid\"] = newValue.skuUuid;\n          }\n          setCsvDataTmp(tmpdata); \n        }); \n        let tmpKey = this.state.keyy + 1; \n        this.setState({keyy: tmpKey}); \n      }, 500);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  validateOutbountReason = (value, row, idColumn) => {\n    const { globalData } = this.props;\n    let tmp_data = globalData;\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\n      this.changeOutboundReason(row)\n    }\n  };\n\n  validateOutbountType = (value, row, idColumn) => {\n    const { globalData, setIsValidate } = this.props;\n    let tmp_data = globalData;\n    setIsValidate(false);\n    if (value.toUpperCase() !== \"LAINNYA\") {\n      setIsValidate(true);\n      return 0;\n    }\n\n    var index = tmp_data.findIndex((obj) => obj.id == row);\n    let datax = tmp_data[index];\n    if (datax[\"outboundReason\"] == \"\") {\n      this.changeOutboundReason(row);\n    }\n  };\n\n  validateSKUNumber = async (id, row, idColumn, key, rowData = null) => {\n    const { globalData, setCsvDataTmp, setIsValidate,transaction } = this.props;\n    let tmp_data = globalData;\n    try {\n      setIsValidate(false);\n      const url = \"/oss/skuByNumbers\";\n      let elem = null;\n      let elemspan = null;\n      \n      // for validating stock transfer\n      let stats = false;\n      let newSkuData = {} \n      setTimeout(async () => {\n        elem = document.getElementById(`${idColumn}`);\n        elemspan = document.getElementById(`${idColumn}span`);\n        if (elem === null || elem === undefined) {\n          return 0;\n        }\n        elemspan.innerHTML = \"Validating\";\n        await axios({\n          method: \"post\",\n          url: url,\n          data: { skuList: [id] },\n        }).then(function (response) {\n          let data = response?.data?.data;\n          let isSuccess = response.data.isSuccess;\n          var index = tmp_data.findIndex((obj) => obj.id == row);\n          if (isSuccess === true && data.length > 0) {\n            stats = true;\n            tmp_data[index][key] = data[0].skuNumber;\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\n            tmp_data[index][key + \"Status\"] = true;\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\n            newSkuData = {\n              skuUuid: data[0].id,\n              skuNumber: data[0].skuNumber,\n              skuDescription: data[0].skuDescription,\n              photo: data[0].photo\n            }\n\n            //custom\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = data[0].id;\n              tmp_data[index].photo = data[0].imageMd;\n            }\n\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = data[0].uom;\n            }\n            \n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = data[0].uom;\n            }\n\n            \n            if(transaction!==\"stockTransfer\"){\n              elem.classList.remove(\"red\");\n              elem.classList.add(\"hiddenTooltip\");\n            }\n\n          } else {\n            stats = false;\n            tmp_data[index][key] = id;\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\n            tmp_data[index][key + \"Status\"] = false;\n            tmp_data[index][key + \"Uuid\"] = null;\n            elem.classList.add(\"red\");\n            elem.classList.remove(\"hiddenTooltip\");\n            elemspan.innerHTML = \"SKU Number Not Found\";\n\n            if (key == \"skuNumber\") {\n              tmp_data[index].skuUuid = \"\";\n              tmp_data[index].photo = \"\";\n            }\n            if (key == \"newGrade\") {\n              tmp_data[index].newGradeUom = null;\n            }\n            if(transaction==\"additional_inbound\"){\n              tmp_data[index].uom = \"\";\n            }\n          } \n        });\n\n        if(transaction==\"stockTransfer\" && stats === true){ \n          this.validatePOSKUStockTransfer(newSkuData, rowData, idColumn, 'skuNumber')\n        }else{\n          setCsvDataTmp(tmp_data);\n        }\n      }, 400);\n    } catch (error) {\n      return false;\n    }\n  };\n\n  render() {\n    const {\n      columns,\n      hiddenRows,\n      tableClass,\n      warehouseArea,\n      outboundType,\n      setCheckingCsv, \n      editable = true,\n      warehousesData = [],\n      transaction,\n      globalData\n    } = this.props;\n    let { validateStatus,  keyy } = this.state;\n    \n    //wh\n    let warehouseCodeList = [];\n    let warehouseUuidList = [];\n    let warehouseNameList = [];\n    if (warehousesData) {\n      let tmp = warehousesData?.data?.map((d) => {\n        warehouseCodeList.push(d.code);\n        warehouseUuidList.push(d.id);\n        warehouseNameList.push(d.name);\n      });\n    }\n\n    //wh area\n    let wh_area_label =\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\n    let wh_outboundtype_label = !outboundType\n      ? []\n      : outboundType.map((data) => data.label.toUpperCase());\n    let wh_outboundtype_value = !outboundType\n      ? []\n      : outboundType.map((data) => data.value);\n    const newFormat = columns.map((data, index) => {\n      data.validator = (newValue, row, column, done) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let reason = null;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n\n        let stockTransferColumnCheck = ['wmsPoSkuCode', 'qty']\n        if (stockTransferColumnCheck.includes(key) && transaction==\"stockTransfer\") {\n          this.validatePOSKUStockTransfer(newValue, row, idColumn, key);\n          stat = true;\n        }else if(key == \"wmsPoSkuCode\" ){\n          this.validatePOSKU(newValue, row.id, idColumn, key);\n          stat = true; \n        }\n\n        if (key == \"skuNumber\") {\n          this.validateSKUNumber(newValue, row.id, idColumn, key, row);\n          stat = true;\n        }\n\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type not found\";\n            checkType = false;\n            stat = false;\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        } else if (key == \"newGrade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            //if not waste or semi waste\n            if (parseInt(newValue)) {\n              //if number\n              stat = true;\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\n            } else if (newValue == \"\") {\n              row[\"newGradeUuid\"] = null;\n              row[\"newGradeUom\"] = null;\n              stat = true;\n            } else {\n              //if not number => undefined\n              reason = \"Grade Undefined\";\n              checkType = false;\n              stat = false;\n            }\n          } else {\n            row[\"newGradeUuid\"] = newValue;\n            row[\"newGradeUom\"] = null;\n          }\n        }\n\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Outbound Type Not Found`;\n          } else {\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\n            stat = true;\n            this.validateOutbountType(newValue, row.id, idColumn);\n          }\n        }\n\n        if (key == \"outboundReason\") {\n          this.validateOutbountReason(newValue, row.id, idColumn);\n        }\n\n        if (key == \"warehouse\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseUuid\",\n              \"warehouseName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          }\n        }\n        if (key == \"warehouseDestination\") {\n          if (!warehouseCodeList.includes(newValue)) {\n            stat = false;\n            reason = `Warehouse Not Found`;\n          } else {\n            stat = true;\n            this.changeWarehouseUuid(\n              newValue,\n              \"warehouseDestinationUuid\",\n              \"warehouseDestinationName\",\n              row.id,\n              warehouseCodeList,\n              warehouseUuidList,\n              warehouseNameList\n            );\n          } \n        }\n\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\n            stat = false;\n            reason = `Warehouse Area Not Found`;\n          } else {\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\n            if (key == \"areaNameDestination\") {\n              row[\"areaDestination\"] = wh_area_value[i];\n            } else {\n              row[\"areaSource\"] = wh_area_value[i];\n            }\n            stat = true;\n          }\n        }\n\n        if (key == \"newPack\") {\n          let checkTypenewPack = isNaN(newValue) ? false : true;\n          if (!checkTypenewPack) {\n            stat = false;\n            reason = `Pack Should be a number`;\n          } else {\n            stat = true;\n          }\n        } \n        \n\n        let checkType = null;\n        if (data.type == \"number\") {\n          checkType = isNaN(newValue) ? false : true;\n        } else {\n          checkType = true;\n        }\n        if (checkType === false) {\n          reason = `${data.text} Should be a ${data.type}`;\n        } \n\n        \n        if (key == \"wmsPoSkuCode\" && transaction == \"stockTransfer\") {\n          if(isNaN(newValue)){\n            checkType = false;\n            reason = `${data.text} Should be a number`;\n            stat = false;\n          } \n        } \n\n        //some field can null\n        let canNull = [\n          \"grade\",\n          \"outboundReason\",\n          \"ripenessLevel\",\n          \"newRipeness\",\n          \"reason\",\n          \"expiryDate\"\n        ]; \n\n        if (canNull.includes(key) && newValue === \"\") {\n          reason = \"\";\n          checkType = true;\n          stat = true;\n        } else if (key == \"grade\") {\n          if (!arr_grade.includes(newValue.toUpperCase())) {\n            reason = \"Waste Type Not Found\";\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //check ripenesslevel\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\n          let allowedRipenessLevel = [0, 1, 2, 3];\n          if (\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\n            newValue == \"\"\n          ) {\n            checkType = true;\n            stat = true;\n            reason = \"\";\n            if (newValue == \"\") {\n              newValue = \"\";\n            }\n          } else {\n            checkType = false;\n            stat = false;\n            reason = \"Undefined Ripeness Level\";\n          }\n        }\n\n        //check date\n        if (data.type == \"date_indo\") {\n          //checking date\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\n          if (newValue.match(regex_date)) {\n            checkType = true;\n            stat = true;\n          } else if (newValue == \"\") {\n            checkType = true;\n            stat = true;\n          } else {\n            reason = `Date format must be 'dd-mm-yyyy'`;\n            checkType = false;\n            stat = false;\n          }\n        }\n\n        //set notif\n        row[keyReason] = reason;\n        if (stat && checkType) {\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\n          if (!specialKey.includes(key)) {\n            //some key have their own checking, so if not in array do checking error\n            row[keyStatus] = true;\n            setCheckingCsv();\n          }\n        } \n         \n        return {\n          valid: stat && checkType ? true : false,\n          message: reason,\n        };\n      };\n\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        let keyStatus = key + \"Status\";\n        let keyReason = key + \"Reason\";\n        let stat = true;\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\n        let txt = row[keyReason];\n        \n        // if status column = false\n        // that mean there's error or not valid data in some column\n        if (row[keyStatus] === false) {\n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {txt}\n              </span>\n            </div>\n          );\n        }\n\n        // if global row status = false\n        // that mean there's wmsposkucode validation error, and makes 1 line become red colour\n        // for now is only for stock transfer  \n        if ( transaction==\"stockTransfer\" &&  row['rowStatus'] === false) { \n          validateStatus = false;\n          stat = false;\n          return (\n            <div id={idColumn} className=\"tooltip-custom red\">\n              {cell}\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\n                {row['rowReason']}\n              </span>\n            </div>\n          );\n        }\n\n        \n        // if status column = true\n        // No problem \n        return (\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\n            {cell}\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\n              {txt}\n            </span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n    console.clear();  \n    console.log(globalData)\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={globalData}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          cellEdit={\n            editable === true\n              ? cellEditFactory({\n                  mode: \"click\",\n                  blurToSave: true,\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\n                })\n              : null\n          }\n          bordered={false}\n          hiddenRows={hiddenRows}\n          key={keyy}\n        />\n      </CCard>\n    );\n  }\n}\n\nclass TableResult extends React.Component {\n  render() {\n    const { columns, tableClass, data } = this.props;\n\n    const newFormat = columns.map((data, index) => {\n      data.formatter = (cell, row, index) => {\n        let key = data.dataField;\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\n          return (\n            <div className=\"tooltip-custom red\">\n              {cell}\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\n            </div>\n          );\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\n          return (\n            <div className=\"green\">\n              {cell}\n              <span></span>\n            </div>\n          );\n        }\n\n        return (\n          <div>\n            {cell}\n            <span></span>\n          </div>\n        );\n      };\n      return data;\n    });\n\n    const sortOption = {\n      // No need to configure sortFunc per column\n      sortFunc: this.sortFunc,\n      // No need to configure sortCaret per column\n      sortCaret: (order, column) => {\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\n        else if (order === \"asc\")\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\n        else if (order === \"desc\")\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\n        return null;\n      },\n    };\n\n    return (\n      <CCard className=\"table-responsive\">\n        <BootstrapTable\n          keyField=\"id\"\n          data={data}\n          columns={newFormat}\n          sort={sortOption}\n          classes={tableClass || null}\n          bordered={false}\n        />\n      </CCard>\n    );\n  }\n}\n\nexport { TableResult, TableEditable };\n"],"sourceRoot":""}